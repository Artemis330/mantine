{
  "article-cards": [
    {
      "component": "ArticleCard",
      "url": "/component/article-card",
      "code": "import React from 'react';\nimport { BookmarkIcon, HeartIcon, ShareIcon } from '@primer/octicons-react';\nimport {\n  Card,\n  Image,\n  Text,\n  ActionIcon,\n  Badge,\n  Group,\n  Center,\n  Avatar,\n  useMantineTheme,\n  createStyles,\n} from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    position: 'relative',\n  },\n\n  rating: {\n    position: 'absolute',\n    top: theme.spacing.xs,\n    right: theme.spacing.xs + 2,\n    pointerEvents: 'none',\n  },\n\n  title: {\n    display: 'block',\n    marginTop: theme.spacing.md,\n    marginBottom: theme.spacing.xs / 2,\n  },\n\n  action: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[0],\n  },\n\n  footer: {\n    marginTop: theme.spacing.md,\n  },\n}));\n\ninterface ArticleCardProps {\n  image: string;\n  link: string;\n  title: string;\n  description: string;\n  rating: string;\n  author: {\n    name: string;\n    image: string;\n  };\n}\n\nexport function ArticleCard({\n  className,\n  image,\n  link,\n  title,\n  description,\n  author,\n  rating,\n  ...others\n}: ArticleCardProps & Omit<React.ComponentPropsWithoutRef<'div'>, keyof ArticleCardProps>) {\n  const { classes, cx } = useStyles();\n  const theme = useMantineTheme();\n  const linkProps = { href: link, target: '_blank', rel: 'noopener noreferrer' };\n\n  return (\n    <Card shadow=\"sm\" className={cx(classes.card, className)} {...others}>\n      <Card.Section>\n        <a {...linkProps}>\n          <Image src={image} height={180} />\n        </a>\n      </Card.Section>\n\n      <Badge className={classes.rating} variant=\"gradient\" gradient={{ from: 'yellow', to: 'red' }}>\n        {rating}\n      </Badge>\n\n      <Text className={classes.title} weight={500} component=\"a\" {...linkProps}>\n        {title}\n      </Text>\n\n      <Text size=\"sm\" color=\"dimmed\" lineClamp={4}>\n        {description}\n      </Text>\n\n      <Group position=\"apart\" className={classes.footer}>\n        <Center>\n          <Avatar src={author.image} size={24} radius=\"xl\" mr=\"xs\" />\n          <Text size=\"sm\" inline>\n            {author.name}\n          </Text>\n        </Center>\n\n        <Group spacing={8} mr={0}>\n          <ActionIcon className={classes.action} style={{ color: theme.colors.red[6] }}>\n            <HeartIcon />\n          </ActionIcon>\n          <ActionIcon className={classes.action} style={{ color: theme.colors.yellow[7] }}>\n            <BookmarkIcon />\n          </ActionIcon>\n          <ActionIcon className={classes.action}>\n            <ShareIcon />\n          </ActionIcon>\n        </Group>\n      </Group>\n    </Card>\n  );\n}\n",
      "attributes": {
        "title": "Article card with image",
        "category": "article-cards",
        "author": "rtivital",
        "dependencies": [
          "/core/card/",
          "/core/text/",
          "/core/group/",
          "/core/center/",
          "/core/avatar/",
          "/core/badge/",
          "/core/image/",
          "/core/action-icon/",
          "@primer/octicons-react"
        ],
        "props": {
          "image": "https://i.imgur.com/Cij5vdL.png",
          "link": "https://mantine.dev/",
          "title": "Resident Evil Village review",
          "rating": "outstanding",
          "description": "Resident Evil Village is a direct sequel to 2017’s Resident Evil 7, but takes a very different direction to its predecessor, namely the fact that this time round instead of fighting against various mutated zombies, you’re now dealing with more occult enemies like werewolves and vampires.",
          "author": {
            "name": "Bill Wormeater",
            "image": "https://images.unsplash.com/photo-1593229874334-90d965f27c42?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=200&q=80"
          }
        },
        "canvas": {
          "center": true,
          "maxWidth": 320
        }
      }
    },
    {
      "component": "ImageCard",
      "url": "/component/image-card",
      "code": "import React from 'react';\nimport { EyeOpenIcon, ChatBubbleIcon } from '@modulz/radix-icons';\nimport { Card, Text, Group, Center, createStyles } from '@mantine/core';\n\nconst useStyles = createStyles((theme, _params, getRef) => {\n  const image = getRef('image');\n\n  return {\n    card: {\n      position: 'relative',\n      height: 280,\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n\n      [`&:hover .${image}`]: {\n        transform: 'scale(1.03)',\n      },\n    },\n\n    image: {\n      ref: image,\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundSize: 'cover',\n      transition: 'transform 500ms ease',\n    },\n\n    overlay: {\n      position: 'absolute',\n      top: '20%',\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundImage: 'linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, .85) 90%)',\n    },\n\n    content: {\n      height: '100%',\n      position: 'relative',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'flex-end',\n      zIndex: 1,\n    },\n\n    title: {\n      color: theme.white,\n      marginBottom: 5,\n    },\n\n    body: {\n      color: theme.colors.gray[3],\n    },\n\n    bodyText: {\n      color: theme.colors.dark[2],\n    },\n  };\n});\n\ninterface ImageCardProps {\n  link: string;\n  image: string;\n  title: string;\n  author: string;\n  views: number;\n  comments: number;\n}\n\nexport function ImageCard({ image, title, author, views, comments, link }: ImageCardProps) {\n  const { classes } = useStyles();\n  const iconStyle = { marginRight: 7, width: 12, height: 12 };\n\n  return (\n    <Card\n      padding=\"lg\"\n      shadow=\"lg\"\n      className={classes.card}\n      radius=\"md\"\n      component=\"a\"\n      href={link}\n      target=\"_blank\"\n    >\n      <div className={classes.image} style={{ backgroundImage: `url(${image})` }} />\n      <div className={classes.overlay} />\n\n      <div className={classes.content}>\n        <div>\n          <Text size=\"lg\" className={classes.title} weight={500}>\n            {title}\n          </Text>\n\n          <Group className={classes.body} position=\"apart\" spacing=\"xs\">\n            <Text size=\"sm\" className={classes.bodyText}>\n              {author}\n            </Text>\n\n            <Group spacing=\"lg\">\n              <Center>\n                <EyeOpenIcon style={iconStyle} />\n                <Text size=\"sm\" className={classes.bodyText}>\n                  {views}\n                </Text>\n              </Center>\n              <Center>\n                <ChatBubbleIcon style={iconStyle} />\n                <Text size=\"sm\" className={classes.bodyText}>\n                  {comments}\n                </Text>\n              </Center>\n            </Group>\n          </Group>\n        </div>\n      </div>\n    </Card>\n  );\n}\n",
      "attributes": {
        "title": "Card with image as background",
        "category": "article-cards",
        "author": "rtivital",
        "dependencies": [
          "/core/card/",
          "/core/text/",
          "/core/group/",
          "/core/center",
          "@modulz/radix-icons"
        ],
        "props": {
          "image": "https://images.unsplash.com/photo-1530122037265-a5f1f91d3b99?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",
          "link": "https://mantine.dev/",
          "title": "Journey to Swiss Alps",
          "author": "Robert Gluesticker",
          "views": 7847,
          "comments": 5
        },
        "canvas": {
          "center": true,
          "maxWidth": 320
        }
      }
    }
  ],
  "authentication": [
    {
      "component": "AuthenticationForm",
      "url": "/component/authentication-form",
      "code": "import React from 'react';\nimport { useForm, useToggle, upperFirst } from '@mantine/hooks';\nimport {\n  TextInput,\n  PasswordInput,\n  Text,\n  Paper,\n  Group,\n  PaperProps,\n  Button,\n  Divider,\n  Checkbox,\n  Anchor,\n} from '@mantine/core';\nimport { GoogleButton, TwitterButton } from '../SocialButtons/SocialButtons';\n\nexport function AuthenticationForm(props: PaperProps<'div'>) {\n  const [type, toggle] = useToggle('login', ['login', 'register']);\n  const form = useForm({\n    initialValues: {\n      email: '',\n      name: '',\n      password: '',\n      terms: true,\n    },\n\n    validationRules: {\n      email: (val) => /^\\S+@\\S+$/.test(val),\n      password: (val) => val.length >= 6,\n    },\n  });\n\n  return (\n    <Paper\n      shadow=\"sm\"\n      radius=\"md\"\n      padding=\"xl\"\n      sx={(theme) => ({\n        backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.white,\n      })}\n      {...props}\n    >\n      <Text size=\"lg\" weight={500}>\n        Welcome to Mantine, {type} with\n      </Text>\n\n      <Group grow mb=\"md\" mt=\"sm\">\n        <GoogleButton radius=\"xl\">Google</GoogleButton>\n        <TwitterButton radius=\"xl\">Twitter</TwitterButton>\n      </Group>\n\n      <Divider label=\"Or continue with email\" labelPosition=\"center\" />\n\n      <form onSubmit={form.onSubmit(() => {})}>\n        <Group direction=\"column\" grow mt={5}>\n          {type === 'register' && (\n            <TextInput\n              label=\"Name\"\n              placeholder=\"Your name\"\n              value={form.values.name}\n              onChange={(event) => form.setFieldValue('name', event.currentTarget.value)}\n            />\n          )}\n\n          <TextInput\n            required\n            label=\"Email\"\n            placeholder=\"hello@mantine.dev\"\n            value={form.values.email}\n            onChange={(event) => form.setFieldValue('email', event.currentTarget.value)}\n            error={form.errors.email && 'Invalid email'}\n          />\n\n          <PasswordInput\n            required\n            label=\"Password\"\n            placeholder=\"Your password\"\n            value={form.values.password}\n            onChange={(event) => form.setFieldValue('password', event.currentTarget.value)}\n            error={form.errors.password && 'Password should include at least 6 characters'}\n          />\n\n          {type === 'register' && (\n            <Checkbox\n              label=\"I accept terms and conditions\"\n              checked={form.values.terms}\n              onChange={(event) => form.setFieldValue('terms', event.currentTarget.checked)}\n            />\n          )}\n        </Group>\n\n        <Group position=\"apart\" mt=\"lg\">\n          <Anchor component=\"button\" type=\"button\" color=\"gray\" onClick={() => toggle()} size=\"xs\">\n            {type === 'register'\n              ? 'Already have an account? Login'\n              : \"Don't have an account? Register\"}\n          </Anchor>\n          <Button type=\"submit\">{upperFirst(type)}</Button>\n        </Group>\n      </form>\n    </Paper>\n  );\n}\n",
      "attributes": {
        "title": "Authentication form",
        "category": "authentication",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/paper/",
          "/core/text-input/",
          "/core/password-input/",
          "/core/checkbox/",
          "/core/text/",
          "/core/button/",
          "/core/group/",
          "/core/divider/",
          "/hooks/use-form/",
          "/hooks/use-toggle/"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 420
        }
      }
    },
    {
      "component": "AuthenticationImage",
      "url": "/component/authentication-image",
      "code": "import React from 'react';\nimport {\n  Paper,\n  createStyles,\n  TextInput,\n  PasswordInput,\n  Checkbox,\n  Button,\n  Title,\n  Text,\n  Anchor,\n} from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    minHeight: 900,\n    backgroundSize: 'cover',\n    backgroundImage:\n      'url(https://images.unsplash.com/photo-1484242857719-4b9144542727?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1280&q=80)',\n  },\n\n  form: {\n    borderRight: `1px solid ${theme.colors.gray[2]}`,\n    minHeight: 900,\n    maxWidth: 450,\n    paddingTop: 80,\n\n    [`@media (max-width: ${theme.breakpoints.sm}px)`]: {\n      maxWidth: '100%',\n    },\n  },\n\n  title: {\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n  },\n\n  logo: {\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    width: 120,\n    display: 'block',\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n}));\n\nexport function AuthenticationImage() {\n  const { classes } = useStyles();\n  return (\n    <div className={classes.wrapper}>\n      <Paper className={classes.form} radius={0} padding={30} shadow=\"md\">\n        <Title order={2} className={classes.title} align=\"center\" mt=\"md\" mb={50}>\n          Welcome back to Mantine!\n        </Title>\n\n        <TextInput label=\"Email address\" placeholder=\"hello@gmail.com\" size=\"md\" />\n        <PasswordInput label=\"Password\" placeholder=\"Your password\" mt=\"md\" size=\"md\" />\n        <Checkbox label=\"Keep me logged in\" mt=\"xl\" size=\"md\" />\n        <Button fullWidth mt=\"xl\" size=\"md\">\n          Login\n        </Button>\n\n        <Text align=\"center\" mt=\"md\">\n          Don&apos;t have an account?{' '}\n          <Anchor<'a'> href=\"#\" weight={700} onClick={(event) => event.preventDefault()}>\n            Register\n          </Anchor>\n        </Text>\n      </Paper>\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Authentication page with image",
        "category": "authentication",
        "author": "rtivital",
        "withColor": true,
        "responsive": true,
        "dependencies": [
          "/core/paper/",
          "/core/title/",
          "/core/text/",
          "/core/text-input/",
          "/core/password-input/",
          "/core/button/",
          "/core/anchor/"
        ],
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "SocialButtons",
      "url": "/component/social-buttons",
      "code": "import React from 'react';\nimport { GitHubLogoIcon } from '@modulz/radix-icons';\nimport { Button, ButtonProps, Group } from '@mantine/core';\nimport { GoogleIcon } from './GoogleIcon';\nimport { TwitterIcon } from './TwitterIcon';\n\nexport function GoogleButton(props: ButtonProps<'button'>) {\n  return <Button leftIcon={<GoogleIcon />} variant=\"default\" color=\"gray\" {...props} />;\n}\n\nexport function FacebookButton(props: ButtonProps<'button'>) {\n  return <Button style={{ backgroundColor: '#4267B2', color: '#fff' }} {...props} />;\n}\n\n// Twitter button as anchor\nexport function TwitterButton(props: ButtonProps<'a'>) {\n  return <Button component=\"a\" leftIcon={<TwitterIcon />} variant=\"default\" {...props} />;\n}\n\nexport function GithubButton(props: ButtonProps<'button'>) {\n  return (\n    <Button\n      {...props}\n      leftIcon={<GitHubLogoIcon />}\n      style={{ backgroundColor: '#000', color: '#fff' }}\n    />\n  );\n}\n\nexport function SocialButtons() {\n  return (\n    <Group position=\"center\" sx={{ padding: 15 }}>\n      <GoogleButton>Continue with Google</GoogleButton>\n      <TwitterButton href=\"https://twitter.com/mantinedev\" target=\"_blank\">\n        Follow on Twitter\n      </TwitterButton>\n      <FacebookButton>Sign in with Facebook</FacebookButton>\n      <GithubButton>View on GitHub</GithubButton>\n    </Group>\n  );\n}\n",
      "attributes": {
        "title": "Social buttons",
        "category": "authentication",
        "author": "rtivital",
        "dependencies": [
          "/core/button/",
          "/core/group/",
          "@modulz/radix-icons"
        ],
        "canvas": {
          "center": true
        }
      }
    }
  ],
  "inputs": [
    {
      "component": "AutocompleteLoading",
      "url": "/component/autocomplete-loading",
      "code": "import React, { useState, useRef } from 'react';\nimport { Autocomplete, Loader } from '@mantine/core';\n\nexport function AutocompleteLoading() {\n  const timeoutRef = useRef<number>(-1);\n  const [value, setValue] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<string[]>([]);\n\n  const handleChange = (val: string) => {\n    window.clearTimeout(timeoutRef.current);\n    setValue(val);\n    setData([]);\n\n    if (val.trim().length === 0 || val.includes('@')) {\n      setLoading(false);\n    } else {\n      setLoading(true);\n      timeoutRef.current = window.setTimeout(() => {\n        setLoading(false);\n        setData(['gmail.com', 'outlook.com', 'yahoo.com'].map((provider) => `${val}@${provider}`));\n      }, 1000);\n    }\n  };\n  return (\n    <Autocomplete\n      value={value}\n      data={data}\n      onChange={handleChange}\n      rightSection={loading ? <Loader size={16} /> : null}\n      label=\"Async Autocomplete data\"\n      placeholder=\"Your email\"\n    />\n  );\n}\n",
      "attributes": {
        "title": "Autocomplete async data",
        "category": "inputs",
        "author": "rtivital",
        "dependencies": [
          "/core/autocomplete/",
          "/core/loader/"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 420
        }
      }
    },
    {
      "component": "CheckboxCard",
      "url": "/component/checkbox-card",
      "code": "import React from 'react';\nimport { UnstyledButton, Checkbox, Text, createStyles } from '@mantine/core';\nimport { useUncontrolled } from '@mantine/hooks';\n\nconst useStyles = createStyles((theme) => ({\n  button: {\n    display: 'flex',\n    width: '100%',\n    border: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.colors.gray[3]\n    }`,\n    borderRadius: theme.radius.sm,\n    padding: theme.spacing.lg,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.white,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[9] : theme.colors.gray[0],\n    },\n  },\n}));\n\ninterface CheckboxCardProps {\n  checked?: boolean;\n  defaultChecked?: boolean;\n  onChange?(checked: boolean): void;\n  title: React.ReactNode;\n  description: React.ReactNode;\n}\n\nexport function CheckboxCard({\n  checked,\n  defaultChecked,\n  onChange,\n  title,\n  description,\n  className,\n  ...others\n}: CheckboxCardProps & Omit<React.ComponentPropsWithoutRef<'button'>, keyof CheckboxCardProps>) {\n  const { classes, cx } = useStyles();\n\n  const [value, handleChange] = useUncontrolled({\n    value: checked,\n    defaultValue: defaultChecked,\n    finalValue: false,\n    onChange,\n    rule: (val) => typeof val === 'boolean',\n  });\n\n  return (\n    <UnstyledButton\n      {...others}\n      onClick={() => handleChange(!value)}\n      className={cx(classes.button, className)}\n    >\n      <Checkbox\n        checked={value}\n        onChange={() => {}}\n        tabIndex={-1}\n        size=\"md\"\n        mr=\"xl\"\n        styles={{ input: { cursor: 'pointer' } }}\n      />\n\n      <div>\n        <Text weight={500} mb={7} sx={{ lineHeight: 1 }}>\n          {title}\n        </Text>\n        <Text size=\"sm\" color=\"dimmed\">\n          {description}\n        </Text>\n      </div>\n    </UnstyledButton>\n  );\n}\n",
      "attributes": {
        "title": "Card with checkbox",
        "category": "inputs",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/card/",
          "/core/checkbox/",
          "/core/text/",
          "/core/button/#unstyled-button",
          "/hooks/use-uncontrolled/"
        ],
        "props": {
          "title": "@mantine/core",
          "description": "Core components library: inputs, buttons, overlays, etc."
        },
        "canvas": {
          "center": true,
          "maxWidth": 400
        }
      }
    },
    {
      "component": "ContainedInputs",
      "url": "/component/contained-inputs",
      "code": "import React from 'react';\nimport { createStyles, Select, TextInput } from '@mantine/core';\nimport { DatePicker } from '@mantine/dates';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    position: 'relative',\n  },\n\n  input: {\n    height: 'auto',\n    paddingTop: 18,\n  },\n\n  label: {\n    position: 'absolute',\n    pointerEvents: 'none',\n    fontSize: theme.fontSizes.xs,\n    paddingLeft: theme.spacing.sm,\n    paddingTop: theme.spacing.sm / 2,\n    zIndex: 1,\n  },\n}));\n\nexport function ContainedInputs() {\n  // You can add these classes as classNames to any Mantine input, it will work the same\n  const { classes } = useStyles();\n\n  return (\n    <div>\n      <TextInput label=\"Shipping address\" placeholder=\"15329 Huston 21st\" classNames={classes} />\n\n      <Select\n        style={{ marginTop: 20, zIndex: 2 }}\n        data={['React', 'Angular', 'Svelte', 'Vue']}\n        placeholder=\"Pick one\"\n        label=\"Your favorite library/framework\"\n        classNames={classes}\n      />\n\n      <DatePicker\n        style={{ marginTop: 20 }}\n        label=\"Departure date\"\n        placeholder=\"When will you leave?\"\n        classNames={classes}\n        clearable={false}\n      />\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Inputs with label inside input",
        "category": "inputs",
        "author": "rtivital",
        "dependencies": [
          "/core/select/",
          "/core/text-input/",
          "/dates/date-picker/"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 420
        }
      }
    },
    {
      "component": "CurrencyInput",
      "url": "/component/currency-input",
      "code": "import React from 'react';\nimport { NativeSelect, TextInput } from '@mantine/core';\n\nconst data = [\n  { value: 'eur', label: '🇪🇺 EUR' },\n  { value: 'usd', label: '🇺🇸 USD' },\n  { value: 'cad', label: '🇨🇦 CAD' },\n  { value: 'gbp', label: '🇬🇧 GBP' },\n  { value: 'aud', label: '🇦🇺 AUD' },\n];\n\nexport function CurrencyInput() {\n  const select = (\n    <NativeSelect\n      data={data}\n      styles={{\n        input: {\n          fontWeight: 500,\n          borderTopLeftRadius: 0,\n          borderBottomLeftRadius: 0,\n        },\n      }}\n    />\n  );\n\n  return (\n    <TextInput\n      type=\"number\"\n      placeholder=\"1000\"\n      label=\"Transfer amount\"\n      rightSection={select}\n      rightSectionWidth={92}\n    />\n  );\n}\n",
      "attributes": {
        "title": "Number input with currency select",
        "category": "inputs",
        "author": "rtivital",
        "dependencies": [
          "/core/text-input/",
          "/core/native-select/"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 420
        }
      }
    },
    {
      "component": "FloatingLabelInput",
      "url": "/component/floating-label-input",
      "code": "import React, { useState } from 'react';\nimport { TextInput, createStyles } from '@mantine/core';\n\nconst useStyles = createStyles((theme, { floating }: { floating: boolean }) => ({\n  root: {\n    position: 'relative',\n  },\n\n  label: {\n    position: 'absolute',\n    zIndex: 2,\n    top: 7,\n    left: theme.spacing.sm,\n    pointerEvents: 'none',\n    color: floating\n      ? theme.colorScheme === 'dark'\n        ? theme.white\n        : theme.black\n      : theme.colorScheme === 'dark'\n      ? theme.colors.dark[3]\n      : theme.colors.gray[5],\n    transition: 'transform 150ms ease, color 150ms ease, font-size 150ms ease',\n    transform: floating ? `translate(-${theme.spacing.sm}px, -28px)` : 'none',\n    fontSize: floating ? theme.fontSizes.xs : theme.fontSizes.sm,\n    fontWeight: floating ? 500 : 400,\n  },\n\n  required: {\n    transition: 'opacity 150ms ease',\n    opacity: floating ? 1 : 0,\n  },\n\n  input: {\n    '&::placeholder': {\n      transition: 'color 150ms ease',\n      color: !floating ? 'transparent' : undefined,\n    },\n  },\n}));\n\nexport function FloatingLabelInput() {\n  const [focused, setFocused] = useState(false);\n  const [value, setValue] = useState('');\n  const { classes } = useStyles({ floating: value.trim().length !== 0 || focused });\n\n  return (\n    <TextInput\n      label=\"Floating label\"\n      placeholder=\"OMG, it also has a placeholder\"\n      required\n      classNames={classes}\n      value={value}\n      onChange={(event) => setValue(event.currentTarget.value)}\n      onFocus={() => setFocused(true)}\n      onBlur={() => setFocused(false)}\n      mt=\"md\"\n      autoComplete=\"off\"\n    />\n  );\n}\n",
      "attributes": {
        "title": "Input with floating label",
        "category": "inputs",
        "author": "rtivital",
        "dependencies": [
          "/core/text-input/",
          "/core/select/"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 420
        }
      }
    },
    {
      "component": "ForgotPasswordInput",
      "url": "/component/forgot-password-input",
      "code": "import React from 'react';\nimport { PasswordInput, Text, Group, PasswordInputProps, Anchor } from '@mantine/core';\n\nexport function ForgotPasswordInput({ className, style, ...others }: PasswordInputProps) {\n  return (\n    <div className={className} style={style}>\n      <Group position=\"apart\" mb={5}>\n        <Text component=\"label\" htmlFor=\"your-password\" size=\"sm\" weight={500}>\n          Your password\n        </Text>\n\n        <Anchor<'a'>\n          href=\"#\"\n          onClick={(event) => event.preventDefault()}\n          sx={(theme) => ({\n            paddingTop: 2,\n            color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 4 : 6],\n            fontWeight: 500,\n            fontSize: theme.fontSizes.xs,\n          })}\n        >\n          Forgot your password?\n        </Anchor>\n      </Group>\n      <PasswordInput placeholder=\"Your password\" id=\"your-password\" {...others} />\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Forgot password on input label",
        "category": "inputs",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/password-input/",
          "/core/text/",
          "/core/button/#unstyled-button"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 420
        }
      }
    },
    {
      "component": "ImageCheckboxes",
      "url": "/component/image-checkboxes",
      "code": "import React from 'react';\nimport { UnstyledButton, Checkbox, Text, Image, SimpleGrid, createStyles } from '@mantine/core';\nimport { useUncontrolled } from '@mantine/hooks';\nimport icons from './icons';\n\nconst useStyles = createStyles((theme, { checked }: { checked: boolean }) => ({\n  button: {\n    display: 'flex',\n    alignItems: 'center',\n    width: '100%',\n    transition: 'background-color 150ms ease, border-color 150ms ease',\n    border: `1px solid ${\n      checked\n        ? theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 9 : 6]\n        : theme.colorScheme === 'dark'\n        ? theme.colors.dark[8]\n        : theme.colors.gray[3]\n    }`,\n    borderRadius: theme.radius.sm,\n    padding: theme.spacing.sm,\n    backgroundColor: checked\n      ? theme.colorScheme === 'dark'\n        ? theme.fn.rgba(theme.colors[theme.primaryColor][8], 0.3)\n        : theme.colors[theme.primaryColor][0]\n      : theme.colorScheme === 'dark'\n      ? theme.colors.dark[8]\n      : theme.white,\n  },\n\n  body: {\n    flex: 1,\n    marginLeft: theme.spacing.md,\n  },\n}));\n\ninterface ImageCheckboxProps {\n  checked?: boolean;\n  defaultChecked?: boolean;\n  onChange?(checked: boolean): void;\n  title: string;\n  description: string;\n  image: string;\n}\n\nexport function ImageCheckbox({\n  checked,\n  defaultChecked,\n  onChange,\n  title,\n  description,\n  className,\n  image,\n  ...others\n}: ImageCheckboxProps & Omit<React.ComponentPropsWithoutRef<'button'>, keyof ImageCheckboxProps>) {\n  const [value, handleChange] = useUncontrolled({\n    value: checked,\n    defaultValue: defaultChecked,\n    finalValue: false,\n    onChange,\n    rule: (val) => typeof val === 'boolean',\n  });\n\n  const { classes, cx } = useStyles({ checked: value });\n\n  return (\n    <UnstyledButton\n      {...others}\n      onClick={() => handleChange(!value)}\n      className={cx(classes.button, className)}\n    >\n      <Image src={image} alt={title} width={40} />\n\n      <div className={classes.body}>\n        <Text color=\"dimmed\" size=\"xs\" sx={{ lineHeight: 1 }} mb={5}>\n          {description}\n        </Text>\n        <Text weight={500} size=\"sm\" sx={{ lineHeight: 1 }}>\n          {title}\n        </Text>\n      </div>\n\n      <Checkbox\n        checked={value}\n        onChange={() => {}}\n        tabIndex={-1}\n        styles={{ input: { cursor: 'pointer' } }}\n      />\n    </UnstyledButton>\n  );\n}\n\nconst mockdata = [\n  { description: 'Sun and sea', title: 'Beach vacation', image: icons.sea },\n  { description: 'Sightseeing', title: 'City trips', image: icons.city },\n  { description: 'Mountains', title: 'Hiking vacation', image: icons.mountain },\n  { description: 'Snow and ice', title: 'Winter vacation', image: icons.winter },\n];\n\nexport function ImageCheckboxes() {\n  const items = mockdata.map((item) => <ImageCheckbox {...item} key={item.title} />);\n  return (\n    <SimpleGrid\n      cols={4}\n      breakpoints={[\n        { maxWidth: 'md', cols: 2 },\n        { maxWidth: 'sm', cols: 1 },\n      ]}\n    >\n      {items}\n    </SimpleGrid>\n  );\n}\n",
      "attributes": {
        "title": "Checkbox with image",
        "category": "inputs",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/checkbox/",
          "/core/paper/",
          "/core/text/",
          "/core/image/",
          "/core/simple-grid/",
          "/core/button/#unstyled-button",
          "https://icons8.com/"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 1080
        }
      }
    },
    {
      "component": "InputTooltip",
      "url": "/component/input-tooltip",
      "code": "import React, { useState } from 'react';\nimport { TextInput, PasswordInput, Tooltip, Center, Text } from '@mantine/core';\nimport { InfoCircle } from 'tabler-icons-react';\n\nfunction TooltipIcon() {\n  const rightSection = (\n    <Tooltip\n      label=\"We store your data securely\"\n      placement=\"end\"\n      withArrow\n      transition=\"pop-bottom-right\"\n    >\n      <Text color=\"dimmed\" sx={{ cursor: 'help' }}>\n        <Center>\n          <InfoCircle size={18} />\n        </Center>\n      </Text>\n    </Tooltip>\n  );\n\n  return (\n    <TextInput\n      rightSection={rightSection}\n      label=\"Tooltip shown on icon hover\"\n      placeholder=\"Your email\"\n    />\n  );\n}\n\nfunction TooltipFocus() {\n  const [opened, setOpened] = useState(false);\n  const [value, setValue] = useState('');\n  const valid = value.trim().length >= 6;\n  return (\n    <Tooltip\n      label={valid ? 'All good!' : 'Password must include at least 6 characters'}\n      position=\"bottom\"\n      placement=\"start\"\n      withArrow\n      opened={opened}\n      sx={{ display: 'block', width: '100%' }}\n      color={valid ? 'teal' : undefined}\n    >\n      <PasswordInput\n        label=\"Tooltip shown onFocus\"\n        required\n        placeholder=\"Your password\"\n        onFocus={() => setOpened(true)}\n        onBlur={() => setOpened(false)}\n        mt=\"md\"\n        value={value}\n        onChange={(event) => setValue(event.currentTarget.value)}\n      />\n    </Tooltip>\n  );\n}\n\nexport function InputTooltip() {\n  return (\n    <>\n      <TooltipIcon />\n      <TooltipFocus />\n    </>\n  );\n}\n",
      "attributes": {
        "title": "Inputs with tooltip",
        "category": "inputs",
        "author": "rtivital",
        "dependencies": [
          "/core/tooltip/",
          "/core/text-input/",
          "/core/password-input/",
          "/core/center/",
          "/core/text/",
          "tabler-icons-react"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 420
        }
      }
    },
    {
      "component": "InputValidation",
      "url": "/component/input-validation",
      "code": "import React from 'react';\nimport { TextInput, createStyles } from '@mantine/core';\nimport { XCircleFillIcon } from '@primer/octicons-react';\n\nconst useStyles = createStyles((theme) => ({\n  invalid: {\n    backgroundColor:\n      theme.colorScheme === 'dark' ? theme.fn.rgba(theme.colors.red[8], 0.15) : theme.colors.red[0],\n  },\n\n  icon: {\n    color: theme.colors.red[theme.colorScheme === 'dark' ? 7 : 6],\n  },\n}));\n\nexport function InputValidation() {\n  const { classes } = useStyles();\n  return (\n    <TextInput\n      label=\"Custom validation styles\"\n      error=\"Invalid email\"\n      value=\"hello!gmail.com\"\n      classNames={{ input: classes.invalid }}\n      rightSection={<XCircleFillIcon className={classes.icon} />}\n    />\n  );\n}\n",
      "attributes": {
        "title": "Input with custom validation styles",
        "category": "inputs",
        "author": "rtivital",
        "dependencies": [
          "/core/text-input/"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 420
        }
      }
    },
    {
      "component": "InputWithButton",
      "url": "/component/input-with-button",
      "code": "import React from 'react';\nimport { TextInput, TextInputProps, ActionIcon, useMantineTheme } from '@mantine/core';\nimport { MagnifyingGlassIcon, ArrowRightIcon } from '@modulz/radix-icons';\n\nexport function InputWithButton(props: TextInputProps) {\n  const theme = useMantineTheme();\n\n  return (\n    <TextInput\n      icon={<MagnifyingGlassIcon style={{ width: 20, height: 20 }} />}\n      radius=\"xl\"\n      size=\"md\"\n      rightSection={\n        <ActionIcon size={32} radius=\"xl\" color={theme.primaryColor} variant=\"filled\">\n          <ArrowRightIcon />\n        </ActionIcon>\n      }\n      placeholder=\"Search questions\"\n      rightSectionWidth={42}\n      {...props}\n    />\n  );\n}\n",
      "attributes": {
        "title": "Input with contained button",
        "category": "inputs",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/text-input/",
          "/core/button/"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 520
        }
      }
    },
    {
      "component": "QuantityInput",
      "url": "/component/quantity-input",
      "code": "import React, { useRef, useState } from 'react';\nimport { createStyles, NumberInput, NumberInputHandlers, ActionIcon } from '@mantine/core';\nimport { Plus, Minus } from 'tabler-icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: `6px ${theme.spacing.xs}px`,\n    borderRadius: theme.radius.sm,\n    border: `1px solid ${theme.colorScheme === 'dark' ? 'transparent' : theme.colors.gray[3]}`,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.white,\n\n    '&:focus-within': {\n      borderColor: theme.colors[theme.primaryColor][6],\n    },\n  },\n\n  control: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n    border: `1px solid ${theme.colorScheme === 'dark' ? 'transparent' : theme.colors.gray[3]}`,\n\n    '&:disabled': {\n      borderColor: theme.colorScheme === 'dark' ? 'transparent' : theme.colors.gray[3],\n      opacity: 0.8,\n      backgroundColor: 'transparent',\n    },\n  },\n\n  input: {\n    textAlign: 'center',\n    paddingRight: `${theme.spacing.sm}px !important`,\n    paddingLeft: `${theme.spacing.sm}px !important`,\n    height: 28,\n    flex: 1,\n  },\n}));\n\ninterface QuantityInputProps {\n  min?: number;\n  max?: number;\n}\n\nexport function QuantityInput({ min = 1, max = 10 }: QuantityInputProps) {\n  const { classes } = useStyles();\n  const handlers = useRef<NumberInputHandlers>();\n  const [value, setValue] = useState(1);\n\n  return (\n    <div className={classes.wrapper}>\n      <ActionIcon<'button'>\n        size={28}\n        variant=\"transparent\"\n        onClick={() => handlers.current.decrement()}\n        disabled={value === min}\n        className={classes.control}\n        onMouseDown={(event) => event.preventDefault()}\n      >\n        <Minus size={16} />\n      </ActionIcon>\n\n      <NumberInput\n        variant=\"unstyled\"\n        min={min}\n        max={max}\n        handlersRef={handlers}\n        value={value}\n        onChange={setValue}\n        classNames={{ input: classes.input }}\n      />\n\n      <ActionIcon<'button'>\n        size={28}\n        variant=\"transparent\"\n        onClick={() => handlers.current.increment()}\n        disabled={value === max}\n        className={classes.control}\n        onMouseDown={(event) => event.preventDefault()}\n      >\n        <Plus size={16} />\n      </ActionIcon>\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Number input with custom controls",
        "category": "inputs",
        "author": "rtivital",
        "dependencies": [],
        "canvas": {
          "center": true,
          "maxWidth": 140
        }
      }
    },
    {
      "component": "TagPicker",
      "url": "/component/tag-picker",
      "code": "import React, { useState } from 'react';\nimport { MultiSelect } from '@mantine/core';\n\nexport function TagPicker() {\n  const [data, setData] = useState(['JavaScript', 'React', 'Angular', 'Vue', 'Svelte']);\n\n  return (\n    <MultiSelect\n      label=\"Select tags or create new one\"\n      placeholder=\"What you article is about?\"\n      data={data}\n      searchable\n      creatable\n      getCreateLabel={(query) => `+ Create ${query}`}\n      onCreate={(query) => setData((current) => [...current, query])}\n      nothingFound=\"Nothing found...\"\n    />\n  );\n}\n",
      "attributes": {
        "title": "Creatable tag picker",
        "category": "inputs",
        "author": "rtivital",
        "dependencies": [
          "/core/multi-select/"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 420
        }
      }
    }
  ],
  "app-cards": [
    {
      "component": "BadgeCard",
      "url": "/component/badge-card",
      "code": "import React from 'react';\nimport { HeartFillIcon } from '@primer/octicons-react';\nimport { MapPin } from 'react-feather';\nimport {\n  Card,\n  Image,\n  Text,\n  Group,\n  Badge,\n  Button,\n  ActionIcon,\n  createStyles,\n  useMantineTheme,\n} from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  section: {\n    borderBottom: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n    paddingLeft: theme.spacing.md,\n    paddingRight: theme.spacing.md,\n    paddingBottom: theme.spacing.md,\n  },\n\n  like: {\n    color: theme.colors.red[6],\n  },\n\n  label: {\n    textTransform: 'uppercase',\n    fontSize: theme.fontSizes.xs,\n    fontWeight: 700,\n  },\n}));\n\ninterface BadgeCardProps {\n  image: string;\n  title: string;\n  country: string;\n  description: string;\n  badges: {\n    emoji: string;\n    label: string;\n  }[];\n}\n\nexport function BadgeCard({ image, title, description, country, badges }: BadgeCardProps) {\n  const { classes } = useStyles();\n  const theme = useMantineTheme();\n\n  const features = badges.map((badge) => (\n    <Badge\n      color={theme.colorScheme === 'dark' ? 'dark' : 'gray'}\n      key={badge.label}\n      leftSection={badge.emoji}\n    >\n      {badge.label}\n    </Badge>\n  ));\n\n  return (\n    <Card withBorder radius=\"md\" padding=\"md\">\n      <Card.Section>\n        <Image src={image} alt={title} height={180} />\n      </Card.Section>\n\n      <Card.Section className={classes.section} mt=\"md\">\n        <Group position=\"apart\">\n          <Text size=\"lg\" weight={500}>\n            {title}\n          </Text>\n          <Badge size=\"sm\" leftSection={<MapPin size={8} />}>\n            {country}\n          </Badge>\n        </Group>\n        <Text size=\"sm\" mt=\"xs\">\n          {description}\n        </Text>\n      </Card.Section>\n\n      <Card.Section className={classes.section}>\n        <Text mt=\"md\" className={classes.label} color=\"dimmed\">\n          Perfect for you, if you enjoy\n        </Text>\n        <Group spacing={7} mt={5}>\n          {features}\n        </Group>\n      </Card.Section>\n\n      <Group mt=\"xs\">\n        <Button radius=\"md\" style={{ flex: 1 }}>\n          Show details\n        </Button>\n        <ActionIcon variant=\"default\" radius=\"md\" size={36}>\n          <HeartFillIcon size={14} className={classes.like} />\n        </ActionIcon>\n      </Group>\n    </Card>\n  );\n}\n",
      "attributes": {
        "title": "Card with badges",
        "category": "app-cards",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/card/",
          "/core/text/",
          "/core/group/",
          "/core/badge/",
          "/core/image/",
          "/core/action-icon/",
          "/core/button/",
          "@primer/octicons-react",
          "react-feather"
        ],
        "props": {
          "image": "https://images.unsplash.com/photo-1437719417032-8595fd9e9dc6?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=600&q=80",
          "title": "Verudela Beach",
          "country": "Croatia",
          "description": "Completely renovated for the season 2020, Arena Verudela Bech Apartments are fully equipped and modernly furnished 4-star self-service apartments located on the Adriatic coastline by one of the most beautiful beaches in Pula.",
          "badges": [
            {
              "emoji": "☀️",
              "label": "Sunny weather"
            },
            {
              "emoji": "🦓",
              "label": "Onsite zoo"
            },
            {
              "emoji": "🌊",
              "label": "Sea"
            },
            {
              "emoji": "🌲",
              "label": "Nature"
            },
            {
              "emoji": "🤽",
              "label": "Water sports"
            }
          ]
        },
        "canvas": {
          "center": true,
          "maxWidth": 370
        }
      }
    },
    {
      "component": "FeaturesCard",
      "url": "/component/features-card",
      "code": "import React from 'react';\nimport { Card, Image, Text, Group, Badge, createStyles, Center, Button } from '@mantine/core';\nimport { GasStation, Gauge, ManualGearbox, Users } from 'tabler-icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  imageSection: {\n    paddingTop: theme.spacing.md,\n    paddingBottom: theme.spacing.md,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[0],\n  },\n\n  label: {\n    marginBottom: theme.spacing.xs,\n    lineHeight: 1,\n    fontWeight: 700,\n    fontSize: theme.fontSizes.xs,\n    letterSpacing: -0.25,\n    textTransform: 'uppercase',\n  },\n\n  section: {\n    padding: theme.spacing.md,\n    borderTop: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n  },\n\n  icon: {\n    marginRight: 5,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[5],\n  },\n}));\n\nconst mockdata = [\n  { label: '4 passengers', icon: Users },\n  { label: '100 km/h in 4 seconds', icon: Gauge },\n  { label: 'Automatic gearbox', icon: ManualGearbox },\n  { label: 'Electric', icon: GasStation },\n];\n\nexport function FeaturesCard() {\n  const { classes } = useStyles();\n  const features = mockdata.map((feature) => (\n    <Center key={feature.label}>\n      <feature.icon size={18} className={classes.icon} />\n      <Text size=\"xs\">{feature.label}</Text>\n    </Center>\n  ));\n  return (\n    <Card shadow=\"sm\" radius=\"md\">\n      <Card.Section className={classes.imageSection}>\n        <Image width=\"80%\" mx=\"auto\" src=\"https://i.imgur.com/ZL52Q2D.png\" alt=\"Tesla Model S\" />\n      </Card.Section>\n\n      <Group position=\"apart\" mt=\"xs\">\n        <div>\n          <Text weight={500}>Tesla Model S</Text>\n          <Text size=\"xs\" color=\"dimmed\">\n            Free recharge at any station\n          </Text>\n        </div>\n        <Badge variant=\"outline\">25% off</Badge>\n      </Group>\n\n      <Card.Section className={classes.section} mt=\"md\">\n        <Text size=\"sm\" color=\"dimmed\" className={classes.label}>\n          Basic configuration\n        </Text>\n\n        <Group spacing={8} mb={-8}>\n          {features}\n        </Group>\n      </Card.Section>\n\n      <Card.Section className={classes.section}>\n        <Group spacing={30}>\n          <div>\n            <Text size=\"xl\" weight={700} sx={{ lineHeight: 1 }}>\n              $168.00\n            </Text>\n            <Text size=\"sm\" color=\"dimmed\" weight={500} sx={{ lineHeight: 1 }} mt={3}>\n              per day\n            </Text>\n          </div>\n\n          <Button radius=\"xl\" style={{ flex: 1 }}>\n            Rent now\n          </Button>\n        </Group>\n      </Card.Section>\n    </Card>\n  );\n}\n",
      "attributes": {
        "title": "Card with icon features",
        "category": "app-cards",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/card/",
          "/core/text/",
          "/core/group/",
          "/core/badge/",
          "/core/image/",
          "/core/button/",
          "tabler-icons-react"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 320
        }
      }
    }
  ],
  "buttons": [
    {
      "component": "ButtonCopy",
      "url": "/component/button-copy",
      "code": "import React from 'react';\nimport { Button, Tooltip } from '@mantine/core';\nimport { useClipboard } from '@mantine/hooks';\nimport { Copy } from 'tabler-icons-react';\n\nexport function ButtonCopy() {\n  const clipboard = useClipboard();\n  return (\n    <Tooltip\n      label=\"Link copied!\"\n      gutter={5}\n      placement=\"center\"\n      position=\"bottom\"\n      radius=\"xl\"\n      transition=\"slide-down\"\n      transitionDuration={200}\n      opened={clipboard.copied}\n    >\n      <Button\n        variant=\"light\"\n        rightIcon={<Copy size={20} />}\n        radius=\"xl\"\n        size=\"md\"\n        styles={{\n          root: { paddingRight: 14, height: 48 },\n          rightIcon: { marginLeft: 22 },\n        }}\n        onClick={() => clipboard.copy('https://www.youtube.com/watch?v=dQw4w9WgXcQ')}\n      >\n        Copy link to clipboard\n      </Button>\n    </Tooltip>\n  );\n}\n",
      "attributes": {
        "title": "Copy to clipboard button",
        "category": "buttons",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/button/",
          "/core/tooltip/",
          "/hooks/use-clipboard/",
          "tabler-icons-react"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 240
        }
      }
    },
    {
      "component": "ButtonMenu",
      "url": "/component/button-menu",
      "code": "import React from 'react';\nimport { Button, Menu, Text, useMantineTheme } from '@mantine/core';\nimport { SquareCheck, Package, Users, Calendar, ChevronDown } from 'tabler-icons-react';\n\nexport function ButtonMenu() {\n  const theme = useMantineTheme();\n  return (\n    <Menu\n      control={\n        <Button rightIcon={<ChevronDown size={18} />} sx={{ paddingRight: 12 }}>\n          Create new\n        </Button>\n      }\n      transition=\"pop-top-right\"\n      placement=\"end\"\n      size=\"lg\"\n    >\n      <Menu.Item\n        icon={<Package size={16} color={theme.colors.blue[6]} />}\n        rightSection={\n          <Text size=\"xs\" transform=\"uppercase\" weight={700} color=\"dimmed\">\n            Ctrl + P\n          </Text>\n        }\n      >\n        Project\n      </Menu.Item>\n      <Menu.Item\n        icon={<SquareCheck size={16} color={theme.colors.pink[6]} />}\n        rightSection={\n          <Text size=\"xs\" transform=\"uppercase\" weight={700} color=\"dimmed\">\n            Ctrl + T\n          </Text>\n        }\n      >\n        Task\n      </Menu.Item>\n      <Menu.Item\n        icon={<Users size={16} color={theme.colors.cyan[6]} />}\n        rightSection={\n          <Text size=\"xs\" transform=\"uppercase\" weight={700} color=\"dimmed\">\n            Ctrl + U\n          </Text>\n        }\n      >\n        Team\n      </Menu.Item>\n      <Menu.Item\n        icon={<Calendar size={16} color={theme.colors.violet[6]} />}\n        rightSection={\n          <Text size=\"xs\" transform=\"uppercase\" weight={700} color=\"dimmed\">\n            Ctrl + E\n          </Text>\n        }\n      >\n        Event\n      </Menu.Item>\n    </Menu>\n  );\n}\n",
      "attributes": {
        "title": "Button with menu",
        "category": "buttons",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/button/",
          "/core/menu/",
          "tabler-icons-react"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 120
        }
      }
    },
    {
      "component": "ButtonProgress",
      "url": "/component/button-progress",
      "code": "import React, { useState } from 'react';\nimport { useInterval } from '@mantine/hooks';\nimport { createStyles, Button, Progress } from '@mantine/core';\n\nconst useStyles = createStyles(() => ({\n  button: {\n    position: 'relative',\n    transition: 'background-color 150ms ease',\n  },\n\n  progress: {\n    position: 'absolute',\n    bottom: -1,\n    right: -1,\n    left: -1,\n    top: -1,\n    height: 'auto',\n    backgroundColor: 'transparent',\n    zIndex: 0,\n  },\n\n  label: {\n    position: 'relative',\n    zIndex: 1,\n  },\n}));\n\nexport function ButtonProgress() {\n  const { classes, theme } = useStyles();\n  const [progress, setProgress] = useState(0);\n  const [loaded, setLoaded] = useState(false);\n\n  const interval = useInterval(\n    () =>\n      setProgress((current) => {\n        if (current < 100) {\n          return current + 1;\n        } else {\n          interval.stop();\n          setLoaded(true);\n          return 0;\n        }\n      }),\n    20\n  );\n  return (\n    <Button\n      fullWidth\n      className={classes.button}\n      onClick={() => (loaded ? setLoaded(false) : !interval.active && interval.start())}\n      color={loaded ? 'teal' : theme.primaryColor}\n    >\n      <div className={classes.label}>\n        {progress !== 0 ? 'Uploading files' : loaded ? 'Files uploaded' : 'Upload files'}\n      </div>\n      {progress !== 0 && (\n        <Progress\n          value={progress}\n          className={classes.progress}\n          color={theme.fn.rgba(theme.colors[theme.primaryColor][2], 0.35)}\n          radius=\"sm\"\n        />\n      )}\n    </Button>\n  );\n}\n",
      "attributes": {
        "title": "Button with loading progress",
        "category": "buttons",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/button",
          "/core/progress"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 220
        }
      }
    },
    {
      "component": "ButtonsGroup",
      "url": "/component/buttons-group",
      "code": "import React from 'react';\nimport { createStyles, Group, Button } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  button: {\n    borderRadius: 0,\n\n    '&:not(:first-of-type)': {\n      borderLeftColor: 'transparent',\n    },\n\n    '&:first-of-type': {\n      borderTopLeftRadius: theme.radius.sm,\n      borderBottomLeftRadius: theme.radius.sm,\n    },\n\n    '&:last-of-type': {\n      borderTopRightRadius: theme.radius.sm,\n      borderBottomRightRadius: theme.radius.sm,\n    },\n  },\n}));\n\nexport function ButtonsGroup() {\n  const { classes } = useStyles();\n  return (\n    <Group grow spacing={0}>\n      <Button variant=\"default\" className={classes.button}>\n        First\n      </Button>\n      <Button variant=\"default\" className={classes.button}>\n        Second\n      </Button>\n      <Button variant=\"default\" className={classes.button}>\n        Third\n      </Button>\n    </Group>\n  );\n}\n",
      "attributes": {
        "title": "Buttons group",
        "category": "buttons",
        "author": "rtivital",
        "dependencies": [
          "/core/button/",
          "/core/group/"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 320
        }
      }
    },
    {
      "component": "SplitButton",
      "url": "/component/split-button",
      "code": "import React from 'react';\nimport { createStyles, Button, Menu, Group, ActionIcon } from '@mantine/core';\nimport { Trash, Bookmark, Calendar, ChevronDown } from 'tabler-icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  button: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  menuControl: {\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    border: 0,\n    borderLeft: `1px solid ${theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white}`,\n  },\n}));\n\nexport function SplitButton() {\n  const { classes, theme } = useStyles();\n  const menuIconColor = theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 5 : 6];\n\n  return (\n    <Group noWrap spacing={0}>\n      <Button className={classes.button}>Send</Button>\n      <Menu\n        control={\n          <ActionIcon\n            variant=\"filled\"\n            color={theme.primaryColor}\n            size={36}\n            className={classes.menuControl}\n          >\n            <ChevronDown size={16} />\n          </ActionIcon>\n        }\n        transition=\"pop\"\n        placement=\"end\"\n      >\n        <Menu.Item icon={<Calendar size={16} color={menuIconColor} />}>\n          Schedule for later\n        </Menu.Item>\n        <Menu.Item icon={<Bookmark size={16} color={menuIconColor} />}>Save draft</Menu.Item>\n        <Menu.Item icon={<Trash size={16} color={menuIconColor} />}>Delete</Menu.Item>\n      </Menu>\n    </Group>\n  );\n}\n",
      "attributes": {
        "title": "Split button",
        "category": "buttons",
        "author": "rtivital",
        "dependencies": [
          "/core/button/",
          "/core/menu/",
          "/core/action-icon/",
          "/core/group",
          "tabler-icons-react"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 120
        }
      }
    }
  ],
  "contact": [
    {
      "component": "ContactIcons",
      "url": "/component/contact-icons",
      "code": "import React from 'react';\nimport { createStyles, ThemeIcon, Text, Group, SimpleGrid, Box } from '@mantine/core';\nimport { Sun, Phone, MapPin, AtSign } from 'react-feather';\n\ntype ContactIconVariant = 'white' | 'gradient';\n\ninterface ContactIconStyles {\n  variant: ContactIconVariant;\n}\n\nconst useStyles = createStyles((theme, { variant }: ContactIconStyles) => ({\n  wrapper: {\n    display: 'flex',\n    alignItems: 'center',\n    color: theme.white,\n  },\n\n  icon: {\n    marginRight: theme.spacing.md,\n    backgroundImage:\n      variant === 'gradient'\n        ? `linear-gradient(135deg, ${theme.colors[theme.primaryColor][4]} 0%, ${\n            theme.colors[theme.primaryColor][6]\n          } 100%)`\n        : 'none',\n    backgroundColor: 'transparent',\n  },\n\n  title: {\n    color: variant === 'gradient' ? theme.colors.gray[6] : theme.colors[theme.primaryColor][0],\n  },\n\n  description: {\n    color: variant === 'gradient' ? theme.black : theme.white,\n  },\n}));\n\ninterface ContactIconProps extends Omit<React.ComponentPropsWithoutRef<'div'>, 'title'> {\n  icon: React.FC<any>;\n  title: React.ReactNode;\n  description: React.ReactNode;\n  variant?: ContactIconVariant;\n}\n\nfunction ContactIcon({\n  icon: Icon,\n  title,\n  description,\n  variant = 'gradient',\n  className,\n  ...others\n}: ContactIconProps) {\n  const { classes, cx } = useStyles({ variant });\n  return (\n    <div className={cx(classes.wrapper, className)} {...others}>\n      {variant === 'gradient' ? (\n        <ThemeIcon size={40} radius=\"md\" className={classes.icon}>\n          <Icon size={22} />\n        </ThemeIcon>\n      ) : (\n        <Icon size={22} style={{ marginRight: 15 }} />\n      )}\n\n      <div>\n        <Text size=\"xs\" className={classes.title}>\n          {title}\n        </Text>\n        <Text className={classes.description}>{description}</Text>\n      </div>\n    </div>\n  );\n}\n\ninterface ContactIconsListProps {\n  data?: ContactIconProps[];\n  variant?: ContactIconVariant;\n}\n\nconst MOCKDATA = [\n  { title: 'Email', description: 'hello@mantine.dev', icon: AtSign },\n  { title: 'Phone', description: '+49 (800) 335 35 35', icon: Phone },\n  { title: 'Address', description: '844 Morris Park avenue', icon: MapPin },\n  { title: 'Working hours', description: '8 a.m. – 11 p.m.', icon: Sun },\n];\n\nexport function ContactIconsList({ data = MOCKDATA, variant }: ContactIconsListProps) {\n  const items = data.map((item, index) => <ContactIcon key={index} variant={variant} {...item} />);\n  return <Group direction=\"column\">{items}</Group>;\n}\n\nexport function ContactIcons() {\n  return (\n    <SimpleGrid cols={2} breakpoints={[{ maxWidth: 755, cols: 1 }]}>\n      <Box\n        sx={(theme) => ({\n          padding: theme.spacing.xl,\n          borderRadius: theme.radius.md,\n          backgroundColor: theme.white,\n        })}\n      >\n        <ContactIconsList />\n      </Box>\n\n      <Box\n        sx={(theme) => ({\n          padding: theme.spacing.xl,\n          borderRadius: theme.radius.md,\n          backgroundImage: `linear-gradient(135deg, ${theme.colors[theme.primaryColor][6]} 0%, ${\n            theme.colors[theme.primaryColor][4]\n          } 100%)`,\n        })}\n      >\n        <ContactIconsList variant=\"white\" />\n      </Box>\n    </SimpleGrid>\n  );\n}\n",
      "attributes": {
        "title": "Contact information with icons",
        "category": "contact",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/select/",
          "/core/text-input/",
          "/dates/date-picker/",
          "react-feather"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 980
        }
      }
    },
    {
      "component": "ContactUs",
      "url": "/component/contact-us",
      "code": "import React from 'react';\nimport {\n  createStyles,\n  Text,\n  Title,\n  SimpleGrid,\n  TextInput,\n  Textarea,\n  Button,\n  Group,\n  MantineProvider,\n  useMantineTheme,\n  ActionIcon,\n} from '@mantine/core';\nimport { BrandTwitter, BrandFacebook, BrandInstagram } from 'tabler-icons-react';\nimport { ContactIconsList } from '../ContactIcons/ContactIcons';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    minHeight: 400,\n    boxSizing: 'border-box',\n    backgroundImage: `linear-gradient(-60deg, ${theme.colors[theme.primaryColor][4]} 0%, ${\n      theme.colors[theme.primaryColor][7]\n    } 100%)`,\n    borderRadius: theme.radius.md,\n    padding: theme.spacing.xl * 2.5,\n\n    [`@media (max-width: ${theme.breakpoints.sm}px)`]: {\n      padding: theme.spacing.xl * 1.5,\n    },\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    color: theme.white,\n    lineHeight: 1,\n  },\n\n  description: {\n    color: theme.colors[theme.primaryColor][0],\n    maxWidth: 300,\n\n    [`@media (max-width: ${theme.breakpoints.sm}px)`]: {\n      maxWidth: '100%',\n    },\n  },\n\n  form: {\n    backgroundColor: theme.white,\n    padding: theme.spacing.xl,\n    borderRadius: theme.radius.md,\n    boxShadow: theme.shadows.lg,\n  },\n\n  social: {\n    color: theme.white,\n\n    '&:hover': {\n      color: theme.colors[theme.primaryColor][1],\n    },\n  },\n}));\n\nconst social = [BrandTwitter, BrandFacebook, BrandInstagram];\n\nexport function ContactUs() {\n  const { classes } = useStyles();\n  const theme = useMantineTheme();\n\n  const icons = social.map((Icon, index) => (\n    <ActionIcon key={index} size={28} className={classes.social} variant=\"transparent\">\n      <Icon size={28} />\n    </ActionIcon>\n  ));\n\n  return (\n    <MantineProvider theme={{ colorScheme: 'light', primaryColor: theme.primaryColor }}>\n      <div className={classes.wrapper}>\n        <SimpleGrid cols={2} spacing={50} breakpoints={[{ maxWidth: 'sm', cols: 1 }]}>\n          <div>\n            <Title className={classes.title}>Contact us</Title>\n            <Text className={classes.description} mt=\"sm\" mb={30}>\n              Leave your email and we will get back to you within 24 hours\n            </Text>\n\n            <ContactIconsList variant=\"white\" />\n\n            <Group mt=\"xl\">{icons}</Group>\n          </div>\n          <div className={classes.form}>\n            <TextInput label=\"Email\" placeholder=\"your@email.com\" required />\n            <TextInput label=\"Name\" placeholder=\"John Doe\" mt=\"md\" />\n            <Textarea\n              required\n              label=\"Your message\"\n              placeholder=\"I want to order your goods\"\n              minRows={4}\n              mt=\"md\"\n            />\n            <Group position=\"right\" mt=\"md\">\n              <Button>Send message</Button>\n            </Group>\n          </div>\n        </SimpleGrid>\n      </div>\n    </MantineProvider>\n  );\n}\n",
      "attributes": {
        "title": "Contact us form",
        "category": "contact",
        "author": "rtivital",
        "responsive": true,
        "withColor": true,
        "dependencies": [
          "/core/title/",
          "/core/text-input/",
          "/core/textarea/",
          "/core/text/",
          "/core/button/",
          "/core/group/",
          "/core/simple-grid/",
          "/core/action-icon/",
          "/component/contact-icons/",
          "tabler-icons-react"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 1000
        }
      }
    },
    {
      "component": "GetInTouch",
      "url": "/component/get-in-touch",
      "code": "import React from 'react';\nimport {\n  Paper,\n  Text,\n  TextInput,\n  Textarea,\n  Button,\n  Group,\n  SimpleGrid,\n  createStyles,\n} from '@mantine/core';\nimport { ContactIconsList } from '../ContactIcons/ContactIcons';\nimport bg from './bg.svg';\n\nconst useStyles = createStyles((theme) => {\n  const BREAKPOINT = theme.fn.smallerThan('sm');\n\n  return {\n    wrapper: {\n      display: 'flex',\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.white,\n      borderRadius: theme.radius.lg,\n      padding: 4,\n      border: `1px solid ${\n        theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.colors.gray[2]\n      }`,\n\n      [BREAKPOINT]: {\n        flexDirection: 'column',\n      },\n    },\n\n    form: {\n      boxSizing: 'border-box',\n      flex: 1,\n      padding: theme.spacing.xl,\n      paddingLeft: theme.spacing.xl * 2,\n      borderLeft: 0,\n\n      [BREAKPOINT]: {\n        padding: theme.spacing.md,\n        paddingLeft: theme.spacing.md,\n      },\n    },\n\n    fields: {\n      marginTop: -12,\n    },\n\n    fieldInput: {\n      flex: 1,\n\n      '& + &': {\n        marginLeft: theme.spacing.md,\n\n        [BREAKPOINT]: {\n          marginLeft: 0,\n          marginTop: theme.spacing.md,\n        },\n      },\n    },\n\n    fieldsGroup: {\n      display: 'flex',\n\n      [BREAKPOINT]: {\n        flexDirection: 'column',\n      },\n    },\n\n    contacts: {\n      boxSizing: 'border-box',\n      position: 'relative',\n      borderRadius: theme.radius.lg - 2,\n      backgroundImage: `url(${bg})`,\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n      border: '1px solid transparent',\n      padding: theme.spacing.xl,\n      flex: '0 0 280px',\n\n      [BREAKPOINT]: {\n        marginBottom: theme.spacing.sm,\n        paddingLeft: theme.spacing.md,\n      },\n    },\n\n    title: {\n      marginBottom: theme.spacing.xl * 1.5,\n      fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n\n      [BREAKPOINT]: {\n        marginBottom: theme.spacing.xl,\n      },\n    },\n\n    control: {\n      [BREAKPOINT]: {\n        flex: 1,\n      },\n    },\n  };\n});\n\nexport function GetInTouch() {\n  const { classes } = useStyles();\n\n  return (\n    <Paper shadow=\"md\" radius=\"lg\">\n      <div className={classes.wrapper}>\n        <div className={classes.contacts}>\n          <Text size=\"lg\" weight={700} className={classes.title} sx={{ color: '#fff' }}>\n            Contact information\n          </Text>\n\n          <ContactIconsList variant=\"white\" />\n        </div>\n\n        <form className={classes.form} onSubmit={(event) => event.preventDefault()}>\n          <Text size=\"lg\" weight={700} className={classes.title}>\n            Get in touch\n          </Text>\n\n          <div className={classes.fields}>\n            <SimpleGrid cols={2} breakpoints={[{ maxWidth: 'sm', cols: 1 }]}>\n              <TextInput label=\"Your name\" placeholder=\"Your name\" />\n              <TextInput label=\"Your email\" placeholder=\"hello@mantine.dev\" required />\n            </SimpleGrid>\n\n            <TextInput mt=\"md\" label=\"Subject\" placeholder=\"Subject\" required />\n\n            <Textarea\n              mt=\"md\"\n              label=\"Your message\"\n              placeholder=\"Please include all relevant information\"\n              minRows={3}\n            />\n\n            <Group position=\"right\" mt=\"md\">\n              <Button type=\"submit\" className={classes.control}>\n                Send message\n              </Button>\n            </Group>\n          </div>\n        </form>\n      </div>\n    </Paper>\n  );\n}\n",
      "attributes": {
        "title": "Get in touch form",
        "category": "contact",
        "author": "rtivital",
        "responsive": true,
        "dependencies": [
          "/core/paper/",
          "/core/text-input/",
          "/core/textarea/",
          "/core/text/",
          "/core/button/",
          "/core/group/",
          "/core/simple-grid/",
          "/component/contact-icons/",
          "https://www.svgbackgrounds.com/"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 800
        }
      }
    }
  ],
  "dnd": [
    {
      "component": "DndList",
      "url": "/component/dnd-list",
      "code": "import React from 'react';\nimport { createStyles, Text } from '@mantine/core';\nimport { useListState } from '@mantine/hooks';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\nconst useStyles = createStyles((theme) => ({\n  item: {\n    ...theme.fn.focusStyles(),\n    display: 'flex',\n    alignItems: 'center',\n    borderRadius: theme.radius.md,\n    border: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[2]\n    }`,\n    padding: `${theme.spacing.sm}px ${theme.spacing.xl}px`,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.white,\n    marginBottom: theme.spacing.sm,\n  },\n\n  itemDragging: {\n    boxShadow: theme.shadows.sm,\n  },\n\n  symbol: {\n    fontSize: 30,\n    fontWeight: 700,\n    width: 60,\n  },\n}));\n\ninterface DndListProps {\n  data: {\n    position: number;\n    mass: number;\n    symbol: string;\n    name: string;\n  }[];\n}\n\nexport function DndList({ data }: DndListProps) {\n  const { classes, cx } = useStyles();\n  const [state, handlers] = useListState(data);\n\n  const items = state.map((item, index) => (\n    <Draggable key={item.symbol} index={index} draggableId={item.symbol}>\n      {(provided, snapshot) => (\n        <div\n          className={cx(classes.item, { [classes.itemDragging]: snapshot.isDragging })}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n        >\n          <Text className={classes.symbol}>{item.symbol}</Text>\n          <div>\n            <Text>{item.name}</Text>\n            <Text color=\"dimmed\" size=\"sm\">\n              Position: {item.position} • Mass: {item.mass}\n            </Text>\n          </div>\n        </div>\n      )}\n    </Draggable>\n  ));\n\n  return (\n    <DragDropContext\n      onDragEnd={({ destination, source }) =>\n        handlers.reorder({ from: source.index, to: destination.index })\n      }\n    >\n      <Droppable droppableId=\"dnd-list\" direction=\"vertical\">\n        {(provided) => (\n          <div {...provided.droppableProps} ref={provided.innerRef}>\n            {items}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n}\n",
      "attributes": {
        "title": "Drag'n'drop list",
        "category": "dnd",
        "author": "rtivital",
        "dependencies": [
          "/core/text/",
          "/hooks/use-list-state/",
          "react-beautiful-dnd"
        ],
        "props": {
          "data": [
            {
              "position": 6,
              "mass": 12.011,
              "symbol": "C",
              "name": "Carbon"
            },
            {
              "position": 7,
              "mass": 14.007,
              "symbol": "N",
              "name": "Nitrogen"
            },
            {
              "position": 39,
              "mass": 88.906,
              "symbol": "Y",
              "name": "Yttrium"
            },
            {
              "position": 56,
              "mass": 137.33,
              "symbol": "Ba",
              "name": "Barium"
            },
            {
              "position": 58,
              "mass": 140.12,
              "symbol": "Ce",
              "name": "Cerium"
            }
          ]
        },
        "canvas": {
          "center": true,
          "maxWidth": 420
        }
      }
    },
    {
      "component": "DndListHandle",
      "url": "/component/dnd-list-handle",
      "code": "import React from 'react';\nimport { createStyles, Text } from '@mantine/core';\nimport { useListState } from '@mantine/hooks';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { GripVertical } from 'tabler-icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  item: {\n    display: 'flex',\n    alignItems: 'center',\n    borderRadius: theme.radius.md,\n    border: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[2]\n    }`,\n    padding: `${theme.spacing.sm}px ${theme.spacing.xl}px`,\n    paddingLeft: theme.spacing.xl - theme.spacing.md, // to offset drag handle\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.white,\n    marginBottom: theme.spacing.sm,\n  },\n\n  itemDragging: {\n    boxShadow: theme.shadows.sm,\n  },\n\n  symbol: {\n    fontSize: 30,\n    fontWeight: 700,\n    width: 60,\n  },\n\n  dragHandle: {\n    ...theme.fn.focusStyles(),\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[1] : theme.colors.gray[6],\n    paddingLeft: theme.spacing.md,\n    paddingRight: theme.spacing.md,\n  },\n}));\n\ninterface DndListHandleProps {\n  data: {\n    position: number;\n    mass: number;\n    symbol: string;\n    name: string;\n  }[];\n}\n\nexport function DndListHandle({ data }: DndListHandleProps) {\n  const { classes, cx } = useStyles();\n  const [state, handlers] = useListState(data);\n\n  const items = state.map((item, index) => (\n    <Draggable key={item.symbol} index={index} draggableId={item.symbol}>\n      {(provided, snapshot) => (\n        <div\n          className={cx(classes.item, { [classes.itemDragging]: snapshot.isDragging })}\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n        >\n          <div {...provided.dragHandleProps} className={classes.dragHandle}>\n            <GripVertical size={18} />\n          </div>\n          <Text className={classes.symbol}>{item.symbol}</Text>\n          <div>\n            <Text>{item.name}</Text>\n            <Text color=\"dimmed\" size=\"sm\">\n              Position: {item.position} • Mass: {item.mass}\n            </Text>\n          </div>\n        </div>\n      )}\n    </Draggable>\n  ));\n\n  return (\n    <DragDropContext\n      onDragEnd={({ destination, source }) =>\n        handlers.reorder({ from: source.index, to: destination.index })\n      }\n    >\n      <Droppable droppableId=\"dnd-list\" direction=\"vertical\">\n        {(provided) => (\n          <div {...provided.droppableProps} ref={provided.innerRef}>\n            {items}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n}\n",
      "attributes": {
        "title": "Drag'n'drop list with handle",
        "category": "dnd",
        "author": "rtivital",
        "dependencies": [
          "/core/text/",
          "/hooks/use-list-state/",
          "react-beautiful-dnd"
        ],
        "props": {
          "data": [
            {
              "position": 6,
              "mass": 12.011,
              "symbol": "C",
              "name": "Carbon"
            },
            {
              "position": 7,
              "mass": 14.007,
              "symbol": "N",
              "name": "Nitrogen"
            },
            {
              "position": 39,
              "mass": 88.906,
              "symbol": "Y",
              "name": "Yttrium"
            },
            {
              "position": 56,
              "mass": 137.33,
              "symbol": "Ba",
              "name": "Barium"
            },
            {
              "position": 58,
              "mass": 140.12,
              "symbol": "Ce",
              "name": "Cerium"
            }
          ]
        },
        "canvas": {
          "center": true,
          "maxWidth": 420
        }
      }
    },
    {
      "component": "DndTable",
      "url": "/component/dnd-table",
      "code": "import React from 'react';\nimport { createStyles, Table, ScrollArea } from '@mantine/core';\nimport { useListState } from '@mantine/hooks';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { GripVertical } from 'tabler-icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  item: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n  },\n\n  dragHandle: {\n    ...theme.fn.focusStyles(),\n    width: 40,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[1] : theme.colors.gray[6],\n  },\n}));\n\ninterface DndTableProps {\n  data: {\n    position: number;\n    mass: number;\n    symbol: string;\n    name: string;\n  }[];\n}\n\nexport function DndTable({ data }: DndTableProps) {\n  const { classes } = useStyles();\n  const [state, handlers] = useListState(data);\n\n  const items = state.map((item, index) => (\n    <Draggable key={item.symbol} index={index} draggableId={item.symbol}>\n      {(provided) => (\n        <tr className={classes.item} ref={provided.innerRef} {...provided.draggableProps}>\n          <td>\n            <div className={classes.dragHandle} {...provided.dragHandleProps}>\n              <GripVertical size={18} />\n            </div>\n          </td>\n          <td style={{ width: 80 }}>{item.position}</td>\n          <td style={{ width: 120 }}>{item.name}</td>\n          <td style={{ width: 80 }}>{item.symbol}</td>\n          <td>{item.mass}</td>\n        </tr>\n      )}\n    </Draggable>\n  ));\n\n  return (\n    <ScrollArea>\n      <DragDropContext\n        onDragEnd={({ destination, source }) =>\n          handlers.reorder({ from: source.index, to: destination.index })\n        }\n      >\n        <Droppable droppableId=\"dnd-list\" direction=\"vertical\">\n          {(provided) => (\n            <Table\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              sx={{ minWidth: 420, '& tbody tr td': { borderBottom: 0 } }}\n            >\n              <thead>\n                <tr>\n                  <th style={{ width: 40 }} />\n                  <th style={{ width: 80 }}>Position</th>\n                  <th style={{ width: 120 }}>Name</th>\n                  <th style={{ width: 40 }}>Symbol</th>\n                  <th>Mass</th>\n                </tr>\n              </thead>\n              <tbody>{items}</tbody>\n              {provided.placeholder}\n            </Table>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </ScrollArea>\n  );\n}\n",
      "attributes": {
        "title": "Drag'n'drop table",
        "category": "dnd",
        "author": "rtivital",
        "dependencies": [
          "/core/text/",
          "/hooks/use-list-state/",
          "react-beautiful-dnd"
        ],
        "props": {
          "data": [
            {
              "position": 6,
              "mass": 12.011,
              "symbol": "C",
              "name": "Carbon"
            },
            {
              "position": 7,
              "mass": 14.007,
              "symbol": "N",
              "name": "Nitrogen"
            },
            {
              "position": 39,
              "mass": 88.906,
              "symbol": "Y",
              "name": "Yttrium"
            },
            {
              "position": 56,
              "mass": 137.33,
              "symbol": "Ba",
              "name": "Barium"
            },
            {
              "position": 58,
              "mass": 140.12,
              "symbol": "Ce",
              "name": "Cerium"
            }
          ]
        },
        "canvas": {
          "center": true,
          "maxWidth": 420
        }
      }
    }
  ],
  "headers": [
    {
      "component": "DoubleHeader",
      "url": "/component/double-header",
      "code": "import React, { useState } from 'react';\nimport { createStyles, Header, Container, Anchor, Group, Burger } from '@mantine/core';\nimport { useBooleanToggle } from '@mantine/hooks';\nimport { MantineLogo } from '../../shared/MantineLogo';\n\nconst HEADER_HEIGHT = 84;\n\nconst useStyles = createStyles((theme) => ({\n  inner: {\n    height: HEADER_HEIGHT,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n\n  burger: {\n    [theme.fn.largerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  links: {\n    paddingTop: theme.spacing.lg,\n    height: HEADER_HEIGHT,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n\n    [theme.fn.smallerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  mainLinks: {\n    marginRight: -theme.spacing.sm,\n  },\n\n  mainLink: {\n    textTransform: 'uppercase',\n    fontSize: 13,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[1] : theme.colors.gray[6],\n    padding: `7px ${theme.spacing.sm}px`,\n    fontWeight: 700,\n    borderBottom: '2px solid transparent',\n    transition: 'border-color 100ms ease, color 100ms ease',\n\n    '&:hover': {\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n      textDecoration: 'none',\n    },\n  },\n\n  secondaryLink: {\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[6],\n    fontSize: theme.fontSizes.xs,\n    textTransform: 'uppercase',\n    transition: 'color 100ms ease',\n\n    '&:hover': {\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n      textDecoration: 'none',\n    },\n  },\n\n  mainLinkActive: {\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    borderBottomColor: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 5 : 6],\n  },\n}));\n\ninterface LinkProps {\n  label: string;\n  link: string;\n}\n\ninterface DoubleHeaderProps {\n  mainLinks: LinkProps[];\n  userLinks: LinkProps[];\n}\n\nexport function DoubleHeader({ mainLinks, userLinks }: DoubleHeaderProps) {\n  const [opened, toggleOpened] = useBooleanToggle(false);\n  const { classes, cx } = useStyles();\n  const [active, setActive] = useState(0);\n\n  const mainItems = mainLinks.map((item, index) => (\n    <Anchor<'a'>\n      href={item.link}\n      key={item.label}\n      className={cx(classes.mainLink, { [classes.mainLinkActive]: index === active })}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(index);\n      }}\n    >\n      {item.label}\n    </Anchor>\n  ));\n\n  const secondaryItems = userLinks.map((item) => (\n    <Anchor<'a'>\n      href={item.link}\n      key={item.label}\n      onClick={(event) => event.preventDefault()}\n      className={classes.secondaryLink}\n    >\n      {item.label}\n    </Anchor>\n  ));\n\n  return (\n    <Header height={HEADER_HEIGHT} mb={120}>\n      <Container className={classes.inner}>\n        <MantineLogo width={130} />\n        <div className={classes.links}>\n          <Group position=\"right\">{secondaryItems}</Group>\n          <Group spacing={0} position=\"right\" className={classes.mainLinks}>\n            {mainItems}\n          </Group>\n        </div>\n        <Burger\n          opened={opened}\n          onClick={() => toggleOpened()}\n          className={classes.burger}\n          size=\"sm\"\n        />\n      </Container>\n    </Header>\n  );\n}\n",
      "attributes": {
        "title": "Header with multiple layers",
        "category": "headers",
        "author": "rtivital",
        "withColor": true,
        "responsive": true,
        "dependencies": [
          "/core/app-shell/",
          "/core/button/#unstyled-button"
        ],
        "props": {
          "userLinks": [
            {
              "link": "#",
              "label": "Privacy & Security"
            },
            {
              "link": "#",
              "label": "Account settings"
            },
            {
              "link": "#",
              "label": "Support options"
            }
          ],
          "mainLinks": [
            {
              "link": "#",
              "label": "Book a demo"
            },
            {
              "link": "#",
              "label": "Documentation"
            },
            {
              "link": "#",
              "label": "Community"
            },
            {
              "link": "#",
              "label": "Academy"
            },
            {
              "link": "#",
              "label": "Forums"
            }
          ]
        },
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "HeaderAction",
      "url": "/component/header-action",
      "code": "import React from 'react';\nimport {\n  createStyles,\n  Menu,\n  Center,\n  Header,\n  Container,\n  Group,\n  Button,\n  Burger,\n} from '@mantine/core';\nimport { useBooleanToggle } from '@mantine/hooks';\nimport { ChevronDownIcon } from '@modulz/radix-icons';\nimport { MantineLogo } from '../../shared/MantineLogo';\n\nconst HEADER_HEIGHT = 70;\n\nconst useStyles = createStyles((theme) => ({\n  inner: {\n    height: HEADER_HEIGHT,\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n\n  links: {\n    [theme.fn.smallerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  burger: {\n    [theme.fn.largerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  link: {\n    display: 'block',\n    lineHeight: 1,\n    padding: '8px 12px',\n    borderRadius: theme.radius.sm,\n    textDecoration: 'none',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    fontSize: theme.fontSizes.sm,\n    fontWeight: 500,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    },\n  },\n\n  linkLabel: {\n    marginRight: 5,\n  },\n}));\n\ninterface HeaderActionProps {\n  links: { link: string; label: string; links: { link: string; label: string }[] }[];\n}\n\nexport function HeaderAction({ links }: HeaderActionProps) {\n  const { classes } = useStyles();\n  const [opened, toggleOpened] = useBooleanToggle(false);\n  const items = links.map((link) => {\n    const menuItems = link.links?.map((item) => (\n      <Menu.Item key={item.link}>{item.label}</Menu.Item>\n    ));\n\n    if (menuItems) {\n      return (\n        <Menu\n          trigger=\"hover\"\n          delay={0}\n          transitionDuration={0}\n          placement=\"end\"\n          gutter={1}\n          control={\n            <a\n              key={link.label}\n              href={link.link}\n              className={classes.link}\n              onClick={(event) => event.preventDefault()}\n            >\n              <Center>\n                <span className={classes.linkLabel}>{link.label}</span>\n                <ChevronDownIcon width={12} height={12} />\n              </Center>\n            </a>\n          }\n        >\n          {menuItems}\n        </Menu>\n      );\n    }\n\n    return (\n      <a\n        key={link.label}\n        href={link.link}\n        className={classes.link}\n        onClick={(event) => event.preventDefault()}\n      >\n        {link.label}\n      </a>\n    );\n  });\n\n  return (\n    <Header height={HEADER_HEIGHT} sx={{ borderBottom: 0 }} mb={120}>\n      <Container className={classes.inner} fluid>\n        <Group>\n          <Burger\n            opened={opened}\n            onClick={() => toggleOpened()}\n            className={classes.burger}\n            size=\"sm\"\n          />\n          <MantineLogo />\n        </Group>\n        <Group spacing={5} className={classes.links}>\n          {items}\n        </Group>\n        <Button radius=\"xl\">Get early access</Button>\n      </Container>\n    </Header>\n  );\n}\n",
      "attributes": {
        "title": "Header with primary action",
        "category": "headers",
        "author": "rtivital",
        "withColor": true,
        "responsive": true,
        "dependencies": [
          "/core/app-shell/",
          "/core/menu/",
          "/core/button/",
          "/core/container/",
          "/core/center/",
          "/core/burger/",
          "/core/group/"
        ],
        "props": {
          "links": [
            {
              "link": "/about",
              "label": "Features"
            },
            {
              "link": "#1",
              "label": "Learn",
              "links": [
                {
                  "link": "/docs",
                  "label": "Documentation"
                },
                {
                  "link": "/resources",
                  "label": "Resources"
                },
                {
                  "link": "/community",
                  "label": "Community"
                },
                {
                  "link": "/blog",
                  "label": "Blog"
                }
              ]
            },
            {
              "link": "/about",
              "label": "About"
            },
            {
              "link": "/pricing",
              "label": "Pricing"
            },
            {
              "link": "#2",
              "label": "Support",
              "links": [
                {
                  "link": "/faq",
                  "label": "FAQ"
                },
                {
                  "link": "/demo",
                  "label": "Book a demo"
                },
                {
                  "link": "/forums",
                  "label": "Forums"
                }
              ]
            }
          ]
        },
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "HeaderMenu",
      "url": "/component/header-menu",
      "code": "import React from 'react';\nimport { createStyles, Header, Menu, Group, Center, Burger } from '@mantine/core';\nimport { useBooleanToggle } from '@mantine/hooks';\nimport { ChevronDownIcon } from '@modulz/radix-icons';\nimport { MantineLogo } from '../../shared/MantineLogo';\n\nconst useStyles = createStyles((theme) => ({\n  header: {\n    paddingLeft: theme.spacing.md,\n    paddingRight: theme.spacing.md,\n  },\n\n  inner: {\n    height: 56,\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n\n  links: {\n    [theme.fn.smallerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  burger: {\n    [theme.fn.largerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  link: {\n    display: 'block',\n    lineHeight: 1,\n    padding: '8px 12px',\n    borderRadius: theme.radius.sm,\n    textDecoration: 'none',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    fontSize: theme.fontSizes.sm,\n    fontWeight: 500,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    },\n  },\n\n  linkLabel: {\n    marginRight: 5,\n  },\n}));\n\ninterface HeaderSearchProps {\n  links: { link: string; label: string; links: { link: string; label: string }[] }[];\n}\n\nexport function HeaderMenu({ links }: HeaderSearchProps) {\n  const [opened, toggleOpened] = useBooleanToggle(false);\n  const { classes } = useStyles();\n\n  const items = links.map((link) => {\n    const menuItems = link.links?.map((item) => (\n      <Menu.Item key={item.link}>{item.label}</Menu.Item>\n    ));\n\n    if (menuItems) {\n      return (\n        <Menu\n          trigger=\"hover\"\n          delay={0}\n          transitionDuration={0}\n          placement=\"end\"\n          gutter={1}\n          control={\n            <a\n              key={link.label}\n              href={link.link}\n              className={classes.link}\n              onClick={(event) => event.preventDefault()}\n            >\n              <Center>\n                <span className={classes.linkLabel}>{link.label}</span>\n                <ChevronDownIcon width={12} height={12} />\n              </Center>\n            </a>\n          }\n        >\n          {menuItems}\n        </Menu>\n      );\n    }\n\n    return (\n      <a\n        key={link.label}\n        href={link.link}\n        className={classes.link}\n        onClick={(event) => event.preventDefault()}\n      >\n        {link.label}\n      </a>\n    );\n  });\n\n  return (\n    <Header height={56} className={classes.header} mb={120}>\n      <div className={classes.inner}>\n        <MantineLogo />\n        <Group spacing={5} className={classes.links}>\n          {items}\n        </Group>\n        <Burger\n          opened={opened}\n          onClick={() => toggleOpened()}\n          className={classes.burger}\n          size=\"sm\"\n        />\n      </div>\n    </Header>\n  );\n}\n",
      "attributes": {
        "title": "Header with menus",
        "category": "headers",
        "author": "rtivital",
        "responsive": true,
        "dependencies": [
          "/core/app-shell/",
          "/core/menu/",
          "/core/group/",
          "/core/center/",
          "/core/burger/",
          "/hooks/use-toggle/",
          "@modulz/radix-icons"
        ],
        "props": {
          "links": [
            {
              "link": "/about",
              "label": "Features"
            },
            {
              "link": "#1",
              "label": "Learn",
              "links": [
                {
                  "link": "/docs",
                  "label": "Documentation"
                },
                {
                  "link": "/resources",
                  "label": "Resources"
                },
                {
                  "link": "/community",
                  "label": "Community"
                },
                {
                  "link": "/blog",
                  "label": "Blog"
                }
              ]
            },
            {
              "link": "/about",
              "label": "About"
            },
            {
              "link": "/pricing",
              "label": "Pricing"
            },
            {
              "link": "#2",
              "label": "Support",
              "links": [
                {
                  "link": "/faq",
                  "label": "FAQ"
                },
                {
                  "link": "/demo",
                  "label": "Book a demo"
                },
                {
                  "link": "/forums",
                  "label": "Forums"
                }
              ]
            }
          ]
        },
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "HeaderMiddle",
      "url": "/component/header-middle",
      "code": "import React, { useState } from 'react';\nimport { createStyles, Header, Group, ActionIcon, Container, Burger } from '@mantine/core';\nimport { useBooleanToggle } from '@mantine/hooks';\nimport { BrandTwitter, BrandYoutube, BrandInstagram } from 'tabler-icons-react';\nimport { MantineLogo } from '../../shared/MantineLogo';\n\nconst useStyles = createStyles((theme) => ({\n  inner: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    height: 56,\n\n    [theme.fn.smallerThan('sm')]: {\n      justifyContent: 'flex-start',\n    },\n  },\n\n  links: {\n    width: 260,\n\n    [theme.fn.smallerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  social: {\n    width: 260,\n\n    [theme.fn.smallerThan('sm')]: {\n      width: 'auto',\n      marginLeft: 'auto',\n    },\n  },\n\n  burger: {\n    marginRight: theme.spacing.md,\n\n    [theme.fn.largerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  link: {\n    display: 'block',\n    lineHeight: 1,\n    padding: '8px 12px',\n    borderRadius: theme.radius.sm,\n    textDecoration: 'none',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    fontSize: theme.fontSizes.sm,\n    fontWeight: 500,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    },\n  },\n\n  linkActive: {\n    '&, &:hover': {\n      backgroundColor:\n        theme.colorScheme === 'dark'\n          ? theme.fn.rgba(theme.colors[theme.primaryColor][9], 0.25)\n          : theme.colors[theme.primaryColor][0],\n      color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 3 : 7],\n    },\n  },\n}));\n\ninterface HeaderMiddleProps {\n  links: { link: string; label: string }[];\n}\n\nexport function HeaderMiddle({ links }: HeaderMiddleProps) {\n  const [opened, toggleOpened] = useBooleanToggle(false);\n  const [active, setActive] = useState(links[0].link);\n  const { classes, cx } = useStyles();\n\n  const items = links.map((link) => (\n    <a\n      key={link.label}\n      href={link.link}\n      className={cx(classes.link, { [classes.linkActive]: active === link.link })}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(link.link);\n      }}\n    >\n      {link.label}\n    </a>\n  ));\n\n  return (\n    <Header height={56} mb={120}>\n      <Container className={classes.inner}>\n        <Burger\n          opened={opened}\n          onClick={() => toggleOpened()}\n          size=\"sm\"\n          className={classes.burger}\n        />\n        <Group className={classes.links} spacing={5}>\n          {items}\n        </Group>\n\n        <MantineLogo />\n\n        <Group spacing={0} className={classes.social} position=\"right\" noWrap>\n          <ActionIcon size=\"lg\">\n            <BrandTwitter size={18} />\n          </ActionIcon>\n          <ActionIcon size=\"lg\">\n            <BrandYoutube size={18} />\n          </ActionIcon>\n          <ActionIcon size=\"lg\">\n            <BrandInstagram size={18} />\n          </ActionIcon>\n        </Group>\n      </Container>\n    </Header>\n  );\n}\n",
      "attributes": {
        "title": "Header with logo in the middle",
        "category": "headers",
        "author": "rtivital",
        "responsive": true,
        "withColor": true,
        "dependencies": [
          "/core/app-shell/",
          "/core/group/",
          "/core/action-icon/",
          "/core/container/",
          "/core/burger/",
          "tabler-icons-react"
        ],
        "props": {
          "links": [
            {
              "link": "/about",
              "label": "Home"
            },
            {
              "link": "/learn",
              "label": "Features"
            },
            {
              "link": "/pricing",
              "label": "Pricing"
            }
          ]
        },
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "HeaderSearch",
      "url": "/component/header-search",
      "code": "import React from 'react';\nimport { createStyles, Header, Autocomplete, Group, Burger } from '@mantine/core';\nimport { useBooleanToggle } from '@mantine/hooks';\nimport { MagnifyingGlassIcon } from '@modulz/radix-icons';\nimport { MantineLogo } from '../../shared/MantineLogo';\n\nconst useStyles = createStyles((theme) => ({\n  header: {\n    paddingLeft: theme.spacing.md,\n    paddingRight: theme.spacing.md,\n  },\n\n  inner: {\n    height: 56,\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n\n  links: {\n    [theme.fn.smallerThan('md')]: {\n      display: 'none',\n    },\n  },\n\n  search: {\n    [theme.fn.smallerThan('xs')]: {\n      display: 'none',\n    },\n  },\n\n  link: {\n    display: 'block',\n    lineHeight: 1,\n    padding: '8px 12px',\n    borderRadius: theme.radius.sm,\n    textDecoration: 'none',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    fontSize: theme.fontSizes.sm,\n    fontWeight: 500,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    },\n  },\n}));\n\ninterface HeaderSearchProps {\n  links: { link: string; label: string }[];\n}\n\nexport function HeaderSearch({ links }: HeaderSearchProps) {\n  const [opened, toggleOpened] = useBooleanToggle(false);\n  const { classes } = useStyles();\n\n  const items = links.map((link) => (\n    <a\n      key={link.label}\n      href={link.link}\n      className={classes.link}\n      onClick={(event) => event.preventDefault()}\n    >\n      {link.label}\n    </a>\n  ));\n\n  return (\n    <Header height={56} className={classes.header} mb={120}>\n      <div className={classes.inner}>\n        <Group>\n          <Burger opened={opened} onClick={() => toggleOpened()} size=\"sm\" />\n          <MantineLogo />\n        </Group>\n\n        <Group>\n          <Group ml={50} spacing={5} className={classes.links}>\n            {items}\n          </Group>\n          <Autocomplete\n            className={classes.search}\n            placeholder=\"Search\"\n            icon={<MagnifyingGlassIcon />}\n            data={['React', 'Angular', 'Vue', 'Next.js', 'Riot.js', 'Svelte', 'Blitz.js']}\n          />\n        </Group>\n      </div>\n    </Header>\n  );\n}\n",
      "attributes": {
        "title": "Header with search",
        "category": "headers",
        "author": "rtivital",
        "responsive": true,
        "dependencies": [
          "/core/app-shell/",
          "/core/autocomplete/",
          "/core/group/",
          "/core/burger/",
          "/hooks/use-toggle/",
          "@modulz/radix-icons"
        ],
        "props": {
          "links": [
            {
              "link": "/about",
              "label": "Features"
            },
            {
              "link": "/pricing",
              "label": "Pricing"
            },
            {
              "link": "/learn",
              "label": "Learn"
            },
            {
              "link": "/community",
              "label": "Community"
            }
          ]
        },
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "HeaderSimple",
      "url": "/component/header-simple",
      "code": "import React, { useState } from 'react';\nimport { createStyles, Header, Container, Group, Burger } from '@mantine/core';\nimport { useBooleanToggle } from '@mantine/hooks';\nimport { MantineLogo } from '../../shared/MantineLogo';\n\nconst useStyles = createStyles((theme) => ({\n  header: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    height: '100%',\n  },\n\n  links: {\n    [theme.fn.smallerThan('xs')]: {\n      display: 'none',\n    },\n  },\n\n  burger: {\n    [theme.fn.largerThan('xs')]: {\n      display: 'none',\n    },\n  },\n\n  link: {\n    display: 'block',\n    lineHeight: 1,\n    padding: '8px 12px',\n    borderRadius: theme.radius.sm,\n    textDecoration: 'none',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    fontSize: theme.fontSizes.sm,\n    fontWeight: 500,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    },\n  },\n\n  linkActive: {\n    '&, &:hover': {\n      backgroundColor:\n        theme.colorScheme === 'dark'\n          ? theme.fn.rgba(theme.colors[theme.primaryColor][9], 0.25)\n          : theme.colors[theme.primaryColor][0],\n      color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 3 : 7],\n    },\n  },\n}));\n\ninterface HeaderSimpleProps {\n  links: { link: string; label: string }[];\n}\n\nexport function HeaderSimple({ links }: HeaderSimpleProps) {\n  const [opened, toggleOpened] = useBooleanToggle(false);\n  const [active, setActive] = useState(links[0].link);\n  const { classes, cx } = useStyles();\n\n  const items = links.map((link) => (\n    <a\n      key={link.label}\n      href={link.link}\n      className={cx(classes.link, { [classes.linkActive]: active === link.link })}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(link.link);\n      }}\n    >\n      {link.label}\n    </a>\n  ));\n\n  return (\n    <Header height={60} mb={120}>\n      <Container className={classes.header}>\n        <MantineLogo />\n        <Group spacing={5} className={classes.links}>\n          {items}\n        </Group>\n\n        <Burger\n          opened={opened}\n          onClick={() => toggleOpened()}\n          className={classes.burger}\n          size=\"sm\"\n        />\n      </Container>\n    </Header>\n  );\n}\n",
      "attributes": {
        "title": "Simple header",
        "category": "headers",
        "author": "rtivital",
        "withColor": true,
        "responsive": true,
        "dependencies": [
          "/core/app-shell/",
          "/core/container/",
          "/core/group/",
          "/core/burger/"
        ],
        "props": {
          "links": [
            {
              "link": "/about",
              "label": "Features"
            },
            {
              "link": "/pricing",
              "label": "Pricing"
            },
            {
              "link": "/learn",
              "label": "Learn"
            },
            {
              "link": "/community",
              "label": "Community"
            }
          ]
        },
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "HeaderTabs",
      "url": "/component/header-tabs",
      "code": "import React, { useState } from 'react';\nimport {\n  createStyles,\n  Container,\n  Avatar,\n  UnstyledButton,\n  Group,\n  Text,\n  Menu,\n  Divider,\n  Tabs,\n  Burger,\n} from '@mantine/core';\nimport { useBooleanToggle } from '@mantine/hooks';\nimport {\n  Logout,\n  Heart,\n  Star,\n  Message,\n  Settings,\n  PlayerPause,\n  Trash,\n  SwitchHorizontal,\n} from 'tabler-icons-react';\nimport { ChevronDownIcon } from '@modulz/radix-icons';\nimport { MantineLogo } from '../../shared/MantineLogo';\n\nconst useStyles = createStyles((theme) => ({\n  header: {\n    paddingTop: theme.spacing.sm,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    borderBottom: `1px solid ${\n      theme.colorScheme === 'dark' ? 'transparent' : theme.colors.gray[2]\n    }`,\n    marginBottom: 120,\n  },\n\n  mainSection: {\n    paddingBottom: theme.spacing.sm,\n  },\n\n  userMenu: {\n    [theme.fn.smallerThan('xs')]: {\n      display: 'none',\n    },\n  },\n\n  user: {\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.black,\n    padding: `${theme.spacing.xs}px ${theme.spacing.sm}px`,\n    borderRadius: theme.radius.sm,\n    transition: 'background-color 100ms ease',\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.white,\n    },\n  },\n\n  burger: {\n    [theme.fn.largerThan('xs')]: {\n      display: 'none',\n    },\n  },\n\n  userActive: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.white,\n  },\n\n  tabs: {\n    [theme.fn.smallerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  tabsList: {\n    borderBottom: '0 !important',\n  },\n\n  tabControl: {\n    fontWeight: 500,\n    height: 38,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[1],\n    },\n  },\n\n  tabControlActive: {\n    borderColor: `${\n      theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[2]\n    } !important`,\n  },\n}));\n\ninterface HeaderTabsProps {\n  user: { name: string; image: string };\n  tabs: string[];\n}\n\nexport function HeaderTabs({ user, tabs }: HeaderTabsProps) {\n  const { classes, theme, cx } = useStyles();\n  const [opened, toggleOpened] = useBooleanToggle(false);\n  const [userMenuOpened, setUserMenuOpened] = useState(false);\n\n  const items = tabs.map((tab) => <Tabs.Tab label={tab} key={tab} />);\n\n  return (\n    <div className={classes.header}>\n      <Container className={classes.mainSection}>\n        <Group position=\"apart\">\n          <MantineLogo />\n\n          <Burger\n            opened={opened}\n            onClick={() => toggleOpened()}\n            className={classes.burger}\n            size=\"sm\"\n          />\n\n          <Menu\n            size={260}\n            placement=\"end\"\n            transition=\"pop-top-right\"\n            className={classes.userMenu}\n            onClose={() => setUserMenuOpened(false)}\n            onOpen={() => setUserMenuOpened(true)}\n            control={\n              <UnstyledButton\n                className={cx(classes.user, { [classes.userActive]: userMenuOpened })}\n              >\n                <Group spacing={7}>\n                  <Avatar src={user.image} alt={user.name} radius=\"xl\" size={20} />\n                  <Text weight={500} size=\"sm\" sx={{ lineHeight: 1 }} mr={3}>\n                    {user.name}\n                  </Text>\n                  <ChevronDownIcon width={12} height={12} />\n                </Group>\n              </UnstyledButton>\n            }\n          >\n            <Menu.Item icon={<Heart size={14} color={theme.colors.red[6]} />}>\n              Liked posts\n            </Menu.Item>\n            <Menu.Item icon={<Star size={14} color={theme.colors.yellow[6]} />}>\n              Saved posts\n            </Menu.Item>\n            <Menu.Item icon={<Message size={14} color={theme.colors.blue[6]} />}>\n              Your comments\n            </Menu.Item>\n\n            <Menu.Label>Settings</Menu.Label>\n            <Menu.Item icon={<Settings size={14} />}>Account settings</Menu.Item>\n            <Menu.Item icon={<SwitchHorizontal size={14} />}>Change account</Menu.Item>\n            <Menu.Item icon={<Logout size={14} />}>Logout</Menu.Item>\n\n            <Divider />\n\n            <Menu.Label>Danger zone</Menu.Label>\n            <Menu.Item icon={<PlayerPause size={14} />}>Pause subscription</Menu.Item>\n            <Menu.Item color=\"red\" icon={<Trash size={14} />}>\n              Delete account\n            </Menu.Item>\n          </Menu>\n        </Group>\n      </Container>\n      <Container>\n        <Tabs\n          variant=\"outline\"\n          classNames={{\n            root: classes.tabs,\n            tabsListWrapper: classes.tabsList,\n            tabControl: classes.tabControl,\n            tabActive: classes.tabControlActive,\n          }}\n        >\n          {items}\n        </Tabs>\n      </Container>\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Header with tabs",
        "category": "headers",
        "author": "rtivital",
        "responsive": true,
        "dependencies": [
          "/core/container/",
          "/core/avatar/",
          "/core/button/#unstyled-button",
          "/core/group/",
          "/core/text/",
          "/core/menu/",
          "/core/divider/",
          "/core/tabs/",
          "/core/burger/",
          "/hooks/use-toggle/",
          "tabler-icons-react",
          "@modulz/radix-icons"
        ],
        "props": {
          "user": {
            "name": "Jane Spoonfighter",
            "email": "janspoon@fighter.dev",
            "image": "https://images.unsplash.com/photo-1508214751196-bcfd4ca60f91?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=255&q=80"
          },
          "tabs": [
            "Home",
            "Orders",
            "Education",
            "Community",
            "Forums",
            "Support",
            "Account",
            "Helpdesk"
          ]
        },
        "canvas": {
          "center": false
        }
      }
    }
  ],
  "navbars": [
    {
      "component": "DoubleNavbar",
      "url": "/component/double-navbar",
      "code": "import React, { useState } from 'react';\nimport { createStyles, Navbar, UnstyledButton, Tooltip, Title, Image } from '@mantine/core';\nimport {\n  Home2,\n  Gauge,\n  DeviceDesktopAnalytics,\n  Fingerprint,\n  CalendarStats,\n  User,\n  Settings,\n} from 'tabler-icons-react';\nimport logo from '../NavbarMinimal/logo.svg';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    display: 'flex',\n  },\n\n  aside: {\n    flex: '0 0 60px',\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    borderRight: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[3]\n    }`,\n  },\n\n  main: {\n    flex: 1,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n  },\n\n  mainLink: {\n    width: 44,\n    height: 44,\n    borderRadius: theme.radius.md,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[0],\n    },\n  },\n\n  mainLinkActive: {\n    '&, &:hover': {\n      backgroundColor:\n        theme.colorScheme === 'dark'\n          ? theme.fn.rgba(theme.colors[theme.primaryColor][9], 0.25)\n          : theme.colors[theme.primaryColor][0],\n      color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 4 : 7],\n    },\n  },\n\n  title: {\n    boxSizing: 'border-box',\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    marginBottom: theme.spacing.xl,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n    padding: theme.spacing.md,\n    paddingTop: 18,\n    height: 60,\n    borderBottom: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[3]\n    }`,\n  },\n\n  logo: {\n    boxSizing: 'border-box',\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    height: 60,\n    paddingTop: theme.spacing.md,\n    borderBottom: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[3]\n    }`,\n    marginBottom: theme.spacing.xl,\n  },\n\n  link: {\n    boxSizing: 'border-box',\n    display: 'block',\n    textDecoration: 'none',\n    borderTopRightRadius: theme.radius.md,\n    borderBottomRightRadius: theme.radius.md,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    padding: `0 ${theme.spacing.md}px`,\n    fontSize: theme.fontSizes.sm,\n    marginRight: theme.spacing.md,\n    fontWeight: 500,\n    height: 44,\n    lineHeight: '44px',\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[1],\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    },\n  },\n\n  linkActive: {\n    '&, &:hover': {\n      borderLeftColor: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 7 : 5],\n      backgroundColor: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 7 : 5],\n      color: theme.white,\n    },\n  },\n}));\n\nconst mainLinksMockdata = [\n  { icon: Home2, label: 'Home' },\n  { icon: Gauge, label: 'Dashboard' },\n  { icon: DeviceDesktopAnalytics, label: 'Analytics' },\n  { icon: CalendarStats, label: 'Releases' },\n  { icon: User, label: 'Account' },\n  { icon: Fingerprint, label: 'Security' },\n  { icon: Settings, label: 'Settings' },\n];\n\nconst linksMockdata = [\n  'Security',\n  'Settings',\n  'Dashboard',\n  'Releases',\n  'Account',\n  'Orders',\n  'Clients',\n  'Databases',\n  'Pull Requests',\n  'Open Issues',\n  'Wiki pages',\n];\n\nexport function DoubleNavbar() {\n  const { classes, cx } = useStyles();\n  const [active, setActive] = useState('Releases');\n  const [activeLink, setActiveLink] = useState('Settings');\n\n  const mainLinks = mainLinksMockdata.map((link) => (\n    <Tooltip label={link.label} position=\"right\" withArrow transitionDuration={0}>\n      <UnstyledButton\n        onClick={() => setActive(link.label)}\n        className={cx(classes.mainLink, { [classes.mainLinkActive]: link.label === active })}\n      >\n        <link.icon />\n      </UnstyledButton>\n    </Tooltip>\n  ));\n\n  const links = linksMockdata.map((link) => (\n    <a\n      className={cx(classes.link, { [classes.linkActive]: activeLink === link })}\n      href=\"/\"\n      onClick={(event) => {\n        event.preventDefault();\n        setActiveLink(link);\n      }}\n      key={link}\n    >\n      {link}\n    </a>\n  ));\n\n  return (\n    <Navbar height={750} width={{ sm: 300 }}>\n      <Navbar.Section grow className={classes.wrapper}>\n        <div className={classes.aside}>\n          <div className={classes.logo}>\n            <Image src={logo.src} alt=\"Mantine logo\" width={30} mx=\"auto\" />\n          </div>\n          {mainLinks}\n        </div>\n        <div className={classes.main}>\n          <Title order={4} className={classes.title}>\n            {active}\n          </Title>\n\n          {links}\n        </div>\n      </Navbar.Section>\n    </Navbar>\n  );\n}\n",
      "attributes": {
        "title": "Navbar with 2 sections",
        "category": "navbars",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [],
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "NavbarLinksGroup",
      "url": "/component/navbar-links-group",
      "code": "import React, { useState } from 'react';\nimport { Group, Box, Collapse, ThemeIcon, Text, UnstyledButton, createStyles } from '@mantine/core';\nimport { ChevronRightIcon } from '@modulz/radix-icons';\nimport { Icon as TablerIcon, CalendarStats } from 'tabler-icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  control: {\n    fontWeight: 500,\n    display: 'block',\n    width: '100%',\n    padding: `${theme.spacing.xs}px ${theme.spacing.md}px`,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.black,\n    fontSize: theme.fontSizes.sm,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[0],\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    },\n  },\n\n  link: {\n    fontWeight: 500,\n    display: 'block',\n    textDecoration: 'none',\n    padding: `${theme.spacing.xs}px ${theme.spacing.md}px`,\n    paddingLeft: 31,\n    marginLeft: 30,\n    fontSize: theme.fontSizes.sm,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    borderLeft: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[0],\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    },\n  },\n\n  chevron: {\n    transition: 'transform 200ms ease',\n  },\n}));\n\ninterface LinksGroupProps {\n  icon: TablerIcon;\n  label: string;\n  initiallyOpened?: boolean;\n  links?: { label: string; link: string }[];\n}\n\nexport function LinksGroup({ icon: Icon, label, initiallyOpened, links }: LinksGroupProps) {\n  const { classes } = useStyles();\n  const hasLinks = Array.isArray(links);\n  const [opened, setOpened] = useState(initiallyOpened || false);\n  const items = (hasLinks ? links : []).map((link) => (\n    <Text<'a'>\n      component=\"a\"\n      className={classes.link}\n      href={link.link}\n      key={link.label}\n      onClick={(event) => event.preventDefault()}\n    >\n      {link.label}\n    </Text>\n  ));\n\n  return (\n    <>\n      <UnstyledButton onClick={() => setOpened((o) => !o)} className={classes.control}>\n        <Group position=\"apart\" spacing={0}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <ThemeIcon variant=\"light\" size={30}>\n              <Icon size={18} />\n            </ThemeIcon>\n            <Box ml=\"md\">{label}</Box>\n          </Box>\n          {hasLinks && (\n            <ChevronRightIcon\n              className={classes.chevron}\n              style={{ transform: opened ? 'rotate(90deg)' : 'none' }}\n            />\n          )}\n        </Group>\n      </UnstyledButton>\n      {hasLinks ? <Collapse in={opened}>{items}</Collapse> : null}\n    </>\n  );\n}\n\nconst mockdata = {\n  label: 'Releases',\n  icon: CalendarStats,\n  links: [\n    { label: 'Upcoming releases', link: '/' },\n    { label: 'Previous releases', link: '/' },\n    { label: 'Releases schedule', link: '/' },\n  ],\n};\n\nexport function NavbarLinksGroup() {\n  return (\n    <Box\n      sx={(theme) => ({\n        minHeight: 220,\n        padding: theme.spacing.md,\n        backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.white,\n      })}\n    >\n      <LinksGroup {...mockdata} />\n    </Box>\n  );\n}\n",
      "attributes": {
        "title": "Collapsible links group",
        "category": "navbars",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/text/",
          "/core/box/",
          "/core/collapse/",
          "/core/theme-icon/",
          "/core/button/#unstyled-button"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 320
        }
      }
    },
    {
      "component": "NavbarMinimal",
      "url": "/component/navbar-minimal",
      "code": "import React, { useState } from 'react';\nimport { Navbar, Image, Tooltip, UnstyledButton, createStyles, Group } from '@mantine/core';\nimport {\n  Icon as TablerIcon,\n  Home2,\n  Gauge,\n  DeviceDesktopAnalytics,\n  Fingerprint,\n  CalendarStats,\n  User,\n  Settings,\n  Logout,\n  SwitchHorizontal,\n} from 'tabler-icons-react';\nimport logo from './logo.svg';\n\nconst useStyles = createStyles((theme) => ({\n  link: {\n    width: 50,\n    height: 50,\n    borderRadius: theme.radius.md,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[0],\n    },\n  },\n\n  active: {\n    '&, &:hover': {\n      backgroundColor:\n        theme.colorScheme === 'dark'\n          ? theme.fn.rgba(theme.colors[theme.primaryColor][9], 0.25)\n          : theme.colors[theme.primaryColor][0],\n      color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 4 : 7],\n    },\n  },\n}));\n\ninterface NavbarLinkProps {\n  icon: TablerIcon;\n  label: string;\n  active?: boolean;\n  onClick?(): void;\n}\n\nfunction NavbarLink({ icon: Icon, label, active, onClick }: NavbarLinkProps) {\n  const { classes, cx } = useStyles();\n  return (\n    <Tooltip label={label} position=\"right\" withArrow transitionDuration={0}>\n      <UnstyledButton onClick={onClick} className={cx(classes.link, { [classes.active]: active })}>\n        <Icon />\n      </UnstyledButton>\n    </Tooltip>\n  );\n}\n\nconst mockdata = [\n  { icon: Home2, label: 'Home' },\n  { icon: Gauge, label: 'Dashboard' },\n  { icon: DeviceDesktopAnalytics, label: 'Analytics' },\n  { icon: CalendarStats, label: 'Releases' },\n  { icon: User, label: 'Account' },\n  { icon: Fingerprint, label: 'Security' },\n  { icon: Settings, label: 'Settings' },\n];\n\nexport function NavbarMinimal() {\n  const [active, setActive] = useState(2);\n\n  const links = mockdata.map((link, index) => (\n    <NavbarLink\n      {...link}\n      key={link.label}\n      active={index === active}\n      onClick={() => setActive(index)}\n    />\n  ));\n\n  return (\n    <Navbar height={750} width={{ base: 80 }} padding=\"md\">\n      <Image src={logo.src} alt=\"Mantine logo\" width={40} mx=\"auto\" />\n      <Navbar.Section grow mt={50}>\n        <Group direction=\"column\" align=\"center\" spacing={0}>\n          {links}\n        </Group>\n      </Navbar.Section>\n      <Navbar.Section>\n        <Group direction=\"column\" align=\"center\" spacing={0}>\n          <NavbarLink icon={SwitchHorizontal} label=\"Change account\" />\n          <NavbarLink icon={Logout} label=\"Logout\" />\n        </Group>\n      </Navbar.Section>\n    </Navbar>\n  );\n}\n",
      "attributes": {
        "title": "Navbar with tooltips",
        "category": "navbars",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/app-shell/",
          "/core/button/#unstyled-button",
          "/core/group/",
          "/core/tooltip/",
          "/core/image/"
        ],
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "NavbarNested",
      "url": "/component/navbar-nested",
      "code": "import React from 'react';\nimport { Navbar, Group, Code, ScrollArea, createStyles } from '@mantine/core';\nimport {\n  Notes,\n  CalendarStats,\n  Gauge,\n  PresentationAnalytics,\n  FileAnalytics,\n  Adjustments,\n  Lock,\n} from 'tabler-icons-react';\nimport { UserButton } from '../UserButton/UserButton';\nimport { LinksGroup } from '../NavbarLinksGroup/NavbarLinksGroup';\nimport { Logo } from './Logo';\n\nconst mockdata = [\n  { label: 'Dashboard', icon: Gauge },\n  {\n    label: 'Market news',\n    icon: Notes,\n    initiallyOpened: true,\n    links: [\n      { label: 'Overview', link: '/' },\n      { label: 'Forecasts', link: '/' },\n      { label: 'Outlook', link: '/' },\n      { label: 'Real time', link: '/' },\n    ],\n  },\n  {\n    label: 'Releases',\n    icon: CalendarStats,\n    links: [\n      { label: 'Upcoming releases', link: '/' },\n      { label: 'Previous releases', link: '/' },\n      { label: 'Releases schedule', link: '/' },\n    ],\n  },\n  { label: 'Analytics', icon: PresentationAnalytics },\n  { label: 'Contracts', icon: FileAnalytics },\n  { label: 'Settings', icon: Adjustments },\n  {\n    label: 'Security',\n    icon: Lock,\n    links: [\n      { label: 'Enable 2FA', link: '/' },\n      { label: 'Change password', link: '/' },\n      { label: 'Recovery codes', link: '/' },\n    ],\n  },\n];\n\nconst useStyles = createStyles((theme) => ({\n  navbar: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.white,\n    paddingBottom: 0,\n  },\n\n  header: {\n    padding: theme.spacing.md,\n    paddingTop: 0,\n    marginLeft: -theme.spacing.md,\n    marginRight: -theme.spacing.md,\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    borderBottom: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n  },\n\n  links: {\n    marginLeft: -theme.spacing.md,\n    marginRight: -theme.spacing.md,\n  },\n\n  linksInner: {\n    paddingTop: theme.spacing.xl,\n    paddingBottom: theme.spacing.xl,\n  },\n\n  footer: {\n    marginLeft: -theme.spacing.md,\n    marginRight: -theme.spacing.md,\n    borderTop: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n  },\n}));\n\nexport function NavbarNested() {\n  const { classes } = useStyles();\n  const links = mockdata.map((item) => <LinksGroup {...item} key={item.label} />);\n\n  return (\n    <Navbar height={800} width={{ sm: 300 }} padding=\"md\" className={classes.navbar}>\n      <Navbar.Section className={classes.header}>\n        <Group position=\"apart\">\n          <Logo width={120} />\n          <Code sx={{ fontWeight: 700 }}>v3.1.2</Code>\n        </Group>\n      </Navbar.Section>\n\n      <Navbar.Section grow className={classes.links} component={ScrollArea}>\n        <div className={classes.linksInner}>{links}</div>\n      </Navbar.Section>\n\n      <Navbar.Section className={classes.footer}>\n        <UserButton\n          image=\"https://images.unsplash.com/photo-1508214751196-bcfd4ca60f91?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=255&q=80\"\n          name=\"Ann Nullpointer\"\n          email=\"anullpointer@yahoo.com\"\n        />\n      </Navbar.Section>\n    </Navbar>\n  );\n}\n",
      "attributes": {
        "title": "Navbar with nested links",
        "category": "navbars",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/app-shell/",
          "/core/group/",
          "/core/code/",
          "/core/scroll-area/",
          "/core/button/#unstyled-button",
          "/component/user-button/",
          "/component/navbar-links-group/",
          "tabler-icons-react"
        ],
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "NavbarSearch",
      "url": "/component/navbar-search",
      "code": "import React from 'react';\nimport {\n  createStyles,\n  Navbar,\n  TextInput,\n  Code,\n  UnstyledButton,\n  Badge,\n  Text,\n  Group,\n  ActionIcon,\n  Tooltip,\n} from '@mantine/core';\nimport { CaretSortIcon, MagnifyingGlassIcon, PlusIcon } from '@modulz/radix-icons';\nimport { Bulb, User, Checkbox } from 'tabler-icons-react';\nimport { UserButton } from '../UserButton/UserButton';\n\nconst useStyles = createStyles((theme) => ({\n  navbar: {\n    paddingTop: 0,\n  },\n\n  section: {\n    marginLeft: -theme.spacing.md,\n    marginRight: -theme.spacing.md,\n    marginBottom: theme.spacing.md,\n\n    '&:not(:last-of-type)': {\n      borderBottom: `1px solid ${\n        theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n      }`,\n    },\n  },\n\n  searchCode: {\n    fontWeight: 700,\n    fontSize: 10,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[0],\n    border: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[2]\n    }`,\n  },\n\n  mainLinks: {\n    paddingLeft: theme.spacing.md - theme.spacing.xs,\n    paddingRight: theme.spacing.md - theme.spacing.xs,\n    paddingBottom: theme.spacing.md,\n  },\n\n  mainLink: {\n    display: 'flex',\n    alignItems: 'center',\n    width: '100%',\n    fontSize: theme.fontSizes.xs,\n    padding: `8px ${theme.spacing.xs}px`,\n    borderRadius: theme.radius.sm,\n    fontWeight: 500,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    },\n  },\n\n  mainLinkInner: {\n    display: 'flex',\n    alignItems: 'center',\n    flex: 1,\n  },\n\n  mainLinkIcon: {\n    marginRight: theme.spacing.sm,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[6],\n  },\n\n  mainLinkBadge: {\n    padding: 0,\n    width: 20,\n    height: 20,\n    pointerEvents: 'none',\n  },\n\n  collections: {\n    paddingLeft: theme.spacing.md - 6,\n    paddingRight: theme.spacing.md - 6,\n    paddingBottom: theme.spacing.md,\n  },\n\n  collectionsHeader: {\n    paddingLeft: theme.spacing.md + 2,\n    paddingRight: theme.spacing.md,\n    marginBottom: 5,\n  },\n\n  collectionLink: {\n    display: 'block',\n    padding: `8px ${theme.spacing.xs}px`,\n    textDecoration: 'none',\n    borderRadius: theme.radius.sm,\n    fontSize: theme.fontSizes.xs,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    lineHeight: 1,\n    fontWeight: 500,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    },\n  },\n}));\n\nconst links = [\n  { icon: Bulb, label: 'Activity', notifications: 3 },\n  { icon: Checkbox, label: 'Tasks', notifications: 4 },\n  { icon: User, label: 'Contacts' },\n];\n\nconst collections = [\n  { emoji: '👍', label: 'Sales' },\n  { emoji: '🚚', label: 'Deliveries' },\n  { emoji: '💸', label: 'Discounts' },\n  { emoji: '💰', label: 'Profits' },\n  { emoji: '✨', label: 'Reports' },\n  { emoji: '🛒', label: 'Orders' },\n  { emoji: '📅', label: 'Events' },\n  { emoji: '🙈', label: 'Debts' },\n  { emoji: '💁‍♀️', label: 'Customers' },\n];\n\nexport function NavbarSearch() {\n  const { classes } = useStyles();\n\n  const mainLinks = links.map((link) => (\n    <UnstyledButton key={link.label} className={classes.mainLink}>\n      <div className={classes.mainLinkInner}>\n        <link.icon size={20} className={classes.mainLinkIcon} />\n        <span>{link.label}</span>\n      </div>\n      {link.notifications && (\n        <Badge size=\"sm\" variant=\"filled\" className={classes.mainLinkBadge}>\n          {link.notifications}\n        </Badge>\n      )}\n    </UnstyledButton>\n  ));\n\n  const collectionLinks = collections.map((collection) => (\n    <a\n      href=\"/\"\n      onClick={(event) => event.preventDefault()}\n      key={collection.label}\n      className={classes.collectionLink}\n    >\n      <span style={{ marginRight: 9, fontSize: 16 }}>{collection.emoji}</span> {collection.label}\n    </a>\n  ));\n\n  return (\n    <Navbar height={700} width={{ sm: 300 }} padding=\"md\" className={classes.navbar}>\n      <Navbar.Section className={classes.section}>\n        <UserButton\n          image=\"https://i.imgur.com/fGxgcDF.png\"\n          name=\"Bob Rulebreaker\"\n          email=\"Product owner\"\n          icon={<CaretSortIcon />}\n        />\n      </Navbar.Section>\n\n      <TextInput\n        placeholder=\"Search\"\n        size=\"xs\"\n        icon={<MagnifyingGlassIcon />}\n        rightSectionWidth={70}\n        rightSection={<Code className={classes.searchCode}>Ctrl + K</Code>}\n        styles={{ rightSection: { pointerEvents: 'none' } }}\n        mb=\"sm\"\n      />\n\n      <Navbar.Section className={classes.section}>\n        <div className={classes.mainLinks}>{mainLinks}</div>\n      </Navbar.Section>\n\n      <Navbar.Section className={classes.section}>\n        <Group className={classes.collectionsHeader} position=\"apart\">\n          <Text size=\"xs\" weight={500} color=\"dimmed\">\n            Collections\n          </Text>\n          <Tooltip label=\"Create collection\" withArrow position=\"right\">\n            <ActionIcon variant=\"default\" size={18}>\n              <PlusIcon style={{ width: 12, height: 12 }} />\n            </ActionIcon>\n          </Tooltip>\n        </Group>\n        <div className={classes.collections}>{collectionLinks}</div>\n      </Navbar.Section>\n    </Navbar>\n  );\n}\n",
      "attributes": {
        "title": "Navbar with search",
        "category": "navbars",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/app-shell/",
          "/core/badge/",
          "/core/text-input",
          "/core/text/",
          "/core/group/",
          "/core/action-icon/",
          "/core/tooltip/",
          "tabler-icons-react",
          "@modulz/radix-icons"
        ],
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "NavbarSegmented",
      "url": "/component/navbar-segmented",
      "code": "import React, { useState } from 'react';\nimport { Navbar, SegmentedControl, Text, createStyles } from '@mantine/core';\nimport {\n  ShoppingCart,\n  License,\n  Message2,\n  BellRinging,\n  Messages,\n  Fingerprint,\n  Key,\n  Settings,\n  TwoFA,\n  Users,\n  FileAnalytics,\n  DatabaseImport,\n  Receipt2,\n  ReceiptRefund,\n  Logout,\n  SwitchHorizontal,\n} from 'tabler-icons-react';\n\nconst useStyles = createStyles((theme, _params, getRef) => {\n  const icon = getRef('icon');\n\n  return {\n    navbar: {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.white,\n    },\n\n    title: {\n      textTransform: 'uppercase',\n      letterSpacing: -0.25,\n    },\n\n    link: {\n      ...theme.fn.focusStyles(),\n      display: 'flex',\n      alignItems: 'center',\n      textDecoration: 'none',\n      fontSize: theme.fontSizes.sm,\n      color: theme.colorScheme === 'dark' ? theme.colors.dark[1] : theme.colors.gray[7],\n      padding: `${theme.spacing.xs}px ${theme.spacing.sm}px`,\n      borderRadius: theme.radius.sm,\n      fontWeight: 500,\n\n      '&:hover': {\n        backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[0],\n        color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n\n        [`& .${icon}`]: {\n          color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n        },\n      },\n    },\n\n    linkIcon: {\n      ref: icon,\n      color: theme.colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[6],\n      marginRight: theme.spacing.sm,\n    },\n\n    linkActive: {\n      '&, &:hover': {\n        backgroundColor:\n          theme.colorScheme === 'dark'\n            ? theme.fn.rgba(theme.colors[theme.primaryColor][9], 0.25)\n            : theme.colors[theme.primaryColor][0],\n        color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 4 : 7],\n        [`& .${icon}`]: {\n          color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 4 : 7],\n        },\n      },\n    },\n\n    footer: {\n      borderTop: `1px solid ${\n        theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n      }`,\n      paddingTop: theme.spacing.md,\n    },\n  };\n});\n\nconst tabs = {\n  account: [\n    { link: '', label: 'Notifications', icon: BellRinging },\n    { link: '', label: 'Billing', icon: Receipt2 },\n    { link: '', label: 'Security', icon: Fingerprint },\n    { link: '', label: 'SSH Keys', icon: Key },\n    { link: '', label: 'Databases', icon: DatabaseImport },\n    { link: '', label: 'Authentication', icon: TwoFA },\n    { link: '', label: 'Other Settings', icon: Settings },\n  ],\n  general: [\n    { link: '', label: 'Orders', icon: ShoppingCart },\n    { link: '', label: 'Receipts', icon: License },\n    { link: '', label: 'Reviews', icon: Message2 },\n    { link: '', label: 'Messages', icon: Messages },\n    { link: '', label: 'Customers', icon: Users },\n    { link: '', label: 'Refunds', icon: ReceiptRefund },\n    { link: '', label: 'Files', icon: FileAnalytics },\n  ],\n};\n\nexport function NavbarSegmented() {\n  const { classes, cx } = useStyles();\n  const [section, setSection] = useState('account');\n  const [active, setActive] = useState('Billing');\n\n  const links = tabs[section].map((item) => (\n    <a\n      className={cx(classes.link, { [classes.linkActive]: item.label === active })}\n      href={item.link}\n      key={item.label}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(item.label);\n      }}\n    >\n      <item.icon className={classes.linkIcon} />\n      <span>{item.label}</span>\n    </a>\n  ));\n\n  return (\n    <Navbar height={840} width={{ sm: 300 }} padding=\"md\" className={classes.navbar}>\n      <Navbar.Section>\n        <Text weight={500} size=\"sm\" className={classes.title} color=\"dimmed\" mb=\"xs\">\n          bgluesticker@mantine.dev\n        </Text>\n\n        <SegmentedControl\n          value={section}\n          onChange={setSection}\n          transitionTimingFunction=\"ease\"\n          fullWidth\n          data={[\n            { label: 'Account', value: 'account' },\n            { label: 'System', value: 'general' },\n          ]}\n        />\n      </Navbar.Section>\n\n      <Navbar.Section grow mt=\"xl\">\n        {links}\n      </Navbar.Section>\n\n      <Navbar.Section className={classes.footer}>\n        <a href=\"#\" className={classes.link} onClick={(event) => event.preventDefault()}>\n          <SwitchHorizontal className={classes.linkIcon} />\n          <span>Change account</span>\n        </a>\n\n        <a href=\"#\" className={classes.link} onClick={(event) => event.preventDefault()}>\n          <Logout className={classes.linkIcon} />\n          <span>Logout</span>\n        </a>\n      </Navbar.Section>\n    </Navbar>\n  );\n}\n",
      "attributes": {
        "title": "Navbar with SegmentedControl",
        "category": "navbars",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/app-shell/",
          "/core/segmented-control/",
          "/core/text/",
          "tabler-icons-react"
        ],
        "canvas": {
          "center": false
        }
      }
    }
  ],
  "dropzones": [
    {
      "component": "DropzoneButton",
      "url": "/component/dropzone-button",
      "code": "import React, { useRef } from 'react';\nimport { Text, Group, Button, createStyles, MantineTheme, useMantineTheme } from '@mantine/core';\nimport { Dropzone, DropzoneStatus, MIME_TYPES } from '@mantine/dropzone';\nimport { CloudUpload } from 'tabler-icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    position: 'relative',\n    marginBottom: 30,\n  },\n\n  dropzone: {\n    borderWidth: 1,\n    paddingBottom: 50,\n  },\n\n  icon: {\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[3] : theme.colors.gray[4],\n  },\n\n  control: {\n    position: 'absolute',\n    width: 250,\n    left: 'calc(50% - 125px)',\n    bottom: -20,\n  },\n}));\n\nfunction getActiveColor(status: DropzoneStatus, theme: MantineTheme) {\n  return status.accepted\n    ? theme.colors[theme.primaryColor][6]\n    : status.rejected\n    ? theme.colors.red[6]\n    : theme.colorScheme === 'dark'\n    ? theme.colors.dark[0]\n    : theme.black;\n}\n\nexport function DropzoneButton() {\n  const theme = useMantineTheme();\n  const { classes } = useStyles();\n  const openRef = useRef<() => void>();\n\n  return (\n    <div className={classes.wrapper}>\n      <Dropzone\n        openRef={openRef}\n        onDrop={() => {}}\n        className={classes.dropzone}\n        radius=\"md\"\n        accept={[MIME_TYPES.pdf]}\n        maxSize={30 * 1024 ** 2}\n      >\n        {(status) => (\n          <div style={{ pointerEvents: 'none' }}>\n            <Group position=\"center\">\n              <CloudUpload size={50} color={getActiveColor(status, theme)} />\n            </Group>\n            <Text\n              align=\"center\"\n              weight={700}\n              size=\"lg\"\n              mt=\"xl\"\n              sx={{ color: getActiveColor(status, theme) }}\n            >\n              {status.accepted\n                ? 'Drop files here'\n                : status.rejected\n                ? 'Pdf file less that 30mb'\n                : 'Upload resume'}\n            </Text>\n            <Text align=\"center\" size=\"sm\" mt=\"xs\" color=\"dimmed\">\n              Drag&apos;n&apos;drop files here to upload. We can accept only <i>.pdf</i> files that\n              are less than 30mb in size.\n            </Text>\n          </div>\n        )}\n      </Dropzone>\n\n      <Button className={classes.control} size=\"md\" radius=\"xl\" onClick={() => openRef.current()}>\n        Select files\n      </Button>\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Dropzone with button",
        "category": "dropzones",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/others/dropzone/",
          "/core/button/",
          "/core/group/"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 420
        }
      }
    }
  ],
  "banners": [
    {
      "component": "EmailBanner",
      "url": "/component/email-banner",
      "code": "import React from 'react';\nimport { createStyles, Text, Title, TextInput, Button, Image } from '@mantine/core';\nimport image from './image.svg';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing.xl * 2,\n    borderRadius: theme.radius.md,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.white,\n    border: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.colors.gray[3]\n    }`,\n\n    [`@media (max-width: ${theme.breakpoints.sm}px)`]: {\n      flexDirection: 'column-reverse',\n      padding: theme.spacing.xl,\n    },\n  },\n\n  image: {\n    maxWidth: '40%',\n\n    [`@media (max-width: ${theme.breakpoints.sm}px)`]: {\n      maxWidth: '100%',\n    },\n  },\n\n  body: {\n    paddingRight: theme.spacing.xl * 4,\n\n    [`@media (max-width: ${theme.breakpoints.sm}px)`]: {\n      paddingRight: 0,\n      marginTop: theme.spacing.xl,\n    },\n  },\n\n  title: {\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    lineHeight: 1,\n    marginBottom: theme.spacing.md,\n  },\n\n  controls: {\n    display: 'flex',\n    marginTop: theme.spacing.xl,\n  },\n\n  inputWrapper: {\n    width: '100%',\n    flex: '1',\n  },\n\n  input: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n    borderRight: 0,\n  },\n\n  control: {\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n}));\n\nexport function EmailBanner() {\n  const { classes } = useStyles();\n  return (\n    <div className={classes.wrapper}>\n      <div className={classes.body}>\n        <Title className={classes.title}>Wait a minute...</Title>\n        <Text weight={500} size=\"lg\" mb={5}>\n          Subscribe to our newsletter!\n        </Text>\n        <Text size=\"sm\" color=\"dimmed\">\n          You will never miss important product updates, latest news and community QA sessions. Our\n          newsletter is once a week, every Sunday.\n        </Text>\n\n        <div className={classes.controls}>\n          <TextInput\n            placeholder=\"Your email\"\n            classNames={{ input: classes.input, root: classes.inputWrapper }}\n          />\n          <Button className={classes.control}>Subscribe</Button>\n        </div>\n      </div>\n      <Image src={image} className={classes.image} />\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Email banner",
        "category": "banners",
        "author": "rtivital",
        "responsive": true,
        "withColor": true,
        "dependencies": [
          "/core/button/",
          "/core/text/",
          "/core/title/",
          "/core/image/",
          "/core/text-input/",
          "https://www.freepik.com/"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 980
        }
      }
    },
    {
      "component": "ImageActionBanner",
      "url": "/component/image-action-banner",
      "code": "import React from 'react';\nimport {\n  createStyles,\n  Card,\n  Overlay,\n  CardProps,\n  Button,\n  Text,\n  useMantineTheme,\n} from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    height: 240,\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n\n  content: {\n    position: 'absolute',\n    padding: theme.spacing.xl,\n    zIndex: 1,\n    top: 0,\n    bottom: 0,\n    right: 0,\n    left: 0,\n  },\n\n  action: {\n    position: 'absolute',\n    bottom: theme.spacing.xl,\n    right: theme.spacing.xl,\n  },\n\n  title: {\n    color: theme.white,\n    marginBottom: theme.spacing.xs / 2,\n  },\n\n  description: {\n    color: theme.white,\n    maxWidth: 220,\n  },\n}));\n\ninterface ImageActionBannerProps {\n  title: React.ReactNode;\n  description: React.ReactNode;\n  image: string;\n  action: {\n    label: string;\n    link: string;\n  };\n}\n\nexport function ImageActionBanner({\n  title,\n  description,\n  image,\n  action,\n  style,\n  className,\n  ...others\n}: ImageActionBannerProps & Omit<CardProps<'div'>, keyof ImageActionBannerProps | 'children'>) {\n  const { classes, cx } = useStyles();\n  const theme = useMantineTheme();\n\n  return (\n    <Card\n      radius=\"md\"\n      style={{ backgroundImage: `url(${image})`, ...style }}\n      className={cx(classes.card, className)}\n      {...others}\n    >\n      <Overlay\n        gradient={`linear-gradient(105deg, ${theme.black} 20%, #312f2f 50%, ${theme.colors.gray[4]} 100%)`}\n        opacity={0.55}\n        zIndex={0}\n      />\n\n      <div className={classes.content}>\n        <Text size=\"lg\" weight={700} className={classes.title}>\n          {title}\n        </Text>\n\n        <Text size=\"sm\" className={classes.description}>\n          {description}\n        </Text>\n\n        <Button\n          className={classes.action}\n          variant=\"white\"\n          color=\"dark\"\n          component=\"a\"\n          size=\"xs\"\n          href={action.link}\n        >\n          {action.label}\n        </Button>\n      </div>\n    </Card>\n  );\n}\n",
      "attributes": {
        "title": "Banner with image and action",
        "category": "banners",
        "author": "rtivital",
        "dependencies": [
          "/core/card/",
          "/core/text/",
          "/core/button/",
          "/core/overlay/"
        ],
        "props": {
          "image": "https://images.unsplash.com/photo-1596394516093-501ba68a0ba6?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",
          "title": "Plan & save",
          "description": "Save up to 25% at Fifth Season Hotels in Europe, the Middle East, Africa and Asia Pacific",
          "action": {
            "label": "Book now",
            "link": "#"
          }
        },
        "canvas": {
          "center": true,
          "maxWidth": 480
        }
      }
    }
  ],
  "faq": [
    {
      "component": "FaqSimple",
      "url": "/component/faq-simple",
      "code": "import React from 'react';\nimport { Container, Title, Accordion, createStyles } from '@mantine/core';\n\nconst useStyles = createStyles((theme, _params, getRef) => {\n  const control = getRef('control');\n\n  return {\n    wrapper: {\n      paddingTop: theme.spacing.xl * 2,\n      paddingBottom: theme.spacing.xl * 2,\n      minHeight: 650,\n    },\n\n    title: {\n      fontWeight: 400,\n      marginBottom: theme.spacing.xl * 1.5,\n    },\n\n    control: {\n      ref: control,\n\n      '&:hover': {\n        backgroundColor: 'transparent',\n      },\n    },\n\n    item: {\n      borderRadius: theme.radius.md,\n      marginBottom: theme.spacing.lg,\n\n      border: `1px solid ${\n        theme.colorScheme === 'dark' ? theme.colors.dark[3] : theme.colors.gray[3]\n      }`,\n    },\n\n    itemOpened: {\n      [`& .${control}`]: {\n        color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 4 : 6],\n      },\n    },\n  };\n});\n\nconst placeholder =\n  'It can’t help but hear a pin drop from over half a mile away, so it lives deep in the mountains where there aren’t many people or Pokémon.It was born from sludge on the ocean floor. In a sterile environment, the germs within its body can’t multiply, and it dies.It has no eyeballs, so it can’t see. It checks its surroundings via the ultrasonic waves it emits from its mouth.';\n\nexport function FaqSimple() {\n  const { classes } = useStyles();\n  return (\n    <Container size=\"sm\" className={classes.wrapper}>\n      <Title align=\"center\" className={classes.title}>\n        Frequently Asked Questions\n      </Title>\n\n      <Accordion\n        iconPosition=\"right\"\n        classNames={{\n          item: classes.item,\n          itemOpened: classes.itemOpened,\n          control: classes.control,\n        }}\n      >\n        <Accordion.Item label=\"How can I reset my password?\">{placeholder}</Accordion.Item>\n        <Accordion.Item label=\"Can I create more that one account?\">{placeholder}</Accordion.Item>\n        <Accordion.Item label=\"Do you store credit card information securely?\">\n          {placeholder}\n        </Accordion.Item>\n        <Accordion.Item label=\"What payment systems to you work with?\">\n          {placeholder}\n        </Accordion.Item>\n        <Accordion.Item label=\"How can I subscribe to monthly newsletter?\">\n          {placeholder}\n        </Accordion.Item>\n      </Accordion>\n    </Container>\n  );\n}\n",
      "attributes": {
        "title": "FAQ simple",
        "category": "faq",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/accordion/",
          "/core/title/",
          "/core/container/"
        ],
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "FaqWithBg",
      "url": "/component/faq-with-bg",
      "code": "import React from 'react';\nimport { createStyles, Title, Container, Accordion, ThemeIcon, Button } from '@mantine/core';\nimport { PlusIcon } from '@primer/octicons-react';\n\nconst useStyles = createStyles((theme, _params, getRef) => {\n  const icon = getRef('control');\n\n  return {\n    wrapper: {\n      paddingTop: theme.spacing.xl * 2,\n      minHeight: 820,\n      backgroundImage: `radial-gradient(${theme.colors[theme.primaryColor][6]} 0%, ${\n        theme.colors[theme.primaryColor][4]\n      } 100%)`,\n      backgroundRepeat: 'no-repeat',\n      backgroundPosition: 'top left',\n      position: 'relative',\n    },\n\n    title: {\n      color: theme.white,\n      fontSize: 52,\n      fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n      marginBottom: theme.spacing.xl * 1.5,\n    },\n\n    item: {\n      marginTop: theme.spacing.xl,\n      backgroundColor: theme.white,\n      borderBottom: 0,\n      borderRadius: theme.radius.md,\n      boxShadow: theme.shadows.lg,\n    },\n\n    control: {\n      fontSize: theme.fontSizes.lg,\n      padding: `${theme.spacing.lg}px ${theme.spacing.xl}px`,\n      color: theme.black,\n\n      '&:hover': {\n        backgroundColor: 'transparent',\n      },\n    },\n\n    content: {\n      paddingLeft: theme.spacing.xl,\n      lineHeight: 1.6,\n      color: theme.black,\n    },\n\n    icon: {\n      ref: icon,\n      marginLeft: theme.spacing.md,\n    },\n\n    gradient: {\n      backgroundImage: `radial-gradient(${theme.colors[theme.primaryColor][6]} 0%, ${\n        theme.colors[theme.primaryColor][5]\n      } 100%)`,\n    },\n\n    itemOpened: {\n      [`& .${icon}`]: {\n        transform: 'rotate(45deg)',\n      },\n    },\n\n    button: {\n      display: 'block',\n      marginTop: theme.spacing.md,\n\n      '@media (max-width: 755px)': {\n        display: 'block',\n        width: '100%',\n      },\n    },\n  };\n});\n\nconst placeholder =\n  'It can’t help but hear a pin drop from over half a mile away, so it lives deep in the mountains where there aren’t many people or Pokémon.It was born from sludge on the ocean floor. In a sterile environment, the germs within its body can’t multiply, and it dies.It has no eyeballs, so it can’t see. It checks its surroundings via the ultrasonic waves it emits from its mouth.';\n\nexport function FaqWithBg() {\n  const { classes, cx } = useStyles();\n  return (\n    <div className={classes.wrapper}>\n      <Container size=\"sm\">\n        <Title align=\"center\" className={classes.title}>\n          Frequently Asked Questions\n        </Title>\n\n        <Accordion\n          iconPosition=\"right\"\n          initialItem={0}\n          classNames={{\n            item: classes.item,\n            itemOpened: classes.itemOpened,\n            control: classes.control,\n            icon: classes.icon,\n            contentInner: classes.content,\n          }}\n          icon={\n            <ThemeIcon radius=\"xl\" className={classes.gradient} size={32}>\n              <PlusIcon size={18} />\n            </ThemeIcon>\n          }\n        >\n          <Accordion.Item label=\"How can I reset my password?\">\n            {placeholder}\n            <Button className={cx(classes.gradient, classes.button)}>Reset password</Button>\n          </Accordion.Item>\n          <Accordion.Item label=\"Can I create more that one account?\">{placeholder}</Accordion.Item>\n          <Accordion.Item label=\"Do you store credit card information securely?\">\n            {placeholder}\n          </Accordion.Item>\n          <Accordion.Item label=\"What payment systems to you work with?\">\n            {placeholder}\n          </Accordion.Item>\n          <Accordion.Item label=\"How can I subscribe to monthly newsletter?\">\n            {placeholder}\n            <Button className={cx(classes.gradient, classes.button)}>\n              Subscribe to newsletter\n            </Button>\n          </Accordion.Item>\n        </Accordion>\n      </Container>\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Faq with background",
        "category": "faq",
        "author": "rtivital",
        "responsive": true,
        "withColor": true,
        "dependencies": [
          "/core/accordion/",
          "/core/title/",
          "/core/container/",
          "/core/accordion/",
          "/core/theme-icon/",
          "/core/button/",
          "/others/decorations/",
          "@primer/octicons-react"
        ],
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "FaqWithHeader",
      "url": "/component/faq-with-header",
      "code": "import React from 'react';\nimport {\n  createStyles,\n  Title,\n  Container,\n  Text,\n  UnstyledButton,\n  Overlay,\n  SimpleGrid,\n} from '@mantine/core';\nimport { ContactIconsList } from '../ContactIcons/ContactIcons';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    paddingTop: theme.spacing.md,\n    paddingBottom: theme.spacing.xl * 2,\n  },\n\n  header: {\n    height: 400,\n    boxSizing: 'border-box',\n    backgroundImage: `linear-gradient(135deg, ${theme.colors[theme.primaryColor][4]} 0%, ${\n      theme.colors[theme.primaryColor][6]\n    } 100%)`,\n    backgroundSize: 'cover',\n    display: 'flex',\n    alignItems: 'flex-end',\n    justifyContent: 'space-between',\n    position: 'relative',\n    padding: `${theme.spacing.xl * 1.5}px ${theme.spacing.xl * 2}px`,\n    borderRadius: theme.radius.lg,\n    marginBottom: theme.spacing.lg,\n\n    '@media (max-width: 1080px)': {\n      height: 'auto',\n      flexDirection: 'column-reverse',\n      alignItems: 'initial',\n      padding: theme.spacing.xl,\n    },\n  },\n\n  title: {\n    color: theme.white,\n    position: 'relative',\n    zIndex: 1,\n    fontSize: 46,\n    fontWeight: 800,\n    letterSpacing: -0.5,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n\n    '@media (max-width: 1080px)': {\n      fontSize: 22,\n      textAlign: 'center',\n      marginTop: theme.spacing.xl,\n    },\n  },\n\n  titleOverlay: {\n    zIndex: 0,\n    position: 'absolute',\n    color: theme.white,\n    fontWeight: 900,\n    opacity: 0.1,\n    fontSize: 320,\n    lineHeight: 1,\n    top: 10,\n    left: 32,\n    pointerEvents: 'none',\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n\n    '@media (max-width: 1080px)': {\n      display: 'none',\n    },\n  },\n\n  contact: {\n    padding: `${theme.spacing.xl * 1.5}px`,\n    backgroundColor: theme.white,\n    borderRadius: theme.radius.lg,\n    boxShadow: theme.shadows.md,\n\n    '@media (max-width: 1080px)': {\n      padding: `${theme.spacing.xl}px`,\n    },\n  },\n\n  contactTitle: {\n    color: theme.black,\n    marginBottom: theme.spacing.xl,\n    lineHeight: 1,\n  },\n\n  categoryCard: {\n    height: 160,\n    position: 'relative',\n    backgroundSize: '100%',\n    backgroundPosition: 'center',\n    color: theme.white,\n    borderRadius: theme.radius.lg,\n    padding: theme.spacing.xl,\n    overflow: 'hidden',\n    transition: 'background-size 300ms ease',\n\n    '&:hover': {\n      backgroundSize: '105%',\n    },\n  },\n\n  categoryLabel: {\n    color: theme.white,\n    zIndex: 2,\n    position: 'relative',\n  },\n}));\n\ninterface FaqWithHeaderProps {\n  categories: { image: string; label: string }[];\n}\n\nexport function FaqWithHeader({ categories }: FaqWithHeaderProps) {\n  const { classes } = useStyles();\n\n  const items = categories.map((category) => (\n    <UnstyledButton\n      style={{ backgroundImage: `url(${category.image})` }}\n      className={classes.categoryCard}\n      key={category.label}\n    >\n      <Overlay color=\"#000\" opacity={0.6} zIndex={1} />\n      <Text size=\"xl\" align=\"center\" weight={700} className={classes.categoryLabel}>\n        {category.label}\n      </Text>\n    </UnstyledButton>\n  ));\n\n  return (\n    <Container className={classes.wrapper} size=\"lg\">\n      <div className={classes.header}>\n        <Title className={classes.title}>Frequently Asked Questions</Title>\n        <Title className={classes.titleOverlay} role=\"presentation\">\n          FAQ\n        </Title>\n\n        <div className={classes.contact}>\n          <Text size=\"xl\" weight={500} className={classes.contactTitle}>\n            Contact us\n          </Text>\n\n          <ContactIconsList />\n        </div>\n      </div>\n\n      <SimpleGrid cols={3} breakpoints={[{ maxWidth: 'sm', cols: 1 }]}>\n        {items}\n      </SimpleGrid>\n    </Container>\n  );\n}\n",
      "attributes": {
        "title": "Faq page header",
        "category": "faq",
        "author": "rtivital",
        "responsive": true,
        "dependencies": [
          "/core/container/",
          "/core/title/",
          "/core/text/",
          "/core/overlay",
          "/core/simple-grid/",
          "/core/button/#unstyled-button",
          "/gallery/component/contact-icons/"
        ],
        "props": {
          "categories": [
            {
              "label": "Customer Support",
              "image": "https://images.unsplash.com/photo-1508780709619-79562169bc64?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=600&q=80"
            },
            {
              "label": "User Guides",
              "image": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=600&q=80"
            },
            {
              "label": "Sales Questions",
              "image": "https://images.unsplash.com/photo-1543286386-713bdd548da4?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=600&q=80"
            }
          ]
        },
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "FaqWithImage",
      "url": "/component/faq-with-image",
      "code": "import React from 'react';\nimport { createStyles, Image, Accordion, Grid, Col, Container, Title } from '@mantine/core';\nimport image from './image.svg';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    paddingTop: theme.spacing.xl * 2,\n    paddingBottom: theme.spacing.xl * 2,\n  },\n\n  title: {\n    marginBottom: theme.spacing.md,\n    paddingLeft: theme.spacing.md,\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n  },\n\n  item: {\n    fontSize: theme.fontSizes.sm,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[1] : theme.colors.gray[7],\n  },\n}));\n\nconst placeholder =\n  'It can’t help but hear a pin drop from over half a mile away, so it lives deep in the mountains where there aren’t many people or Pokémon.';\n\nexport function FaqWithImage() {\n  const { classes } = useStyles();\n  return (\n    <div className={classes.wrapper}>\n      <Container size=\"lg\">\n        <Grid id=\"faq-grid\" gutter={50}>\n          <Col span={12} md={6}>\n            <Image src={image} alt=\"Frequently Asked Questions\" />\n          </Col>\n          <Col span={12} md={6}>\n            <Title order={2} align=\"left\" className={classes.title}>\n              Frequently Asked Questions\n            </Title>\n\n            <Accordion iconPosition=\"right\" initialItem={0}>\n              <Accordion.Item label=\"How can I reset my password?\" className={classes.item}>\n                {placeholder}\n              </Accordion.Item>\n              <Accordion.Item label=\"Can I create more that one account?\" className={classes.item}>\n                {placeholder}\n              </Accordion.Item>\n              <Accordion.Item\n                label=\"How can I subscribe to monthly newsletter?\"\n                className={classes.item}\n              >\n                {placeholder}\n              </Accordion.Item>\n              <Accordion.Item\n                label=\"Do you store credit card information securely?\"\n                className={classes.item}\n              >\n                {placeholder}\n              </Accordion.Item>\n              <Accordion.Item\n                label=\"What payment systems to you work with?\"\n                className={classes.item}\n              >\n                {placeholder}\n              </Accordion.Item>\n            </Accordion>\n          </Col>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Faq with image",
        "category": "faq",
        "author": "rtivital",
        "responsive": true,
        "dependencies": [
          "/core/accordion/",
          "/core/image",
          "/core/grid/",
          "/core/container/",
          "/core/title",
          "https://www.freepik.com/"
        ],
        "canvas": {
          "center": false
        }
      }
    }
  ],
  "features": [
    {
      "component": "FeaturesAsymmetrical",
      "url": "/component/features-asymmetrical",
      "code": "import React from 'react';\nimport { createStyles, Text, SimpleGrid, Container } from '@mantine/core';\nimport { Truck, Certificate, Coin } from 'tabler-icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  feature: {\n    position: 'relative',\n    paddingTop: theme.spacing.xl,\n    paddingLeft: theme.spacing.xl,\n  },\n\n  overlay: {\n    position: 'absolute',\n    height: 100,\n    width: 160,\n    top: 0,\n    left: 0,\n    backgroundColor:\n      theme.colorScheme === 'dark'\n        ? theme.fn.rgba(theme.colors[theme.primaryColor][7], 0.2)\n        : theme.colors[theme.primaryColor][0],\n    zIndex: 1,\n  },\n\n  content: {\n    position: 'relative',\n    zIndex: 2,\n  },\n\n  icon: {\n    color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 4 : 6],\n  },\n\n  title: {\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n  },\n}));\n\ninterface FeatureProps extends React.ComponentPropsWithoutRef<'div'> {\n  icon: React.FC<React.ComponentProps<typeof Truck>>;\n  title: string;\n  description: string;\n}\n\nfunction Feature({ icon: Icon, title, description, className, ...others }: FeatureProps) {\n  const { classes, cx } = useStyles();\n\n  return (\n    <div className={cx(classes.feature, className)} {...others}>\n      <div className={classes.overlay} />\n\n      <div className={classes.content}>\n        <Icon size={38} className={classes.icon} />\n        <Text weight={700} size=\"lg\" mb=\"xs\" mt={5} className={classes.title}>\n          {title}\n        </Text>\n        <Text color=\"dimmed\" size=\"sm\">\n          {description}\n        </Text>\n      </div>\n    </div>\n  );\n}\n\nconst mockdata = [\n  {\n    icon: Truck,\n    title: 'Free Worldwide shipping',\n    description:\n      'As electricity builds up inside its body, it becomes more aggressive. One theory is that the electricity.',\n  },\n  {\n    icon: Certificate,\n    title: 'Best Quality Product',\n    description:\n      'Slakoth’s heart beats just once a minute. Whatever happens, it is content to loaf around motionless.',\n  },\n  {\n    icon: Coin,\n    title: 'Very Affordable Pricing',\n    description:\n      'Thought to have gone extinct, Relicanth was given a name that is a variation of the name of the person who discovered.',\n  },\n];\n\nexport function FeaturesAsymmetrical() {\n  const items = mockdata.map((item) => <Feature {...item} key={item.title} />);\n\n  return (\n    <Container mt={30} mb={30} size=\"lg\">\n      <SimpleGrid cols={3} breakpoints={[{ maxWidth: 'sm', cols: 1 }]} spacing={50}>\n        {items}\n      </SimpleGrid>\n    </Container>\n  );\n}\n",
      "attributes": {
        "title": "Features with icons",
        "category": "features",
        "author": "rtivital",
        "responsive": true,
        "withColor": true,
        "dependencies": [
          "/core/text/",
          "/core/simple-grid/",
          "/core/container",
          "tabler-icons-react"
        ],
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "FeaturesGrid",
      "url": "/component/features-grid",
      "code": "import React from 'react';\nimport {\n  ThemeIcon,\n  Text,\n  Title,\n  Container,\n  SimpleGrid,\n  useMantineTheme,\n  createStyles,\n} from '@mantine/core';\nimport { MOCKDATA } from './mockdata';\n\ninterface FeatureProps {\n  icon: React.FC<any>;\n  title: React.ReactNode;\n  description: React.ReactNode;\n}\n\nexport function Feature({\n  icon: Icon,\n  title,\n  description,\n  ...others\n}: FeatureProps & Omit<React.ComponentPropsWithoutRef<'div'>, keyof FeatureProps>) {\n  const theme = useMantineTheme();\n  return (\n    <div {...others}>\n      <ThemeIcon variant=\"light\" size={40} radius={40}>\n        <Icon style={{ width: 20, height: 20 }} />\n      </ThemeIcon>\n      <Text style={{ marginTop: theme.spacing.sm, marginBottom: 7 }}>{title}</Text>\n      <Text size=\"sm\" color=\"dimmed\" style={{ lineHeight: 1.6 }}>\n        {description}\n      </Text>\n    </div>\n  );\n}\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    paddingTop: theme.spacing.xl * 4,\n    paddingBottom: theme.spacing.xl * 4,\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    fontWeight: 900,\n    marginBottom: theme.spacing.md,\n    textAlign: 'center',\n\n    '@media (max-width: 755px)': {\n      fontSize: 28,\n      textAlign: 'left',\n    },\n  },\n\n  description: {\n    textAlign: 'center',\n\n    '@media (max-width: 755px)': {\n      textAlign: 'left',\n    },\n  },\n\n  features: {\n    marginTop: `${theme.spacing.xl}px !important`,\n  },\n}));\n\ninterface FeaturesGridProps {\n  title: React.ReactNode;\n  description: React.ReactNode;\n  data?: FeatureProps[];\n}\n\nexport function FeaturesGrid({ title, description, data = MOCKDATA }: FeaturesGridProps) {\n  const { classes } = useStyles();\n  const theme = useMantineTheme();\n  const features = data.map((feature, index) => <Feature {...feature} key={index} />);\n\n  return (\n    <Container className={classes.wrapper}>\n      <Title className={classes.title}>{title}</Title>\n\n      <Container size={560} padding={0}>\n        <Text size=\"sm\" className={classes.description}>\n          {description}\n        </Text>\n      </Container>\n\n      <SimpleGrid\n        className={classes.features}\n        cols={3}\n        spacing={theme.spacing.xl * 2}\n        breakpoints={[\n          { maxWidth: 980, cols: 2, spacing: 'xl' },\n          { maxWidth: 755, cols: 1, spacing: 'xl' },\n        ]}\n      >\n        {features}\n      </SimpleGrid>\n    </Container>\n  );\n}\n",
      "attributes": {
        "title": "Features with monotone icons",
        "category": "features",
        "author": "rtivital",
        "responsive": true,
        "withColor": true,
        "dependencies": [
          "/core/theme-icon/",
          "/core/title/",
          "/core/text/",
          "/core/container/",
          "/core/simple-grid/",
          "@modulz/radix-icons"
        ],
        "props": {
          "title": "Integrate effortlessly with any technology stack",
          "description": "Every once in a while, you’ll see a Golbat that’s missing some fangs. This happens when hunger drives it to try biting a Steel-type Pokémon."
        },
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "FeaturesImages",
      "url": "/component/features-images",
      "code": "import React from 'react';\nimport { Image, Text, Container, ThemeIcon, Title, SimpleGrid, createStyles } from '@mantine/core';\nimport IMAGES from './images';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    paddingTop: 80,\n    paddingBottom: 50,\n  },\n\n  item: {\n    display: 'flex',\n  },\n\n  itemIcon: {\n    padding: theme.spacing.xs,\n    marginRight: theme.spacing.md,\n  },\n\n  itemTitle: {\n    marginBottom: theme.spacing.xs / 2,\n  },\n\n  supTitle: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontWeight: 800,\n    fontSize: theme.fontSizes.sm,\n    color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 4 : 8],\n    letterSpacing: 0.5,\n  },\n\n  title: {\n    lineHeight: 1,\n    textAlign: 'center',\n    marginTop: theme.spacing.xl,\n  },\n\n  description: {\n    textAlign: 'center',\n    marginTop: theme.spacing.xs,\n  },\n\n  highlight: {\n    backgroundColor:\n      theme.colorScheme === 'dark'\n        ? theme.fn.rgba(theme.colors[theme.primaryColor][6], 0.55)\n        : theme.colors[theme.primaryColor][0],\n    padding: 5,\n    paddingTop: 0,\n    borderRadius: theme.radius.sm,\n    display: 'inline-block',\n    color: theme.colorScheme === 'dark' ? theme.white : 'inherit',\n  },\n}));\n\ninterface FeatureImage {\n  image: string;\n  title: React.ReactNode;\n  description: React.ReactNode;\n}\n\ninterface FeaturesImagesProps {\n  supTitle: React.ReactNode;\n  description: React.ReactNode;\n  data: FeatureImage[];\n}\n\nexport function FeaturesImages({ supTitle, description, data }: FeaturesImagesProps) {\n  const { classes } = useStyles();\n\n  const items = data.map((item) => (\n    <div className={classes.item} key={item.image}>\n      <ThemeIcon variant=\"light\" className={classes.itemIcon} size={60} radius=\"md\">\n        <Image src={IMAGES[item.image]} />\n      </ThemeIcon>\n\n      <div>\n        <Text weight={700} size=\"lg\" className={classes.itemTitle}>\n          {item.title}\n        </Text>\n        <Text color=\"dimmed\">{item.description}</Text>\n      </div>\n    </div>\n  ));\n\n  return (\n    <Container size={700} className={classes.wrapper}>\n      <Text className={classes.supTitle}>{supTitle}</Text>\n\n      <Title className={classes.title} order={2}>\n        PharmLand is <span className={classes.highlight}>not</span> just for pharmacists\n      </Title>\n\n      <Container size={660} padding={0}>\n        <Text color=\"dimmed\" className={classes.description}>\n          {description}\n        </Text>\n      </Container>\n\n      <SimpleGrid\n        cols={2}\n        spacing={50}\n        breakpoints={[{ maxWidth: 550, cols: 1, spacing: 40 }]}\n        style={{ marginTop: 30 }}\n      >\n        {items}\n      </SimpleGrid>\n    </Container>\n  );\n}\n",
      "attributes": {
        "title": "Features with image icons",
        "category": "features",
        "author": "rtivital",
        "responsive": true,
        "withColor": true,
        "dependencies": [
          "/core/theme-icon/",
          "/core/title/",
          "/core/text/",
          "/core/container/",
          "/core/simple-grid/",
          "/core/image/",
          "https://www.flaticon.com/"
        ],
        "props": {
          "supTitle": "Use cases",
          "description": "Its lungs contain an organ that creates electricity. The crackling sound of electricity can be heard when it exhales. Azurill’s tail is large and bouncy. It is packed full of the nutrients this Pokémon needs to grow.",
          "data": [
            {
              "image": "auditors",
              "title": "Pharmacists",
              "description": "Azurill can be seen bouncing and playing on its big, rubbery tail"
            },
            {
              "image": "lawyers",
              "title": "Lawyers",
              "description": "Fans obsess over the particular length and angle of its arms"
            },
            {
              "image": "accountants",
              "title": "Bank owners",
              "description": "They divvy up their prey evenly among the members of their pack"
            },
            {
              "image": "others",
              "title": "Others",
              "description": "Phanpy uses its long nose to shower itself"
            }
          ]
        },
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "FeaturesTitle",
      "url": "/component/features-title",
      "code": "import React from 'react';\nimport { createStyles, Title, SimpleGrid, Text, Button, ThemeIcon, Grid, Col } from '@mantine/core';\nimport { IssueDraftIcon, FileCodeIcon, LawIcon, FlameIcon } from '@primer/octicons-react';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    padding: `${theme.spacing.xl * 2}px ${theme.spacing.xl}px`,\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    fontSize: 36,\n    fontWeight: 900,\n    lineHeight: 1.1,\n    marginBottom: theme.spacing.md,\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n  },\n}));\n\nconst features = [\n  {\n    icon: LawIcon,\n    title: 'Free and open source',\n    description: 'All packages are published under MIT license, you can use Mantine in any project',\n  },\n  {\n    icon: FileCodeIcon,\n    title: 'TypeScript based',\n    description: 'Build type safe applications, all components and hooks export types',\n  },\n  {\n    icon: IssueDraftIcon,\n    title: 'No annoying focus ring',\n    description:\n      'With new :focus-visible selector focus ring will appear only when user navigates with keyboard',\n  },\n  {\n    icon: FlameIcon,\n    title: 'Flexible',\n    description:\n      'Customize colors, spacing, shadows, fonts and many other settings with global theme object',\n  },\n];\n\nexport function FeaturesTitle() {\n  const { classes } = useStyles();\n\n  const items = features.map((feature) => (\n    <div key={feature.title}>\n      <ThemeIcon\n        size={44}\n        radius=\"md\"\n        variant=\"gradient\"\n        gradient={{ deg: 133, from: 'blue', to: 'cyan' }}\n      >\n        <feature.icon size={26} />\n      </ThemeIcon>\n      <Text size=\"lg\" mt=\"sm\" weight={500}>\n        {feature.title}\n      </Text>\n      <Text color=\"dimmed\" size=\"sm\">\n        {feature.description}\n      </Text>\n    </div>\n  ));\n\n  return (\n    <div className={classes.wrapper}>\n      <Grid gutter={80}>\n        <Col span={12} md={5}>\n          <Title className={classes.title} order={2}>\n            A fully featured React components library for your next project\n          </Title>\n          <Text color=\"dimmed\">\n            Build fully functional accessible web applications faster than ever – Mantine includes\n            more than 120 customizable components and hooks to cover you in any situation\n          </Text>\n\n          <Button\n            variant=\"gradient\"\n            gradient={{ deg: 133, from: 'blue', to: 'cyan' }}\n            size=\"lg\"\n            radius=\"md\"\n            mt=\"xl\"\n          >\n            Get started\n          </Button>\n        </Col>\n        <Col span={12} md={7}>\n          <SimpleGrid cols={2} spacing={30} breakpoints={[{ maxWidth: 'md', cols: 1 }]}>\n            {items}\n          </SimpleGrid>\n        </Col>\n      </Grid>\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Features with title",
        "category": "features",
        "author": "rtivital",
        "responsive": true,
        "dependencies": [
          "/core/title/",
          "/core/grid/",
          "/core/simple-grid/",
          "/core/button/",
          "/core/text/",
          "/core/theme-icon/",
          "@primer/octicons-react"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 1060
        }
      }
    }
  ],
  "footers": [
    {
      "component": "FooterCentered",
      "url": "/component/footer-centered",
      "code": "import React from 'react';\nimport { createStyles, Anchor, Group, UnstyledButton } from '@mantine/core';\nimport { GitHubLogoIcon, TwitterLogoIcon } from '@modulz/radix-icons';\nimport { MantineLogo } from '../../shared/MantineLogo';\n\nconst useStyles = createStyles((theme) => ({\n  footer: {\n    marginTop: 120,\n    borderTop: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[2]\n    }`,\n  },\n\n  inner: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: `${theme.spacing.md}px ${theme.spacing.md}px`,\n\n    [theme.fn.smallerThan('sm')]: {\n      flexDirection: 'column',\n    },\n  },\n\n  socialButton: {\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[1] : theme.colors.gray[5],\n    borderRadius: theme.radius.sm,\n    padding: 5,\n\n    '&:hover': {\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    },\n\n    '& > svg': {\n      display: 'block',\n      width: 18,\n      height: 18,\n    },\n  },\n\n  links: {\n    [theme.fn.smallerThan('sm')]: {\n      marginTop: theme.spacing.lg,\n      marginBottom: theme.spacing.sm,\n    },\n  },\n}));\n\ninterface FooterCenteredProps {\n  links: { link: string; label: string }[];\n}\n\nexport function FooterCentered({ links }: FooterCenteredProps) {\n  const { classes } = useStyles();\n  const items = links.map((link) => (\n    <Anchor<'a'>\n      color=\"dimmed\"\n      key={link.label}\n      href={link.link}\n      sx={{ lineHeight: 1 }}\n      onClick={(event) => event.preventDefault()}\n      size=\"sm\"\n    >\n      {link.label}\n    </Anchor>\n  ));\n\n  return (\n    <div className={classes.footer}>\n      <div className={classes.inner}>\n        <MantineLogo />\n\n        <Group className={classes.links}>{items}</Group>\n\n        <Group spacing={5}>\n          <UnstyledButton color=\"dimmed\" className={classes.socialButton}>\n            <GitHubLogoIcon />\n          </UnstyledButton>\n          <UnstyledButton color=\"dimmed\" className={classes.socialButton}>\n            <TwitterLogoIcon />\n          </UnstyledButton>\n        </Group>\n      </div>\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Footer with centered links",
        "category": "footers",
        "author": "rtivital",
        "responsive": true,
        "dependencies": [
          "/core/group/",
          "/core/anchor/",
          "/core/button/#unstyled-button",
          "@modulz/radix-icons"
        ],
        "props": {
          "links": [
            {
              "link": "#",
              "label": "Contact"
            },
            {
              "link": "#",
              "label": "Privacy"
            },
            {
              "link": "#",
              "label": "Blog"
            },
            {
              "link": "#",
              "label": "Store"
            },
            {
              "link": "#",
              "label": "Careers"
            }
          ]
        },
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "FooterSimple",
      "url": "/component/footer-simple",
      "code": "import React from 'react';\nimport { createStyles, Container, Group, Anchor } from '@mantine/core';\nimport { MantineLogo } from '../../shared/MantineLogo';\n\nconst useStyles = createStyles((theme) => ({\n  footer: {\n    marginTop: 120,\n    borderTop: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[2]\n    }`,\n  },\n\n  inner: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingTop: theme.spacing.xl,\n    paddingBottom: theme.spacing.xl,\n\n    [theme.fn.smallerThan('xs')]: {\n      flexDirection: 'column',\n    },\n  },\n\n  links: {\n    [theme.fn.smallerThan('xs')]: {\n      marginTop: theme.spacing.md,\n    },\n  },\n}));\n\ninterface FooterSimpleProps {\n  links: { link: string; label: string }[];\n}\n\nexport function FooterSimple({ links }: FooterSimpleProps) {\n  const { classes } = useStyles();\n  const items = links.map((link) => (\n    <Anchor<'a'>\n      color=\"dimmed\"\n      key={link.label}\n      href={link.link}\n      onClick={(event) => event.preventDefault()}\n      size=\"sm\"\n    >\n      {link.label}\n    </Anchor>\n  ));\n\n  return (\n    <div className={classes.footer}>\n      <Container className={classes.inner}>\n        <MantineLogo />\n        <Group className={classes.links}>{items}</Group>\n      </Container>\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Simple footer",
        "category": "footers",
        "author": "rtivital",
        "responsive": true,
        "dependencies": [
          "/core/container/",
          "/core/group/",
          "/core/anchor/"
        ],
        "props": {
          "links": [
            {
              "link": "#",
              "label": "Contact"
            },
            {
              "link": "#",
              "label": "Privacy"
            },
            {
              "link": "#",
              "label": "Blog"
            },
            {
              "link": "#",
              "label": "Careers"
            }
          ]
        },
        "canvas": {
          "center": false
        }
      }
    }
  ],
  "grids": [
    {
      "component": "GridAsymmetrical",
      "url": "/component/grid-asymmetrical",
      "code": "import React from 'react';\nimport { Grid, Skeleton, Container } from '@mantine/core';\n\nconst child = <Skeleton height={140} radius=\"md\" animate={false} />;\n\nexport function GridAsymmetrical() {\n  return (\n    <Container my=\"md\">\n      <Grid>\n        <Grid.Col xs={4}>{child}</Grid.Col>\n        <Grid.Col xs={8}>{child}</Grid.Col>\n        <Grid.Col xs={8}>{child}</Grid.Col>\n        <Grid.Col xs={4}>{child}</Grid.Col>\n        <Grid.Col xs={3}>{child}</Grid.Col>\n        <Grid.Col xs={3}>{child}</Grid.Col>\n        <Grid.Col xs={6}>{child}</Grid.Col>\n      </Grid>\n    </Container>\n  );\n}\n",
      "attributes": {
        "title": "Grid with asymmetrical columns",
        "category": "grids",
        "author": "rtivital",
        "responsive": true,
        "dependencies": [
          "/core/grid/",
          "/core/skeleton/",
          "/core/container/"
        ],
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "LeadGrid",
      "url": "/component/lead-grid",
      "code": "import React from 'react';\nimport { Container, Grid, SimpleGrid, Skeleton, useMantineTheme } from '@mantine/core';\n\nconst PRIMARY_COL_HEIGHT = 300;\n\nexport function LeadGrid() {\n  const theme = useMantineTheme();\n  const SECONDARY_COL_HEIGHT = PRIMARY_COL_HEIGHT / 2 - theme.spacing.md / 2;\n\n  return (\n    <Container my=\"md\">\n      <SimpleGrid cols={2} spacing=\"md\" breakpoints={[{ maxWidth: 'sm', cols: 1 }]}>\n        <Skeleton height={PRIMARY_COL_HEIGHT} radius=\"md\" animate={false} />\n        <Grid gutter=\"md\">\n          <Grid.Col>\n            <Skeleton height={SECONDARY_COL_HEIGHT} radius=\"md\" animate={false} />\n          </Grid.Col>\n          <Grid.Col span={6}>\n            <Skeleton height={SECONDARY_COL_HEIGHT} radius=\"md\" animate={false} />\n          </Grid.Col>\n          <Grid.Col span={6}>\n            <Skeleton height={SECONDARY_COL_HEIGHT} radius=\"md\" animate={false} />\n          </Grid.Col>\n        </Grid>\n      </SimpleGrid>\n    </Container>\n  );\n}\n",
      "attributes": {
        "title": "Grid with leading item",
        "category": "grids",
        "author": "rtivital",
        "responsive": true,
        "dependencies": [
          "/core/simple-grid/",
          "/core/grid/",
          "/core/"
        ],
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "Subgrid",
      "url": "/component/subgrid",
      "code": "import React from 'react';\nimport { SimpleGrid, Skeleton, Container, Group, useMantineTheme } from '@mantine/core';\n\nconst getChild = (height: number) => <Skeleton height={height} radius=\"md\" animate={false} />;\nconst BASE_HEIGHT = 360;\nconst getSubHeight = (children: number, spacing: number) =>\n  BASE_HEIGHT / children - spacing * ((children - 1) / children);\n\nexport function Subgrid() {\n  const theme = useMantineTheme();\n  return (\n    <Container my=\"md\">\n      <SimpleGrid cols={4} breakpoints={[{ maxWidth: 'xs', cols: 1 }]}>\n        {getChild(BASE_HEIGHT)}\n        <Group direction=\"column\">\n          {getChild(getSubHeight(2, theme.spacing.md))}\n          {getChild(getSubHeight(2, theme.spacing.md))}\n        </Group>\n        <Group direction=\"column\">\n          {getChild(getSubHeight(3, theme.spacing.md))}\n          {getChild(getSubHeight(3, theme.spacing.md))}\n          {getChild(getSubHeight(3, theme.spacing.md))}\n        </Group>\n        {getChild(BASE_HEIGHT)}\n      </SimpleGrid>\n    </Container>\n  );\n}\n",
      "attributes": {
        "title": "Grid with vertical items",
        "category": "grids",
        "author": "rtivital",
        "responsive": true,
        "dependencies": [
          "/core/simple-grid/",
          "/core/skeleton/",
          "/core/container/"
        ],
        "canvas": {
          "center": false
        }
      }
    }
  ],
  "hero": [
    {
      "component": "HeroBullets",
      "url": "/component/hero-bullets",
      "code": "import React from 'react';\nimport {\n  createStyles,\n  Image,\n  Container,\n  Title,\n  Button,\n  Group,\n  Text,\n  List,\n  ThemeIcon,\n} from '@mantine/core';\nimport { Check } from 'tabler-icons-react';\nimport image from './image.svg';\n\nconst useStyles = createStyles((theme) => ({\n  inner: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    paddingTop: theme.spacing.xl * 4,\n    paddingBottom: theme.spacing.xl * 4,\n  },\n\n  content: {\n    maxWidth: 480,\n    marginRight: theme.spacing.xl * 3,\n\n    [theme.fn.smallerThan('md')]: {\n      maxWidth: '100%',\n      marginRight: 0,\n    },\n  },\n\n  title: {\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    fontSize: 44,\n    lineHeight: 1.2,\n    fontWeight: 900,\n\n    [theme.fn.smallerThan('xs')]: {\n      fontSize: 28,\n    },\n  },\n\n  control: {\n    [theme.fn.smallerThan('xs')]: {\n      flex: 1,\n    },\n  },\n\n  image: {\n    flex: 1,\n\n    [theme.fn.smallerThan('md')]: {\n      display: 'none',\n    },\n  },\n\n  highlight: {\n    position: 'relative',\n    backgroundColor:\n      theme.colorScheme === 'dark'\n        ? theme.fn.rgba(theme.colors[theme.primaryColor][6], 0.55)\n        : theme.colors[theme.primaryColor][0],\n    borderRadius: theme.radius.sm,\n    padding: '4px 12px',\n  },\n}));\n\nexport function HeroBullets() {\n  const { classes } = useStyles();\n  return (\n    <div>\n      <Container>\n        <div className={classes.inner}>\n          <div className={classes.content}>\n            <Title className={classes.title}>\n              A <span className={classes.highlight}>modern</span> React <br /> components library\n            </Title>\n            <Text color=\"dimmed\" mt=\"md\">\n              Build fully functional accessible web applications faster than ever – Mantine includes\n              more than 120 customizable components and hooks to cover you in any situation\n            </Text>\n\n            <List\n              mt={30}\n              spacing=\"sm\"\n              size=\"sm\"\n              icon={\n                <ThemeIcon size={20} radius=\"xl\">\n                  <Check size={12} />\n                </ThemeIcon>\n              }\n            >\n              <List.Item>\n                <b>TypeScript based</b> – build type safe applications, all components and hooks\n                export types\n              </List.Item>\n              <List.Item>\n                <b>Free and open source</b> – all packages have MIT license, you can use Mantine in\n                any project\n              </List.Item>\n              <List.Item>\n                <b>No annoying focus ring</b> – focus ring will appear only when user navigates with\n                keyboard\n              </List.Item>\n            </List>\n\n            <Group mt={30}>\n              <Button radius=\"xl\" size=\"md\" className={classes.control}>\n                Get started\n              </Button>\n              <Button variant=\"default\" radius=\"xl\" size=\"md\" className={classes.control}>\n                Source code\n              </Button>\n            </Group>\n          </div>\n          <Image src={image} className={classes.image} />\n        </div>\n      </Container>\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Hero with bullets",
        "category": "hero",
        "author": "rtivital",
        "withColor": true,
        "responsive": true,
        "dependencies": [
          "/core/container/",
          "/core/image/",
          "/core/list/",
          "/core/title/",
          "/core/theme-icon/",
          "/core/button/",
          "/core/group/",
          "/core/text/",
          "tabler-icons-react",
          "https://www.freepik.com/"
        ],
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "HeroContentLeft",
      "url": "/component/hero-content-left",
      "code": "import React from 'react';\nimport { createStyles, Overlay, Container, Title, Button, Text } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  hero: {\n    position: 'relative',\n    backgroundImage:\n      'url(https://images.unsplash.com/photo-1519389950473-47ba0277781c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80)',\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n\n  container: {\n    height: 700,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-end',\n    alignItems: 'flex-start',\n    paddingBottom: theme.spacing.xl * 6,\n    zIndex: 1,\n    position: 'relative',\n\n    [theme.fn.smallerThan('sm')]: {\n      height: 500,\n      paddingBottom: theme.spacing.xl * 3,\n    },\n  },\n\n  title: {\n    color: theme.white,\n    fontSize: 60,\n    fontWeight: 900,\n    lineHeight: 1.1,\n\n    [theme.fn.smallerThan('sm')]: {\n      fontSize: 40,\n      lineHeight: 1.2,\n    },\n\n    [theme.fn.smallerThan('xs')]: {\n      fontSize: 28,\n      lineHeight: 1.3,\n    },\n  },\n\n  description: {\n    color: theme.white,\n    maxWidth: 600,\n\n    [theme.fn.smallerThan('sm')]: {\n      maxWidth: '100%',\n      fontSize: theme.fontSizes.sm,\n    },\n  },\n\n  control: {\n    marginTop: theme.spacing.xl * 1.5,\n\n    [theme.fn.smallerThan('sm')]: {\n      width: '100%',\n    },\n  },\n}));\n\nexport function HeroContentLeft() {\n  const { classes } = useStyles();\n\n  return (\n    <div className={classes.hero}>\n      <Overlay\n        gradient=\"linear-gradient(180deg, rgba(0, 0, 0, 0.25) 0%, rgba(0, 0, 0, .65) 40%)\"\n        opacity={1}\n        zIndex={0}\n      />\n      <Container className={classes.container}>\n        <Title className={classes.title}>A fully featured React components library</Title>\n        <Text className={classes.description} size=\"xl\" mt=\"xl\">\n          Build fully functional accessible web applications faster than ever – Mantine includes\n          more than 120 customizable components and hooks to cover you in any situation\n        </Text>\n\n        <Button variant=\"gradient\" size=\"xl\" radius=\"xl\" className={classes.control}>\n          Get started\n        </Button>\n      </Container>\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Hero with content on left",
        "category": "hero",
        "author": "rtivital",
        "responsive": true,
        "dependencies": [
          "/core/container/",
          "/core/button/",
          "/core/title/",
          "/core/text/",
          "/core/overlay/"
        ],
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "HeroImageBackground",
      "url": "/component/hero-image-background",
      "code": "import React from 'react';\nimport { Title, Text, Container, Button, Overlay, createStyles } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    position: 'relative',\n    paddingTop: 180,\n    paddingBottom: 130,\n    backgroundImage:\n      'url(https://images.unsplash.com/photo-1573164713988-8665fc963095?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=980&q=80)',\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n\n    '@media (max-width: 520px)': {\n      paddingTop: 80,\n      paddingBottom: 50,\n    },\n  },\n\n  inner: {\n    position: 'relative',\n    zIndex: 1,\n  },\n\n  title: {\n    fontWeight: 800,\n    fontSize: 40,\n    letterSpacing: -1,\n    paddingLeft: theme.spacing.md,\n    paddingRight: theme.spacing.md,\n    color: theme.white,\n    marginBottom: theme.spacing.xs,\n    textAlign: 'center',\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n\n    '@media (max-width: 520px)': {\n      fontSize: 28,\n      textAlign: 'left',\n    },\n  },\n\n  highlight: {\n    color: theme.colors[theme.primaryColor][4],\n  },\n\n  description: {\n    color: theme.colors.gray[0],\n    textAlign: 'center',\n\n    '@media (max-width: 520px)': {\n      fontSize: theme.fontSizes.md,\n      textAlign: 'left',\n    },\n  },\n\n  controls: {\n    marginTop: theme.spacing.xl * 1.5,\n    display: 'flex',\n    justifyContent: 'center',\n    paddingLeft: theme.spacing.md,\n    paddingRight: theme.spacing.md,\n\n    '@media (max-width: 520px)': {\n      flexDirection: 'column',\n    },\n  },\n\n  control: {\n    height: 42,\n    fontSize: theme.fontSizes.md,\n\n    '&:not(:first-of-type)': {\n      marginLeft: theme.spacing.md,\n    },\n\n    '@media (max-width: 520px)': {\n      '&:not(:first-of-type)': {\n        marginTop: theme.spacing.md,\n        marginLeft: 0,\n      },\n    },\n  },\n\n  secondaryControl: {\n    color: theme.white,\n    backgroundColor: 'rgba(255, 255, 255, .4)',\n\n    '&:hover': {\n      backgroundColor: 'rgba(255, 255, 255, .45) !important',\n    },\n  },\n}));\n\nexport function HeroImageBackground() {\n  const { classes, cx } = useStyles();\n\n  return (\n    <div className={classes.wrapper}>\n      <Overlay color=\"#000\" opacity={0.65} zIndex={1} />\n\n      <div className={classes.inner}>\n        <Title className={classes.title}>\n          Automated AI code reviews for{' '}\n          <Text component=\"span\" inherit className={classes.highlight}>\n            any stack\n          </Text>\n        </Title>\n\n        <Container size={640}>\n          <Text size=\"lg\" className={classes.description}>\n            Build more reliable software with AI companion. AI is also trained to detect lazy\n            developers who do nothing and just complain on Twitter.\n          </Text>\n        </Container>\n\n        <div className={classes.controls}>\n          <Button className={classes.control} variant=\"white\" size=\"lg\">\n            Get started\n          </Button>\n          <Button className={cx(classes.control, classes.secondaryControl)} size=\"lg\">\n            Live demo\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Hero with background image",
        "category": "hero",
        "author": "rtivital",
        "responsive": true,
        "withColor": true,
        "dependencies": [
          "/core/text/",
          "/core/title/",
          "/core/button/",
          "/core/container/",
          "/core/group/",
          "@modulz/radix-icons"
        ],
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "HeroImageRight",
      "url": "/component/hero-image-right",
      "code": "import React from 'react';\nimport { createStyles, Image, Container, Title, Text, Button } from '@mantine/core';\nimport image from './image.webp';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    backgroundColor: '#11284b',\n    backgroundImage:\n      \"url(\\\"data:image/svg+xml,%3Csvg width='120' height='120' viewBox='0 0 120 120' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M9 0h2v20H9V0zm25.134.84l1.732 1-10 17.32-1.732-1 10-17.32zm-20 20l1.732 1-10 17.32-1.732-1 10-17.32zM58.16 4.134l1 1.732-17.32 10-1-1.732 17.32-10zm-40 40l1 1.732-17.32 10-1-1.732 17.32-10zM80 9v2H60V9h20zM20 69v2H0v-2h20zm79.32-55l-1 1.732-17.32-10L82 4l17.32 10zm-80 80l-1 1.732-17.32-10L2 84l17.32 10zm96.546-75.84l-1.732 1-10-17.32 1.732-1 10 17.32zm-100 100l-1.732 1-10-17.32 1.732-1 10 17.32zM38.16 24.134l1 1.732-17.32 10-1-1.732 17.32-10zM60 29v2H40v-2h20zm19.32 5l-1 1.732-17.32-10L62 24l17.32 10zm16.546 4.16l-1.732 1-10-17.32 1.732-1 10 17.32zM111 40h-2V20h2v20zm3.134.84l1.732 1-10 17.32-1.732-1 10-17.32zM40 49v2H20v-2h20zm19.32 5l-1 1.732-17.32-10L42 44l17.32 10zm16.546 4.16l-1.732 1-10-17.32 1.732-1 10 17.32zM91 60h-2V40h2v20zm3.134.84l1.732 1-10 17.32-1.732-1 10-17.32zm24.026 3.294l1 1.732-17.32 10-1-1.732 17.32-10zM39.32 74l-1 1.732-17.32-10L22 64l17.32 10zm16.546 4.16l-1.732 1-10-17.32 1.732-1 10 17.32zM71 80h-2V60h2v20zm3.134.84l1.732 1-10 17.32-1.732-1 10-17.32zm24.026 3.294l1 1.732-17.32 10-1-1.732 17.32-10zM120 89v2h-20v-2h20zm-84.134 9.16l-1.732 1-10-17.32 1.732-1 10 17.32zM51 100h-2V80h2v20zm3.134.84l1.732 1-10 17.32-1.732-1 10-17.32zm24.026 3.294l1 1.732-17.32 10-1-1.732 17.32-10zM100 109v2H80v-2h20zm19.32 5l-1 1.732-17.32-10 1-1.732 17.32 10zM31 120h-2v-20h2v20z' fill='%23ffffff' fill-opacity='0.05' fill-rule='evenodd'/%3E%3C/svg%3E\\\")\",\n    paddingTop: theme.spacing.xl * 3,\n    paddingBottom: theme.spacing.xl * 3,\n  },\n\n  inner: {\n    display: 'flex',\n    justifyContent: 'space-between',\n\n    [theme.fn.smallerThan('md')]: {\n      flexDirection: 'column',\n    },\n  },\n\n  image: {\n    [theme.fn.smallerThan('md')]: {\n      display: 'none',\n    },\n  },\n\n  content: {\n    paddingTop: theme.spacing.xl * 2,\n    paddingBottom: theme.spacing.xl * 2,\n    marginRight: theme.spacing.xl * 3,\n\n    [theme.fn.smallerThan('md')]: {\n      marginRight: 0,\n    },\n  },\n\n  title: {\n    color: theme.white,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    fontWeight: 900,\n    lineHeight: 1.15,\n    maxWidth: 500,\n    fontSize: 42,\n\n    [theme.fn.smallerThan('md')]: {\n      maxWidth: '100%',\n    },\n  },\n\n  description: {\n    color: theme.white,\n    opacity: 0.75,\n    maxWidth: 500,\n\n    [theme.fn.smallerThan('md')]: {\n      maxWidth: '100%',\n    },\n  },\n\n  control: {\n    paddingLeft: 50,\n    paddingRight: 50,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    fontSize: 22,\n\n    [theme.fn.smallerThan('md')]: {\n      width: '100%',\n    },\n  },\n}));\n\nexport function HeroImageRight() {\n  const { classes } = useStyles();\n  return (\n    <div className={classes.root}>\n      <Container size=\"lg\">\n        <div className={classes.inner}>\n          <div className={classes.content}>\n            <Title className={classes.title}>\n              A{' '}\n              <Text\n                component=\"span\"\n                inherit\n                variant=\"gradient\"\n                gradient={{ from: 'pink', to: 'yellow' }}\n              >\n                fully featured\n              </Text>{' '}\n              React components library\n            </Title>\n\n            <Text className={classes.description} mt={30}>\n              Build fully functional accessible web applications with ease – Mantine includes more\n              than 100 customizable components and hooks to cover you in any situation\n            </Text>\n\n            <Button\n              variant=\"gradient\"\n              gradient={{ from: 'pink', to: 'yellow' }}\n              size=\"xl\"\n              className={classes.control}\n              mt={40}\n            >\n              Get started\n            </Button>\n          </div>\n          <Image\n            src={image.src}\n            role=\"presentation\"\n            height={400}\n            width={400}\n            className={classes.image}\n          />\n        </div>\n      </Container>\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Hero with image on the right",
        "category": "hero",
        "author": "rtivital",
        "responsive": true,
        "dependencies": [
          "/core/text/",
          "/core/container/",
          "/core/button/",
          "/core/image/",
          "/core/title/",
          "https://www.freepik.com/",
          "https://heropatterns.com/"
        ],
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "HeroText",
      "url": "/component/hero-text",
      "code": "import React from 'react';\nimport { createStyles, Title, Text, Button, Container, useMantineTheme } from '@mantine/core';\nimport { Dots } from './Dots';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    position: 'relative',\n    paddingTop: 120,\n    paddingBottom: 80,\n\n    '@media (max-width: 755px)': {\n      paddingTop: 80,\n      paddingBottom: 60,\n    },\n  },\n\n  inner: {\n    position: 'relative',\n    zIndex: 1,\n  },\n\n  dots: {\n    position: 'absolute',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[1],\n\n    '@media (max-width: 755px)': {\n      display: 'none',\n    },\n  },\n\n  dotsLeft: {\n    left: 0,\n    top: 0,\n  },\n\n  title: {\n    textAlign: 'center',\n    fontWeight: 800,\n    fontSize: 40,\n    letterSpacing: -1,\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    marginBottom: theme.spacing.xs,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n\n    '@media (max-width: 520px)': {\n      fontSize: 28,\n      textAlign: 'left',\n    },\n  },\n\n  description: {\n    textAlign: 'center',\n\n    '@media (max-width: 520px)': {\n      textAlign: 'left',\n      fontSize: theme.fontSizes.md,\n    },\n  },\n\n  controls: {\n    marginTop: theme.spacing.lg,\n    display: 'flex',\n    justifyContent: 'center',\n\n    '@media (max-width: 520px)': {\n      flexDirection: 'column',\n    },\n  },\n\n  control: {\n    '&:not(:first-of-type)': {\n      marginLeft: theme.spacing.md,\n    },\n\n    '@media (max-width: 520px)': {\n      height: 42,\n      fontSize: theme.fontSizes.md,\n\n      '&:not(:first-of-type)': {\n        marginTop: theme.spacing.md,\n        marginLeft: 0,\n      },\n    },\n  },\n}));\n\nexport function HeroText() {\n  const { classes } = useStyles();\n  const theme = useMantineTheme();\n\n  return (\n    <Container className={classes.wrapper} size={1400}>\n      <Dots className={classes.dots} style={{ left: 0, top: 0 }} />\n      <Dots className={classes.dots} style={{ left: 60, top: 0 }} />\n      <Dots className={classes.dots} style={{ left: 0, top: 140 }} />\n      <Dots className={classes.dots} style={{ right: 0, top: 60 }} />\n\n      <div className={classes.inner}>\n        <Title className={classes.title}>\n          Automated AI{' '}\n          <Text component=\"span\" color={theme.primaryColor} inherit>\n            code reviews\n          </Text>{' '}\n          for any stack\n        </Title>\n\n        <Container padding={0} size={600}>\n          <Text size=\"lg\" color=\"dimmed\" className={classes.description}>\n            Build more reliable software with AI companion. AI is also trained to detect lazy\n            developers who do nothing and just complain on Twitter.\n          </Text>\n        </Container>\n\n        <div className={classes.controls}>\n          <Button className={classes.control} size=\"lg\" variant=\"default\" color=\"gray\">\n            Book a demo\n          </Button>\n          <Button className={classes.control} size=\"lg\">\n            Purchase a license\n          </Button>\n        </div>\n      </div>\n    </Container>\n  );\n}\n",
      "attributes": {
        "title": "Hero section with text",
        "category": "hero",
        "author": "rtivital",
        "responsive": true,
        "withColor": true,
        "dependencies": [
          "/core/text/",
          "/core/title/",
          "/core/button/",
          "/core/container/",
          "/core/group/",
          "/others/decorations/",
          "@modulz/radix-icons"
        ],
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "HeroTitle",
      "url": "/component/hero-title",
      "code": "import React from 'react';\nimport { GitHubLogoIcon } from '@modulz/radix-icons';\nimport { createStyles, Container, Text, Button, Group, useMantineTheme } from '@mantine/core';\n\nconst BREAKPOINT = '@media (max-width: 755px)';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    position: 'relative',\n    boxSizing: 'border-box',\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.white,\n  },\n\n  inner: {\n    position: 'relative',\n    paddingTop: 200,\n    paddingBottom: 120,\n\n    [BREAKPOINT]: {\n      paddingBottom: 80,\n      paddingTop: 80,\n    },\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    fontSize: 62,\n    fontWeight: 900,\n    lineHeight: 1.1,\n    margin: 0,\n    padding: 0,\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n\n    [BREAKPOINT]: {\n      fontSize: 42,\n      lineHeight: 1.2,\n    },\n  },\n\n  description: {\n    marginTop: theme.spacing.xl,\n    fontSize: 24,\n\n    [BREAKPOINT]: {\n      fontSize: 18,\n    },\n  },\n\n  controls: {\n    marginTop: theme.spacing.xl * 2,\n\n    [BREAKPOINT]: {\n      marginTop: theme.spacing.xl,\n    },\n  },\n\n  control: {\n    height: 54,\n    paddingLeft: 38,\n    paddingRight: 38,\n\n    [BREAKPOINT]: {\n      height: 54,\n      paddingLeft: 18,\n      paddingRight: 18,\n      flex: 1,\n    },\n  },\n\n  githubControl: {\n    borderWidth: 2,\n    borderColor: theme.colorScheme === 'dark' ? 'transparent' : theme.colors.dark[9],\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[5] : 'transparent',\n\n    '&:hover': {\n      backgroundColor: `${\n        theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0]\n      } !important`,\n    },\n  },\n}));\n\nexport function HeroTitle() {\n  const { classes, cx } = useStyles();\n  const theme = useMantineTheme();\n\n  return (\n    <div className={classes.wrapper}>\n      <Container size={700} className={classes.inner}>\n        <h1 className={classes.title}>\n          A{' '}\n          <Text component=\"span\" variant=\"gradient\" gradient={{ from: 'blue', to: 'cyan' }} inherit>\n            fully featured\n          </Text>{' '}\n          React components and hooks library\n        </h1>\n\n        <Text className={classes.description} color=\"dimmed\">\n          Build fully functional accessible web applications with ease – Mantine includes more than\n          100 customizable components and hooks to cover you in any situation\n        </Text>\n\n        <Group className={classes.controls}>\n          <Button\n            size=\"xl\"\n            className={classes.control}\n            variant=\"gradient\"\n            gradient={{ from: 'blue', to: 'cyan' }}\n          >\n            Get started\n          </Button>\n\n          <Button\n            component=\"a\"\n            href=\"https://github.com/mantinedev/mantine\"\n            size=\"xl\"\n            variant=\"outline\"\n            className={cx(classes.control, classes.githubControl)}\n            color={theme.colorScheme === 'dark' ? 'gray' : 'dark'}\n            leftIcon={<GitHubLogoIcon style={{ width: 20, height: 20 }} />}\n            styles={{ leftIcon: { marginRight: 12 } }}\n          >\n            GitHub\n          </Button>\n        </Group>\n      </Container>\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Hero section with gradient text",
        "category": "hero",
        "author": "rtivital",
        "responsive": true,
        "dependencies": [
          "/core/text/",
          "/core/button/",
          "/core/container/",
          "/core/group/",
          "@modulz/radix-icons"
        ],
        "canvas": {
          "center": false
        }
      }
    }
  ],
  "sliders": [
    {
      "component": "SliderHover",
      "url": "/component/slider-hover",
      "code": "import React from 'react';\nimport { Slider } from '@mantine/core';\nimport { useHover } from '@mantine/hooks';\n\nexport function SliderHover() {\n  const { hovered, ref } = useHover();\n\n  return (\n    <Slider\n      defaultValue={40}\n      min={10}\n      max={90}\n      ref={ref}\n      label={null}\n      styles={{\n        thumb: {\n          transition: 'opacity 150ms ease',\n          opacity: hovered ? 1 : 0,\n        },\n\n        dragging: {\n          opacity: 1,\n        },\n      }}\n    />\n  );\n}\n",
      "attributes": {
        "title": "Slider with thumb visible on hover",
        "category": "sliders",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/slider/"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 420
        }
      }
    },
    {
      "component": "SliderIcon",
      "url": "/component/slider-icon",
      "code": "import React from 'react';\nimport { Slider, RangeSlider } from '@mantine/core';\nimport { HeartFillIcon, HeartIcon } from '@primer/octicons-react';\n\nconst styles = { thumb: { borderWidth: 2, height: 26, width: 26, padding: 3 } };\n\nexport function SliderIcon() {\n  return (\n    <>\n      <Slider\n        thumbChildren={<HeartFillIcon size={12} />}\n        color=\"red\"\n        label={null}\n        defaultValue={40}\n        styles={styles}\n      />\n\n      <RangeSlider\n        mt=\"xl\"\n        styles={styles}\n        color=\"red\"\n        label={null}\n        defaultValue={[20, 60]}\n        thumbChildren={[<HeartIcon size={12} key=\"1\" />, <HeartFillIcon size={12} key=\"2\" />]}\n      />\n    </>\n  );\n}\n",
      "attributes": {
        "title": "Slider with icon thumb",
        "category": "sliders",
        "author": "rtivital",
        "dependencies": [
          "/core/slider/"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 420
        }
      }
    },
    {
      "component": "SliderInput",
      "url": "/component/slider-input",
      "code": "import React, { useState } from 'react';\nimport { createStyles, NumberInput, Slider } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    position: 'relative',\n  },\n\n  input: {\n    height: 'auto',\n    paddingTop: 22,\n    paddingBottom: 3,\n    borderBottomRightRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n\n  label: {\n    position: 'absolute',\n    pointerEvents: 'none',\n    paddingLeft: theme.spacing.sm,\n    paddingTop: theme.spacing.sm / 2,\n    zIndex: 1,\n  },\n\n  slider: {\n    position: 'absolute',\n    width: '100%',\n    bottom: -1,\n  },\n\n  thumb: {\n    width: 16,\n    height: 16,\n  },\n\n  track: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[3] : theme.colors.gray[4],\n  },\n}));\n\nexport function SliderInput() {\n  const { classes } = useStyles();\n  const [value, setValue] = useState(2200);\n  return (\n    <div className={classes.wrapper}>\n      <NumberInput\n        value={value}\n        onChange={setValue}\n        label=\"Your daily kcal consumption\"\n        placeholder=\"2200 is an average value\"\n        step={50}\n        min={0}\n        max={8000}\n        hideControls\n        classNames={{ input: classes.input, label: classes.label }}\n      />\n      <Slider\n        max={8000}\n        step={50}\n        min={0}\n        label={null}\n        value={value}\n        onChange={setValue}\n        size={2}\n        radius={0}\n        className={classes.slider}\n        classNames={{ thumb: classes.thumb, track: classes.track }}\n      />\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "NumberInput with slider",
        "category": "sliders",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/number-input/",
          "/core/slider/"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 420
        }
      }
    },
    {
      "component": "SliderLabel",
      "url": "/component/slider-label",
      "code": "import React from 'react';\nimport { createStyles, RangeSlider } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  label: {\n    top: 0,\n    height: 28,\n    width: 34,\n    padding: 0,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontWeight: 700,\n    backgroundColor: 'transparent',\n  },\n\n  thumb: {\n    backgroundColor: theme.colors[theme.primaryColor][6],\n    height: 28,\n    width: 34,\n    border: 'none',\n  },\n\n  dragging: {\n    transform: 'translate(-50%, -50%)',\n  },\n}));\n\nexport function SliderLabel() {\n  const { classes } = useStyles();\n  return <RangeSlider labelAlwaysOn defaultValue={[20, 60]} classNames={classes} />;\n}\n",
      "attributes": {
        "title": "Range slider with labels",
        "category": "sliders",
        "author": "rtivital",
        "withColor": true,
        "responsive": true,
        "dependencies": [],
        "canvas": {
          "center": true,
          "maxWidth": 420
        }
      }
    },
    {
      "component": "SliderMarks",
      "url": "/component/slider-marks",
      "code": "import React from 'react';\nimport { createStyles, RangeSlider } from '@mantine/core';\nimport { Point, GripVertical } from 'tabler-icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  mark: {\n    display: 'none',\n  },\n\n  markWrapper: {\n    marginTop: 12,\n  },\n\n  thumb: {\n    width: 16,\n    height: 28,\n    backgroundColor: theme.white,\n    color: theme.colors.gray[5],\n    border: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[3]\n    }`,\n  },\n}));\n\nconst point = <Point size={10} style={{ marginTop: 6 }} />;\n\nexport function SliderMarks() {\n  const { classes } = useStyles();\n  return (\n    <RangeSlider\n      mt=\"xl\"\n      mb=\"xl\"\n      classNames={classes}\n      defaultValue={[30, 60]}\n      thumbChildren={<GripVertical />}\n      marks={[\n        { value: 0, label: '0' },\n        { value: 12.5, label: point },\n        { value: 25, label: '25' },\n        { value: 37.5, label: point },\n        { value: 50, label: '50' },\n        { value: 62.5, label: point },\n        { value: 75, label: '75' },\n        { value: 87.5, label: point },\n        { value: 100, label: '100' },\n      ]}\n    />\n  );\n}\n",
      "attributes": {
        "title": "Slider with marks",
        "category": "sliders",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/slider/"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 420
        }
      }
    },
    {
      "component": "SliderWhite",
      "url": "/component/slider-white",
      "code": "import React from 'react';\nimport { createStyles, Slider } from '@mantine/core';\nimport { GripHorizontal } from 'tabler-icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  thumb: {\n    border: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[3]\n    }`,\n    width: 28,\n    height: 22,\n    color: theme.colors.gray[5],\n    backgroundColor: theme.white,\n    borderRadius: theme.radius.sm,\n  },\n}));\n\nexport function SliderWhite() {\n  const { classes } = useStyles();\n  return (\n    <Slider\n      classNames={classes}\n      thumbChildren={<GripHorizontal size={18} />}\n      defaultValue={40}\n      label={null}\n    />\n  );\n}\n",
      "attributes": {
        "title": "Slider with white thumb",
        "category": "sliders",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/slider/"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 420
        }
      }
    }
  ],
  "stats": [
    {
      "component": "StatsCard",
      "url": "/component/stats-card",
      "code": "import React from 'react';\nimport { createStyles, ThemeIcon, Progress, Text, Group, Badge, Paper } from '@mantine/core';\nimport { Swimming } from 'tabler-icons-react';\n\nconst ICON_SIZE = 60;\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    position: 'relative',\n    overflow: 'visible',\n    paddingTop: theme.spacing.xl * 1.5 + ICON_SIZE / 3,\n  },\n\n  icon: {\n    position: 'absolute',\n    top: -ICON_SIZE / 3,\n    left: `calc(50% - ${ICON_SIZE / 2}px)`,\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    lineHeight: 1,\n  },\n}));\n\nexport function StatsCard() {\n  const { classes } = useStyles();\n\n  return (\n    <Paper radius=\"md\" withBorder padding=\"xl\" className={classes.card} mt={ICON_SIZE / 3}>\n      <ThemeIcon className={classes.icon} size={ICON_SIZE} radius={ICON_SIZE}>\n        <Swimming size={34} />\n      </ThemeIcon>\n\n      <Text align=\"center\" weight={700} className={classes.title}>\n        Swimming challenge\n      </Text>\n      <Text color=\"dimmed\" align=\"center\" size=\"sm\">\n        32 km / week\n      </Text>\n\n      <Group position=\"apart\" mt=\"xs\">\n        <Text size=\"sm\" color=\"dimmed\">\n          Progress\n        </Text>\n        <Text size=\"sm\" color=\"dimmed\">\n          62%\n        </Text>\n      </Group>\n\n      <Progress value={62} mt={5} />\n\n      <Group position=\"apart\" mt=\"md\">\n        <Text size=\"sm\">20 / 36 km</Text>\n        <Badge size=\"sm\">4 days left</Badge>\n      </Group>\n    </Paper>\n  );\n}\n",
      "attributes": {
        "title": "Card with progress",
        "category": "stats",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/paper/",
          "/core/theme-icon/",
          "/core/text/",
          "/core/group/",
          "/core/progress/",
          "/core/badge/"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 320
        }
      }
    },
    {
      "component": "StatsControls",
      "url": "/component/stats-controls",
      "code": "import React, { useState } from 'react';\nimport dayjs from 'dayjs';\nimport { createStyles, UnstyledButton, Text, Paper, Group } from '@mantine/core';\nimport { Swimming, Bike, Run, ChevronDown, ChevronUp } from 'tabler-icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    backgroundImage: `linear-gradient(-60deg, ${theme.colors[theme.primaryColor][4]} 0%, ${\n      theme.colors[theme.primaryColor][7]\n    } 100%)`,\n    padding: theme.spacing.xl,\n    borderRadius: theme.radius.md,\n    display: 'flex',\n\n    [theme.fn.smallerThan('xs')]: {\n      flexDirection: 'column',\n    },\n  },\n\n  icon: {\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    color: theme.colors[theme.primaryColor][6],\n  },\n\n  stat: {\n    minWidth: 98,\n    paddingTop: theme.spacing.xl,\n    minHeight: 140,\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    backgroundColor: theme.white,\n  },\n\n  label: {\n    textTransform: 'uppercase',\n    fontWeight: 700,\n    fontSize: theme.fontSizes.xs,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    color: theme.colors.gray[6],\n    lineHeight: 1.2,\n  },\n\n  value: {\n    fontSize: theme.fontSizes.sm,\n    fontWeight: 700,\n    color: theme.black,\n  },\n\n  count: {\n    color: theme.colors.gray[6],\n  },\n\n  day: {\n    fontSize: 44,\n    fontWeight: 700,\n    color: theme.white,\n    lineHeight: 1,\n    textAlign: 'center',\n    marginBottom: 5,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n  },\n\n  month: {\n    fontSize: theme.fontSizes.sm,\n    color: theme.white,\n    lineHeight: 1,\n    textAlign: 'center',\n  },\n\n  controls: {\n    display: 'flex',\n    flexDirection: 'column',\n    marginRight: theme.spacing.xl * 2,\n\n    [theme.fn.smallerThan('xs')]: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      marginRight: 0,\n      marginBottom: theme.spacing.xl,\n    },\n  },\n\n  date: {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n\n  control: {\n    height: 28,\n    width: '100%',\n    color: theme.colors[theme.primaryColor][2],\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: theme.radius.md,\n    transition: 'background-color 50ms ease',\n\n    [theme.fn.smallerThan('xs')]: {\n      height: 34,\n      width: 34,\n    },\n\n    '&:hover': {\n      backgroundColor: theme.colors[theme.primaryColor][5],\n      color: theme.white,\n    },\n  },\n\n  controlIcon: {\n    [theme.fn.smallerThan('xs')]: {\n      transform: 'rotate(-90deg)',\n    },\n  },\n}));\n\nconst data = [\n  { icon: Run, label: 'Running' },\n  { icon: Swimming, label: 'Swimming' },\n  { icon: Bike, label: 'Bike' },\n];\n\nexport function StatsControls() {\n  const { classes } = useStyles();\n  const [date, setDate] = useState(new Date(2021, 9, 24));\n\n  const stats = data.map((stat) => (\n    <Paper className={classes.stat} radius=\"md\" shadow=\"md\" padding=\"xs\">\n      <stat.icon size={32} className={classes.icon} />\n      <div>\n        <Text className={classes.label}>{stat.label}</Text>\n        <Text size=\"xs\" className={classes.count}>\n          <span className={classes.value}>{Math.floor(Math.random() * 6 + 4)}km</span> / 10km\n        </Text>\n      </div>\n    </Paper>\n  ));\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.controls}>\n        <UnstyledButton\n          className={classes.control}\n          onClick={() => setDate((current) => dayjs(current).add(1, 'day').toDate())}\n        >\n          <ChevronUp className={classes.controlIcon} />\n        </UnstyledButton>\n\n        <div className={classes.date}>\n          <Text className={classes.day}>{dayjs(date).format('DD')}</Text>\n          <Text className={classes.month}>{dayjs(date).format('MMMM')}</Text>\n        </div>\n\n        <UnstyledButton\n          className={classes.control}\n          onClick={() => setDate((current) => dayjs(current).subtract(1, 'day').toDate())}\n        >\n          <ChevronDown className={classes.controlIcon} />\n        </UnstyledButton>\n      </div>\n      <Group sx={{ flex: 1 }}>{stats}</Group>\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Stats with controls",
        "category": "stats",
        "author": "rtivital",
        "withColor": true,
        "responsive": true,
        "dependencies": [
          "/core/button/#unstyled-button",
          "/core/text/",
          "/core/paper/",
          "/core/group/",
          "tabler-icons-react"
        ],
        "canvas": {
          "center": true,
          "maxWidth": 500
        }
      }
    },
    {
      "component": "StatsGrid",
      "url": "/component/stats-grid",
      "code": "import React from 'react';\nimport { createStyles, Group, Paper, SimpleGrid, Text } from '@mantine/core';\nimport {\n  UserPlus,\n  Discount2,\n  Receipt2,\n  Coin,\n  ArrowUpRight,\n  ArrowDownRight,\n} from 'tabler-icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    padding: theme.spacing.xl * 1.5,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n  },\n\n  value: {\n    fontSize: 24,\n    fontWeight: 700,\n    lineHeight: 1,\n  },\n\n  diff: {\n    lineHeight: 1,\n    display: 'flex',\n    alignItems: 'center',\n  },\n\n  icon: {\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[3] : theme.colors.gray[4],\n  },\n\n  title: {\n    fontWeight: 700,\n    textTransform: 'uppercase',\n  },\n}));\n\nconst icons = {\n  user: UserPlus,\n  discount: Discount2,\n  receipt: Receipt2,\n  coin: Coin,\n};\n\ninterface StatsGridProps {\n  data: { title: string; icon: keyof typeof icons; value: string; diff: number }[];\n}\n\nexport function StatsGrid({ data }: StatsGridProps) {\n  const { classes } = useStyles();\n  const stats = data.map((stat) => {\n    const Icon = icons[stat.icon];\n    const DiffIcon = stat.diff > 0 ? ArrowUpRight : ArrowDownRight;\n\n    return (\n      <Paper withBorder padding=\"md\" radius=\"md\">\n        <Group position=\"apart\">\n          <Text size=\"xs\" color=\"dimmed\" className={classes.title}>\n            {stat.title}\n          </Text>\n          <Icon className={classes.icon} size={22} />\n        </Group>\n\n        <Group align=\"flex-end\" spacing=\"xs\" mt={25}>\n          <Text className={classes.value}>{stat.value}</Text>\n          <Text\n            color={stat.diff > 0 ? 'teal' : 'red'}\n            size=\"sm\"\n            weight={500}\n            className={classes.diff}\n          >\n            <span>{stat.diff}%</span>\n            <DiffIcon size={16} />\n          </Text>\n        </Group>\n\n        <Text size=\"xs\" color=\"dimmed\" mt={7}>\n          Compared to previous month\n        </Text>\n      </Paper>\n    );\n  });\n  return (\n    <div className={classes.root}>\n      <SimpleGrid\n        cols={4}\n        breakpoints={[\n          { maxWidth: 'md', cols: 2 },\n          { maxWidth: 'xs', cols: 1 },\n        ]}\n      >\n        {stats}\n      </SimpleGrid>\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Stats grid",
        "category": "stats",
        "author": "rtivital",
        "responsive": true,
        "dependencies": [
          "/core/group/",
          "/core/paper/",
          "/core/simple-grid/",
          "/core/text/",
          "tabler-icons-react"
        ],
        "props": {
          "data": [
            {
              "title": "Revenue",
              "icon": "receipt",
              "value": "13,456",
              "diff": 34
            },
            {
              "title": "Profit",
              "icon": "coin",
              "value": "4,145",
              "diff": -13
            },
            {
              "title": "Coupons usage",
              "icon": "discount",
              "value": "745",
              "diff": 18
            },
            {
              "title": "New customers",
              "icon": "user",
              "value": "188",
              "diff": -30
            }
          ]
        },
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "StatsGridIcons",
      "url": "/component/stats-grid-icons",
      "code": "import React from 'react';\nimport { createStyles, Group, Paper, Text, ThemeIcon, SimpleGrid } from '@mantine/core';\nimport { ArrowUpRight, ArrowDownRight } from 'tabler-icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    padding: theme.spacing.xl * 1.5,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n  },\n\n  label: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n  },\n}));\n\ninterface StatsGridIconsProps {\n  data: { title: string; value: string; diff: number }[];\n}\n\nexport function StatsGridIcons({ data }: StatsGridIconsProps) {\n  const { classes } = useStyles();\n  const stats = data.map((stat) => {\n    const DiffIcon = stat.diff > 0 ? ArrowUpRight : ArrowDownRight;\n\n    return (\n      <Paper withBorder padding=\"md\" radius=\"md\" key={stat.title}>\n        <Group position=\"apart\">\n          <div>\n            <Text\n              color=\"dimmed\"\n              transform=\"uppercase\"\n              weight={700}\n              size=\"xs\"\n              className={classes.label}\n            >\n              {stat.title}\n            </Text>\n            <Text weight={700} size=\"xl\">\n              {stat.value}\n            </Text>\n          </div>\n          <ThemeIcon\n            color=\"gray\"\n            variant=\"light\"\n            sx={(theme) => ({ color: stat.diff > 0 ? theme.colors.teal[6] : theme.colors.red[6] })}\n            size={38}\n            radius=\"md\"\n          >\n            <DiffIcon size={28} />\n          </ThemeIcon>\n        </Group>\n        <Text color=\"dimmed\" size=\"sm\" mt=\"md\">\n          <Text component=\"span\" color={stat.diff > 0 ? 'teal' : 'red'} weight={700}>\n            {stat.diff}%\n          </Text>{' '}\n          {stat.diff > 0 ? 'increase' : 'decrease'} compared to last month\n        </Text>\n      </Paper>\n    );\n  });\n\n  return (\n    <div className={classes.root}>\n      <SimpleGrid cols={3} breakpoints={[{ maxWidth: 'sm', cols: 1 }]}>\n        {stats}\n      </SimpleGrid>\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Stats grid with diff icons",
        "category": "stats",
        "author": "rtivital",
        "responsive": true,
        "dependencies": [
          "/core/group/",
          "/core/paper/",
          "/core/text/",
          "/core/theme-icon/",
          "/core/simple-grid/",
          "tabler-icons-react"
        ],
        "props": {
          "data": [
            {
              "title": "Revenue",
              "value": "$13,456",
              "diff": 34
            },
            {
              "title": "Profit",
              "value": "$4,145",
              "diff": -13
            },
            {
              "title": "Coupons usage",
              "value": "745",
              "diff": 18
            }
          ]
        },
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "StatsGroup",
      "url": "/component/stats-group",
      "code": "import React from 'react';\nimport { createStyles, Text } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    display: 'flex',\n    backgroundImage: `linear-gradient(-60deg, ${theme.colors[theme.primaryColor][4]} 0%, ${\n      theme.colors[theme.primaryColor][7]\n    } 100%)`,\n    padding: theme.spacing.xl * 1.5,\n    borderRadius: theme.radius.md,\n\n    [theme.fn.smallerThan('sm')]: {\n      flexDirection: 'column',\n    },\n  },\n\n  title: {\n    color: theme.white,\n    textTransform: 'uppercase',\n    fontWeight: 700,\n    fontSize: theme.fontSizes.sm,\n  },\n\n  count: {\n    color: theme.white,\n    fontSize: 32,\n    lineHeight: 1,\n    fontWeight: 700,\n    marginBottom: theme.spacing.md,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n  },\n\n  description: {\n    color: theme.colors[theme.primaryColor][0],\n    fontSize: theme.fontSizes.sm,\n    marginTop: 5,\n  },\n\n  stat: {\n    flex: 1,\n\n    '& + &': {\n      paddingLeft: theme.spacing.xl,\n      marginLeft: theme.spacing.xl,\n      borderLeft: `1px solid ${theme.colors[theme.primaryColor][3]}`,\n\n      [theme.fn.smallerThan('sm')]: {\n        paddingLeft: 0,\n        marginLeft: 0,\n        borderLeft: 0,\n        paddingTop: theme.spacing.xl,\n        marginTop: theme.spacing.xl,\n        borderTop: `1px solid ${theme.colors[theme.primaryColor][3]}`,\n      },\n    },\n  },\n}));\n\ninterface StatsGroupProps {\n  data: { title: string; stats: string; description: string }[];\n}\n\nexport function StatsGroup({ data }: StatsGroupProps) {\n  const { classes } = useStyles();\n  const stats = data.map((stat) => (\n    <div key={stat.title} className={classes.stat}>\n      <Text className={classes.count}>{stat.stats}</Text>\n      <Text className={classes.title}>{stat.title}</Text>\n      <Text className={classes.description}>{stat.description}</Text>\n    </div>\n  ));\n  return <div className={classes.root}>{stats}</div>;\n}\n",
      "attributes": {
        "title": "Grouped stats",
        "category": "stats",
        "author": "rtivital",
        "withColor": true,
        "responsive": true,
        "dependencies": [
          "/core/text/"
        ],
        "props": {
          "data": [
            {
              "title": "Page views",
              "stats": "456,133",
              "description": "24% more than in the same month last year, 33% more that two years ago"
            },
            {
              "title": "New users",
              "stats": "2,175",
              "description": "13% less compared to last month, new user engagement up by 6%"
            },
            {
              "title": "Completed orders",
              "stats": "1,994",
              "description": "1994 orders were completed this month, 97% satisfaction rate"
            }
          ]
        },
        "canvas": {
          "center": true,
          "maxWidth": 920
        }
      }
    },
    {
      "component": "StatsRing",
      "url": "/component/stats-ring",
      "code": "import React from 'react';\nimport { RingProgress, Text, SimpleGrid, Paper, Center, Group } from '@mantine/core';\nimport { ArrowBottomLeftIcon, ArrowTopRightIcon } from '@modulz/radix-icons';\n\ninterface StatsRingProps {\n  data: {\n    label: string;\n    stats: string;\n    progress: number;\n    color: string;\n    icon: 'up' | 'down';\n  }[];\n}\n\nconst icons = {\n  up: ArrowTopRightIcon,\n  down: ArrowBottomLeftIcon,\n};\n\nexport function StatsRing({ data }: StatsRingProps) {\n  const stats = data.map((stat) => {\n    const Icon = icons[stat.icon];\n    return (\n      <Paper withBorder radius=\"md\" padding=\"xs\" key={stat.label}>\n        <Group>\n          <RingProgress\n            size={80}\n            roundCaps\n            sections={[{ value: stat.progress, color: stat.color }]}\n            label={\n              <Center>\n                <Icon width={22} height={22} />\n              </Center>\n            }\n          />\n\n          <div>\n            <Text color=\"dimmed\" size=\"xs\" transform=\"uppercase\" weight={700}>\n              {stat.label}\n            </Text>\n            <Text weight={700} size=\"xl\">\n              {stat.stats}\n            </Text>\n          </div>\n        </Group>\n      </Paper>\n    );\n  });\n  return (\n    <SimpleGrid cols={3} breakpoints={[{ maxWidth: 'sm', cols: 1 }]}>\n      {stats}\n    </SimpleGrid>\n  );\n}\n",
      "attributes": {
        "title": "Stats with ring progress",
        "category": "stats",
        "author": "rtivital",
        "responsive": true,
        "dependencies": [
          "/core/paper/",
          "/core/ring-progress/",
          "/core/center/",
          "/core/text/",
          "/core/group",
          "/core/paper/",
          "/core/simple-grid/",
          "@modulz/radix-icons"
        ],
        "props": {
          "data": [
            {
              "label": "Page views",
              "stats": "456,578",
              "progress": 65,
              "color": "teal",
              "icon": "up"
            },
            {
              "label": "New users",
              "stats": "2,550",
              "progress": 72,
              "color": "blue",
              "icon": "up"
            },
            {
              "label": "Orders",
              "stats": "4,735",
              "progress": 52,
              "color": "red",
              "icon": "down"
            }
          ]
        },
        "canvas": {
          "center": true,
          "maxWidth": 840
        }
      }
    },
    {
      "component": "StatsSegments",
      "url": "/component/stats-segments",
      "code": "import React from 'react';\nimport { createStyles, Progress, Box, Text, Group, Paper, SimpleGrid } from '@mantine/core';\nimport { ArrowUpRight, DeviceAnalytics } from 'tabler-icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  progressLabel: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    lineHeight: 1,\n    fontSize: theme.fontSizes.sm,\n  },\n\n  stat: {\n    borderBottom: '3px solid',\n    paddingBottom: 5,\n  },\n\n  statCount: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    lineHeight: 1.3,\n  },\n\n  diff: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    display: 'flex',\n    alignItems: 'center',\n  },\n\n  icon: {\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[3] : theme.colors.gray[4],\n  },\n}));\n\ninterface StatsSegmentsProps {\n  total: string;\n  diff: number;\n  data: {\n    label: string;\n    count: string;\n    part: number;\n    color: string;\n  }[];\n}\n\nexport function StatsSegments({ total, diff, data }: StatsSegmentsProps) {\n  const { classes } = useStyles();\n\n  const segments = data.map((segment) => ({\n    value: segment.part,\n    color: segment.color,\n    label: segment.part > 10 ? `${segment.part}%` : null,\n  }));\n\n  const descriptions = data.map((stat) => (\n    <Box key={stat.label} sx={{ borderBottomColor: stat.color }} className={classes.stat}>\n      <Text transform=\"uppercase\" size=\"xs\" color=\"dimmed\" weight={700}>\n        {stat.label}\n      </Text>\n\n      <Group position=\"apart\" align=\"flex-end\" spacing={0}>\n        <Text weight={700}>{stat.count}</Text>\n        <Text color={stat.color} weight={700} size=\"sm\" className={classes.statCount}>\n          {stat.part}%\n        </Text>\n      </Group>\n    </Box>\n  ));\n\n  return (\n    <Paper withBorder padding=\"md\" radius=\"md\">\n      <Group position=\"apart\">\n        <Group align=\"flex-end\" spacing=\"xs\">\n          <Text size=\"xl\" weight={700}>\n            {total}\n          </Text>\n          <Text color=\"teal\" className={classes.diff} size=\"sm\" weight={700}>\n            <span>{diff}%</span>\n            <ArrowUpRight size={16} style={{ marginBottom: 4 }} />\n          </Text>\n        </Group>\n        <DeviceAnalytics size={20} className={classes.icon} />\n      </Group>\n\n      <Text color=\"dimmed\" size=\"sm\">\n        Page views compared to previous month\n      </Text>\n\n      <Progress\n        sections={segments}\n        size={34}\n        classNames={{ label: classes.progressLabel }}\n        mt={40}\n      />\n      <SimpleGrid cols={3} breakpoints={[{ maxWidth: 'xs', cols: 1 }]} mt=\"xl\">\n        {descriptions}\n      </SimpleGrid>\n    </Paper>\n  );\n}\n",
      "attributes": {
        "title": "Stats with segments",
        "category": "stats",
        "author": "rtivital",
        "responsive": true,
        "dependencies": [
          "/core/progress/",
          "/core/box/",
          "/core/text/",
          "/core/group/",
          "/core/paper/",
          "/core/simple-grid/",
          "tabler-icons-react"
        ],
        "props": {
          "total": "345,765",
          "diff": 18,
          "data": [
            {
              "label": "Mobile",
              "count": "204,001",
              "part": 59,
              "color": "#47d6ab"
            },
            {
              "label": "Desktop",
              "count": "121,017",
              "part": 35,
              "color": "#03141a"
            },
            {
              "label": "Tablet",
              "count": "31,118",
              "part": 6,
              "color": "#4fcdf7"
            }
          ]
        },
        "canvas": {
          "center": true,
          "maxWidth": 440
        }
      }
    }
  ],
  "toc": [
    {
      "component": "TableOfContents",
      "url": "/component/table-of-contents",
      "code": "import React from 'react';\nimport { createStyles, Box, Text, Group } from '@mantine/core';\nimport { ActivityLogIcon } from '@modulz/radix-icons';\n\nconst useStyles = createStyles((theme) => ({\n  link: {\n    ...theme.fn.focusStyles(),\n    display: 'block',\n    textDecoration: 'none',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.black,\n    lineHeight: 1.2,\n    fontSize: theme.fontSizes.sm,\n    padding: theme.spacing.xs,\n    borderTopRightRadius: theme.radius.sm,\n    borderBottomRightRadius: theme.radius.sm,\n    borderLeft: `1px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    },\n  },\n\n  linkActive: {\n    fontWeight: 500,\n    borderLeftColor: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 6 : 7],\n    color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 2 : 7],\n\n    '&, &:hover': {\n      backgroundColor:\n        theme.colorScheme === 'dark'\n          ? theme.fn.rgba(theme.colors[theme.primaryColor][9], 0.25)\n          : theme.colors[theme.primaryColor][0],\n    },\n  },\n}));\n\ninterface TableOfContentsProps {\n  links: { label: string; link: string; order: number }[];\n  active: string;\n}\n\nexport function TableOfContents({ links, active }: TableOfContentsProps) {\n  const { classes, cx } = useStyles();\n  const items = links.map((item) => (\n    <Box<'a'>\n      component=\"a\"\n      href={item.link}\n      onClick={(event) => event.preventDefault()}\n      key={item.label}\n      className={cx(classes.link, { [classes.linkActive]: active === item.link })}\n      sx={(theme) => ({ paddingLeft: item.order * theme.spacing.md })}\n    >\n      {item.label}\n    </Box>\n  ));\n\n  return (\n    <div>\n      <Group mb=\"md\">\n        <ActivityLogIcon />\n        <Text>Table of contents</Text>\n      </Group>\n      {items}\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Table of contents",
        "category": "toc",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/box/",
          "/core/text/",
          "/core/text/",
          "@modulz/radix-icons"
        ],
        "props": {
          "active": "#overlays",
          "links": [
            {
              "label": "Usage",
              "link": "#usage",
              "order": 1
            },
            {
              "label": "Position and placement",
              "link": "#position",
              "order": 1
            },
            {
              "label": "With other overlays",
              "link": "#overlays",
              "order": 1
            },
            {
              "label": "Manage focus",
              "link": "#focus",
              "order": 1
            },
            {
              "label": "Examples",
              "link": "#1",
              "order": 1
            },
            {
              "label": "Show on focus",
              "link": "#2",
              "order": 2
            },
            {
              "label": "Show on hover",
              "link": "#3",
              "order": 2
            },
            {
              "label": "With form",
              "link": "#4",
              "order": 2
            }
          ]
        },
        "canvas": {
          "center": true,
          "maxWidth": 280
        }
      }
    },
    {
      "component": "TableOfContentsFloating",
      "url": "/component/table-of-contents-floating",
      "code": "import React, { useState } from 'react';\nimport { createStyles, Box, Text, Group } from '@mantine/core';\nimport { ActivityLogIcon } from '@modulz/radix-icons';\n\nconst LINK_HEIGHT = 38;\nconst INDICATOR_SIZE = 10;\nconst INDICATOR_OFFSET = (LINK_HEIGHT - INDICATOR_SIZE) / 2;\n\nconst useStyles = createStyles((theme) => ({\n  link: {\n    ...theme.fn.focusStyles(),\n    display: 'block',\n    textDecoration: 'none',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.black,\n    lineHeight: `${LINK_HEIGHT}px`,\n    fontSize: theme.fontSizes.sm,\n    height: LINK_HEIGHT,\n    borderTopRightRadius: theme.radius.sm,\n    borderBottomRightRadius: theme.radius.sm,\n    borderLeft: `2px solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[2]\n    }`,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    },\n  },\n\n  linkActive: {\n    fontWeight: 500,\n    color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 3 : 7],\n  },\n\n  links: {\n    position: 'relative',\n  },\n\n  indicator: {\n    transition: 'transform 150ms ease',\n    border: `2px solid ${theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 3 : 7]}`,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n    height: INDICATOR_SIZE,\n    width: INDICATOR_SIZE,\n    borderRadius: INDICATOR_SIZE,\n    position: 'absolute',\n    left: -INDICATOR_SIZE / 2 + 1,\n  },\n}));\n\ninterface TableOfContentsFloatingProps {\n  links: { label: string; link: string; order: number }[];\n}\n\nexport function TableOfContentsFloating({ links }: TableOfContentsFloatingProps) {\n  const { classes, cx } = useStyles();\n  const [active, setActive] = useState(2);\n\n  const items = links.map((item, index) => (\n    <Box<'a'>\n      component=\"a\"\n      href={item.link}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(index);\n      }}\n      key={item.label}\n      className={cx(classes.link, { [classes.linkActive]: active === index })}\n      sx={(theme) => ({ paddingLeft: item.order * theme.spacing.lg })}\n    >\n      {item.label}\n    </Box>\n  ));\n\n  return (\n    <div>\n      <Group mb=\"md\">\n        <ActivityLogIcon />\n        <Text>Table of contents</Text>\n      </Group>\n      <div className={classes.links}>\n        <div\n          className={classes.indicator}\n          style={{ transform: `translateY(${active * LINK_HEIGHT + INDICATOR_OFFSET}px)` }}\n        />\n        {items}\n      </div>\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "Table of contents indicator",
        "category": "toc",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/box/",
          "/core/text/",
          "/core/text/",
          "@modulz/radix-icons"
        ],
        "props": {
          "links": [
            {
              "label": "Usage",
              "link": "#usage",
              "order": 1
            },
            {
              "label": "Position and placement",
              "link": "#position",
              "order": 1
            },
            {
              "label": "With other overlays",
              "link": "#overlays",
              "order": 1
            },
            {
              "label": "Manage focus",
              "link": "#focus",
              "order": 1
            },
            {
              "label": "Examples",
              "link": "#1",
              "order": 1
            },
            {
              "label": "Show on focus",
              "link": "#2",
              "order": 2
            },
            {
              "label": "Show on hover",
              "link": "#3",
              "order": 2
            },
            {
              "label": "With form",
              "link": "#4",
              "order": 2
            }
          ]
        },
        "canvas": {
          "center": true,
          "maxWidth": 280
        }
      }
    }
  ],
  "tables": [
    {
      "component": "TableReviews",
      "url": "/component/table-reviews",
      "code": "import React from 'react';\nimport { createStyles, Table, Progress, Anchor, Text, Group, ScrollArea } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  progressBar: {\n    '&:not(:first-of-type)': {\n      borderLeft: `3px solid ${theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white}`,\n    },\n  },\n}));\n\ninterface TableReviewsProps {\n  data: {\n    title: string;\n    author: string;\n    year: number;\n    reviews: { positive: number; negative: number };\n  }[];\n}\n\nexport function TableReviews({ data }: TableReviewsProps) {\n  const { classes, theme } = useStyles();\n\n  const rows = data.map((row) => {\n    const totalReviews = row.reviews.negative + row.reviews.positive;\n    const positiveReviews = (row.reviews.positive / totalReviews) * 100;\n    const negativeReviews = (row.reviews.negative / totalReviews) * 100;\n\n    return (\n      <tr key={row.title}>\n        <td>\n          <Anchor<'a'> size=\"sm\" onClick={(event) => event.preventDefault()}>\n            {row.title}\n          </Anchor>\n        </td>\n        <td>{row.year}</td>\n        <td>\n          <Anchor<'a'> size=\"sm\" onClick={(event) => event.preventDefault()}>\n            {row.author}\n          </Anchor>\n        </td>\n        <td>{Intl.NumberFormat().format(totalReviews)}</td>\n        <td>\n          <Group position=\"apart\">\n            <Text size=\"xs\" color=\"teal\" weight={700}>\n              {positiveReviews.toFixed(0)}%\n            </Text>\n            <Text size=\"xs\" color=\"red\" weight={700}>\n              {negativeReviews.toFixed(0)}%\n            </Text>\n          </Group>\n          <Progress\n            classNames={{ bar: classes.progressBar }}\n            sections={[\n              {\n                value: positiveReviews,\n                color: theme.colorScheme === 'dark' ? theme.colors.teal[9] : theme.colors.teal[6],\n              },\n              {\n                value: negativeReviews,\n                color: theme.colorScheme === 'dark' ? theme.colors.red[9] : theme.colors.red[6],\n              },\n            ]}\n          />\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <ScrollArea>\n      <Table sx={{ minWidth: 800 }} verticalSpacing=\"xs\">\n        <thead>\n          <tr>\n            <th>Book title</th>\n            <th>Year</th>\n            <th>Author</th>\n            <th>Reviews</th>\n            <th>Reviews distribution</th>\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </Table>\n    </ScrollArea>\n  );\n}\n",
      "attributes": {
        "title": "Table with progress",
        "category": "tables",
        "author": "rtivital",
        "dependencies": [
          "/core/table/",
          "/core/progress/",
          "/core/text/",
          "/core/group/",
          "/core/scroll-area/"
        ],
        "props": {
          "data": [
            {
              "title": "Foundation",
              "author": "Isaac Asimov",
              "year": 1951,
              "reviews": {
                "positive": 2223,
                "negative": 259
              }
            },
            {
              "title": "Frankenstein",
              "author": "Mary Shelley",
              "year": 1818,
              "reviews": {
                "positive": 5677,
                "negative": 1265
              }
            },
            {
              "title": "Solaris",
              "author": "Stanislaw Lem",
              "year": 1961,
              "reviews": {
                "positive": 3487,
                "negative": 1845
              }
            },
            {
              "title": "Dune",
              "author": "Frank Herbert",
              "year": 1965,
              "reviews": {
                "positive": 8576,
                "negative": 663
              }
            },
            {
              "title": "The Left Hand of Darkness",
              "author": "Ursula K. Le Guin",
              "year": 1969,
              "reviews": {
                "positive": 6631,
                "negative": 993
              }
            },
            {
              "title": "A Scanner Darkly",
              "author": "Philip K Dick",
              "year": 1977,
              "reviews": {
                "positive": 8124,
                "negative": 1847
              }
            }
          ]
        },
        "canvas": {
          "center": true,
          "maxWidth": 920
        }
      }
    },
    {
      "component": "TableScrollArea",
      "url": "/component/table-scroll-area",
      "code": "import React, { useState } from 'react';\nimport { createStyles, Table, ScrollArea } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  header: {\n    position: 'sticky',\n    top: 0,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n    transition: 'box-shadow 150ms ease',\n\n    '&::after': {\n      content: '\"\"',\n      position: 'absolute',\n      left: 0,\n      right: 0,\n      bottom: 0,\n      borderBottom: `1px solid ${\n        theme.colorScheme === 'dark' ? theme.colors.dark[3] : theme.colors.gray[2]\n      }`,\n    },\n  },\n\n  scrolled: {\n    boxShadow: theme.shadows.sm,\n  },\n}));\n\ninterface TableScrollAreaProps {\n  data: { name: string; email: string; company: string }[];\n}\n\nexport function TableScrollArea({ data }: TableScrollAreaProps) {\n  const { classes, cx } = useStyles();\n  const [scrolled, setScrolled] = useState(false);\n\n  const rows = data.map((row) => (\n    <tr key={row.name}>\n      <td>{row.name}</td>\n      <td>{row.email}</td>\n      <td>{row.company}</td>\n    </tr>\n  ));\n\n  return (\n    <ScrollArea sx={{ height: 300 }} onScrollPositionChange={({ y }) => setScrolled(y !== 0)}>\n      <Table sx={{ minWidth: 700 }}>\n        <thead className={cx(classes.header, { [classes.scrolled]: scrolled })}>\n          <tr>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Company</th>\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </Table>\n    </ScrollArea>\n  );\n}\n",
      "attributes": {
        "title": "Table with sticky header",
        "category": "tables",
        "author": "rtivital",
        "dependencies": [
          "/core/table/",
          "/core/scroll-area/"
        ],
        "props": {
          "data": [
            {
              "name": "Athena Weissnat",
              "company": "Little - Rippin",
              "email": "Elouise.Prohaska@yahoo.com"
            },
            {
              "name": "Deangelo Runolfsson",
              "company": "Greenfelder - Krajcik",
              "email": "Kadin_Trantow87@yahoo.com"
            },
            {
              "name": "Danny Carter",
              "company": "Kohler and Sons",
              "email": "Marina3@hotmail.com"
            },
            {
              "name": "Trace Tremblay PhD",
              "company": "Crona, Aufderhar and Senger",
              "email": "Antonina.Pouros@yahoo.com"
            },
            {
              "name": "Derek Dibbert",
              "company": "Gottlieb LLC",
              "email": "Abagail29@hotmail.com"
            },
            {
              "name": "Viola Bernhard",
              "company": "Funk, Rohan and Kreiger",
              "email": "Jamie23@hotmail.com"
            },
            {
              "name": "Austin Jacobi",
              "company": "Botsford - Corwin",
              "email": "Genesis42@yahoo.com"
            },
            {
              "name": "Hershel Mosciski",
              "company": "Okuneva, Farrell and Kilback",
              "email": "Idella.Stehr28@yahoo.com"
            },
            {
              "name": "Mylene Ebert",
              "company": "Kirlin and Sons",
              "email": "Hildegard17@hotmail.com"
            },
            {
              "name": "Lou Trantow",
              "company": "Parisian - Lemke",
              "email": "Hillard.Barrows1@hotmail.com"
            },
            {
              "name": "Dariana Weimann",
              "company": "Schowalter - Donnelly",
              "email": "Colleen80@gmail.com"
            },
            {
              "name": "Dr. Christy Herman",
              "company": "VonRueden - Labadie",
              "email": "Lilyan98@gmail.com"
            },
            {
              "name": "Katelin Schuster",
              "company": "Jacobson - Smitham",
              "email": "Erich_Brekke76@gmail.com"
            },
            {
              "name": "Melyna Macejkovic",
              "company": "Schuster LLC",
              "email": "Kylee4@yahoo.com"
            },
            {
              "name": "Pinkie Rice",
              "company": "Wolf, Trantow and Zulauf",
              "email": "Fiona.Kutch@hotmail.com"
            },
            {
              "name": "Brain Kreiger",
              "company": "Lueilwitz Group",
              "email": "Rico98@hotmail.com"
            },
            {
              "name": "Myrtice McGlynn",
              "company": "Feest, Beahan and Johnston",
              "email": "Julius_Tremblay29@hotmail.com"
            },
            {
              "name": "Chester Carter PhD",
              "company": "Gaylord - Labadie",
              "email": "Jensen_McKenzie@hotmail.com"
            },
            {
              "name": "Mrs. Ericka Bahringer",
              "company": "Conn and Sons",
              "email": "Lisandro56@hotmail.com"
            },
            {
              "name": "Korbin Buckridge Sr.",
              "company": "Mraz, Rolfson and Predovic",
              "email": "Leatha9@yahoo.com"
            },
            {
              "name": "Dr. Daisy Becker",
              "company": "Carter - Mueller",
              "email": "Keaton_Sanford27@gmail.com"
            },
            {
              "name": "Derrick Buckridge Sr.",
              "company": "O'Reilly LLC",
              "email": "Kay83@yahoo.com"
            },
            {
              "name": "Ernie Hickle",
              "company": "Terry, O'Reilly and Farrell",
              "email": "Americo.Leffler89@gmail.com"
            },
            {
              "name": "Jewell Littel",
              "company": "O'Connell Group",
              "email": "Hester.Hettinger9@hotmail.com"
            },
            {
              "name": "Cyrus Howell",
              "company": "Windler, Yost and Fadel",
              "email": "Rick0@gmail.com"
            },
            {
              "name": "Dr. Orie Jast",
              "company": "Hilll - Pacocha",
              "email": "Anna56@hotmail.com"
            },
            {
              "name": "Luisa Murphy",
              "company": "Turner and Sons",
              "email": "Christine32@yahoo.com"
            },
            {
              "name": "Lea Witting",
              "company": "Hodkiewicz Inc",
              "email": "Ford_Kovacek4@yahoo.com"
            },
            {
              "name": "Kelli Runolfsson",
              "company": "Feest - O'Hara",
              "email": "Dimitri87@yahoo.com"
            },
            {
              "name": "Brook Gaylord",
              "company": "Conn, Huel and Nader",
              "email": "Immanuel77@gmail.com"
            }
          ]
        },
        "canvas": {
          "center": true,
          "maxWidth": 920
        }
      }
    },
    {
      "component": "TableSelection",
      "url": "/component/table-selection",
      "code": "import React, { useState } from 'react';\nimport { createStyles, Table, Checkbox, ScrollArea, Group, Avatar, Text } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  rowSelected: {\n    backgroundColor:\n      theme.colorScheme === 'dark'\n        ? theme.fn.rgba(theme.colors[theme.primaryColor][7], 0.2)\n        : theme.colors[theme.primaryColor][0],\n  },\n}));\n\ninterface TableSelectionProps {\n  data: { avatar: string; name: string; email: string; job: string; id: string }[];\n}\n\nexport function TableSelection({ data }: TableSelectionProps) {\n  const { classes, cx } = useStyles();\n  const [selection, setSelection] = useState(['1']);\n  const toggleRow = (id: string) =>\n    setSelection((current) =>\n      current.includes(id) ? current.filter((item) => item !== id) : [...current, id]\n    );\n  const toggleAll = () =>\n    setSelection((current) => (current.length === data.length ? [] : data.map((item) => item.id)));\n\n  const rows = data.map((item) => {\n    const selected = selection.includes(item.id);\n    return (\n      <tr key={item.id} className={cx({ [classes.rowSelected]: selected })}>\n        <td>\n          <Checkbox\n            checked={selection.includes(item.id)}\n            onChange={() => toggleRow(item.id)}\n            transitionDuration={0}\n          />\n        </td>\n        <td>\n          <Group spacing=\"sm\">\n            <Avatar size={26} src={item.avatar} radius={26} />\n            <Text size=\"sm\" weight={500}>\n              {item.name}\n            </Text>\n          </Group>\n        </td>\n        <td>{item.email}</td>\n        <td>{item.job}</td>\n      </tr>\n    );\n  });\n\n  return (\n    <ScrollArea>\n      <Table sx={{ minWidth: 800 }} verticalSpacing=\"sm\">\n        <thead>\n          <tr>\n            <th style={{ width: 40 }}>\n              <Checkbox\n                onChange={toggleAll}\n                checked={selection.length === data.length}\n                indeterminate={selection.length > 0 && selection.length !== data.length}\n                transitionDuration={0}\n              />\n            </th>\n            <th>User</th>\n            <th>Email</th>\n            <th>Job</th>\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </Table>\n    </ScrollArea>\n  );\n}\n",
      "attributes": {
        "title": "Table with selection",
        "category": "tables",
        "author": "rtivital",
        "withColor": true,
        "dependencies": [
          "/core/table/",
          "/core/text/",
          "/core/checkbox"
        ],
        "props": {
          "data": [
            {
              "id": "1",
              "avatar": "https://images.unsplash.com/photo-1624298357597-fd92dfbec01d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80",
              "name": "Robert Wolfkisser",
              "job": "Engineer",
              "email": "rob_wolf@gmail.com"
            },
            {
              "id": "2",
              "avatar": "https://images.unsplash.com/photo-1586297135537-94bc9ba060aa?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80",
              "name": "Jill Jailbreaker",
              "job": "Engineer",
              "email": "jj@breaker.com"
            },
            {
              "id": "3",
              "avatar": "https://images.unsplash.com/photo-1632922267756-9b71242b1592?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80",
              "name": "Henry Silkeater",
              "job": "Designer",
              "email": "henry@silkeater.io"
            },
            {
              "id": "4",
              "avatar": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80",
              "name": "Bill Horsefighter",
              "job": "Designer",
              "email": "bhorsefighter@gmail.com"
            },
            {
              "id": "5",
              "avatar": "https://images.unsplash.com/photo-1630841539293-bd20634c5d72?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80",
              "name": "Jeremy Footviewer",
              "job": "Manager",
              "email": "jeremy@foot.dev"
            }
          ]
        },
        "canvas": {
          "center": true,
          "maxWidth": 800
        }
      }
    },
    {
      "component": "TableSort",
      "url": "/component/table-sort",
      "code": "import React, { useState } from 'react';\nimport {\n  createStyles,\n  Table,\n  ScrollArea,\n  UnstyledButton,\n  Group,\n  Text,\n  Center,\n  TextInput,\n} from '@mantine/core';\nimport {\n  CaretUpIcon,\n  CaretDownIcon,\n  CaretSortIcon,\n  MagnifyingGlassIcon,\n} from '@modulz/radix-icons';\n\nconst useStyles = createStyles((theme) => ({\n  th: {\n    padding: '0 !important',\n  },\n\n  control: {\n    width: '100%',\n    padding: `${theme.spacing.xs}px ${theme.spacing.md}px`,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    },\n  },\n\n  icon: {\n    width: 21,\n    height: 21,\n    borderRadius: 21,\n  },\n\n  sorted: {\n    backgroundColor:\n      theme.colorScheme === 'dark'\n        ? theme.fn.rgba(theme.colors[theme.primaryColor][7], 0.35)\n        : theme.colors[theme.primaryColor][0],\n    color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 4 : 6],\n  },\n}));\n\ninterface RowData {\n  name: string;\n  email: string;\n  company: string;\n}\n\ninterface TableSortProps {\n  data: RowData[];\n}\n\ninterface ThProps {\n  children: React.ReactNode;\n  reversed: boolean;\n  sorted: boolean;\n  onSort(): void;\n}\n\nfunction Th({ children, reversed, sorted, onSort }: ThProps) {\n  const { classes, cx } = useStyles();\n  const Icon = sorted ? (reversed ? CaretUpIcon : CaretDownIcon) : CaretSortIcon;\n  return (\n    <th className={classes.th}>\n      <UnstyledButton onClick={onSort} className={classes.control}>\n        <Group position=\"apart\">\n          <Text weight={500} size=\"sm\">\n            {children}\n          </Text>\n          <Center className={cx(classes.icon, { [classes.sorted]: sorted })}>\n            <Icon />\n          </Center>\n        </Group>\n      </UnstyledButton>\n    </th>\n  );\n}\n\nfunction filterData(data: RowData[], search: string) {\n  const keys = Object.keys(data[0]);\n  const query = search.toLowerCase().trim();\n  return data.filter((item) => keys.some((key) => item[key].toLowerCase().includes(query)));\n}\n\nfunction sortData(\n  data: RowData[],\n  payload: { sortBy: keyof RowData; reversed: boolean; search: string }\n) {\n  if (!payload.sortBy) {\n    return filterData(data, payload.search);\n  }\n\n  return filterData(\n    [...data].sort((a, b) => {\n      if (payload.reversed) {\n        return b[payload.sortBy].localeCompare(a[payload.sortBy]);\n      }\n\n      return a[payload.sortBy].localeCompare(b[payload.sortBy]);\n    }),\n    payload.search\n  );\n}\n\nexport function TableSort({ data }: TableSortProps) {\n  const [search, setSearch] = useState('');\n  const [sortedData, setSortedData] = useState(data);\n  const [sortBy, setSortBy] = useState<keyof RowData>(null);\n  const [reverseSortDirection, setReverseSortDirection] = useState(false);\n\n  const setSorting = (field: keyof RowData) => {\n    const reversed = field === sortBy ? !reverseSortDirection : false;\n    setReverseSortDirection(reversed);\n    setSortBy(field);\n    setSortedData(sortData(data, { sortBy: field, reversed, search }));\n  };\n\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.currentTarget.value;\n    setSearch(value);\n    setSortedData(sortData(data, { sortBy, reversed: reverseSortDirection, search: value }));\n  };\n\n  const rows = sortedData.map((row) => (\n    <tr key={row.name}>\n      <td>{row.name}</td>\n      <td>{row.email}</td>\n      <td>{row.company}</td>\n    </tr>\n  ));\n\n  return (\n    <ScrollArea>\n      <TextInput\n        placeholder=\"Search by any field\"\n        mb=\"md\"\n        icon={<MagnifyingGlassIcon />}\n        value={search}\n        onChange={handleSearchChange}\n      />\n      <Table\n        horizontalSpacing=\"md\"\n        verticalSpacing=\"xs\"\n        sx={{ tableLayout: 'fixed', minWidth: 700 }}\n      >\n        <thead>\n          <tr>\n            <Th\n              sorted={sortBy === 'name'}\n              reversed={reverseSortDirection}\n              onSort={() => setSorting('name')}\n            >\n              Name\n            </Th>\n            <Th\n              sorted={sortBy === 'email'}\n              reversed={reverseSortDirection}\n              onSort={() => setSorting('email')}\n            >\n              Email\n            </Th>\n            <Th\n              sorted={sortBy === 'company'}\n              reversed={reverseSortDirection}\n              onSort={() => setSorting('company')}\n            >\n              Company\n            </Th>\n          </tr>\n        </thead>\n        <tbody>\n          {rows.length > 0 ? (\n            rows\n          ) : (\n            <tr>\n              <td colSpan={Object.keys(data[0]).length}>\n                <Text weight={500} align=\"center\">\n                  Nothing found\n                </Text>\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </Table>\n    </ScrollArea>\n  );\n}\n",
      "attributes": {
        "title": "Table with search and sort",
        "category": "tables",
        "author": "rtivital",
        "dependencies": [
          "/core/table/",
          "/core/scroll-area/",
          "/core/button/#unstyled-button",
          "/core/group/",
          "/core/text/",
          "/core/center/",
          "/core/text-input/",
          "@modulz/radix-icons"
        ],
        "props": {
          "data": [
            {
              "name": "Athena Weissnat",
              "company": "Little - Rippin",
              "email": "Elouise.Prohaska@yahoo.com"
            },
            {
              "name": "Deangelo Runolfsson",
              "company": "Greenfelder - Krajcik",
              "email": "Kadin_Trantow87@yahoo.com"
            },
            {
              "name": "Danny Carter",
              "company": "Kohler and Sons",
              "email": "Marina3@hotmail.com"
            },
            {
              "name": "Trace Tremblay PhD",
              "company": "Crona, Aufderhar and Senger",
              "email": "Antonina.Pouros@yahoo.com"
            },
            {
              "name": "Derek Dibbert",
              "company": "Gottlieb LLC",
              "email": "Abagail29@hotmail.com"
            },
            {
              "name": "Viola Bernhard",
              "company": "Funk, Rohan and Kreiger",
              "email": "Jamie23@hotmail.com"
            },
            {
              "name": "Austin Jacobi",
              "company": "Botsford - Corwin",
              "email": "Genesis42@yahoo.com"
            },
            {
              "name": "Hershel Mosciski",
              "company": "Okuneva, Farrell and Kilback",
              "email": "Idella.Stehr28@yahoo.com"
            },
            {
              "name": "Mylene Ebert",
              "company": "Kirlin and Sons",
              "email": "Hildegard17@hotmail.com"
            },
            {
              "name": "Lou Trantow",
              "company": "Parisian - Lemke",
              "email": "Hillard.Barrows1@hotmail.com"
            },
            {
              "name": "Dariana Weimann",
              "company": "Schowalter - Donnelly",
              "email": "Colleen80@gmail.com"
            },
            {
              "name": "Dr. Christy Herman",
              "company": "VonRueden - Labadie",
              "email": "Lilyan98@gmail.com"
            },
            {
              "name": "Katelin Schuster",
              "company": "Jacobson - Smitham",
              "email": "Erich_Brekke76@gmail.com"
            },
            {
              "name": "Melyna Macejkovic",
              "company": "Schuster LLC",
              "email": "Kylee4@yahoo.com"
            },
            {
              "name": "Pinkie Rice",
              "company": "Wolf, Trantow and Zulauf",
              "email": "Fiona.Kutch@hotmail.com"
            },
            {
              "name": "Brain Kreiger",
              "company": "Lueilwitz Group",
              "email": "Rico98@hotmail.com"
            }
          ]
        },
        "canvas": {
          "center": true,
          "maxWidth": 920
        }
      }
    }
  ],
  "users": [
    {
      "component": "UserButton",
      "url": "/component/user-button",
      "code": "import React from 'react';\nimport {\n  UnstyledButton,\n  UnstyledButtonProps,\n  Group,\n  Avatar,\n  Text,\n  createStyles,\n} from '@mantine/core';\nimport { ChevronRightIcon } from '@modulz/radix-icons';\n\nconst useStyles = createStyles((theme) => ({\n  user: {\n    display: 'block',\n    width: '100%',\n    padding: theme.spacing.md,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.black,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.colors.gray[0],\n    },\n  },\n}));\n\ninterface UserButtonProps extends UnstyledButtonProps {\n  image: string;\n  name: string;\n  email: string;\n  icon?: React.ReactNode;\n}\n\nexport function UserButton({ image, name, email, icon, ...others }: UserButtonProps) {\n  const { classes } = useStyles();\n\n  return (\n    <UnstyledButton className={classes.user} {...others}>\n      <Group>\n        <Avatar src={image} radius=\"xl\" />\n\n        <div style={{ flex: 1 }}>\n          <Text size=\"sm\" weight={500}>\n            {name}\n          </Text>\n\n          <Text color=\"dimmed\" size=\"xs\">\n            {email}\n          </Text>\n        </div>\n\n        {icon || <ChevronRightIcon />}\n      </Group>\n    </UnstyledButton>\n  );\n}\n",
      "attributes": {
        "title": "User button",
        "category": "users",
        "author": "rtivital",
        "dependencies": [
          "/core/button/#unstyled-button",
          "/core/text/",
          "/core/avatar/"
        ],
        "props": {
          "image": "https://images.unsplash.com/photo-1508214751196-bcfd4ca60f91?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=255&q=80",
          "name": "Harriette Spoonlicker",
          "email": "hspoonlicker@outlook.com"
        },
        "canvas": {
          "center": true,
          "maxWidth": 320
        }
      }
    },
    {
      "component": "UserInfoAction",
      "url": "/component/user-info-action",
      "code": "import React from 'react';\nimport { createStyles, Avatar, Text, Button } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    borderRadius: theme.radius.md,\n    padding: theme.spacing.md,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.white,\n    boxShadow: theme.shadows.sm,\n  },\n}));\n\ninterface UserInfoActionProps {\n  avatar: string;\n  name: string;\n  email: string;\n  job: string;\n}\n\nexport function UserInfoAction({ avatar, name, email, job }: UserInfoActionProps) {\n  const { classes } = useStyles();\n  return (\n    <div className={classes.root}>\n      <Avatar src={avatar} size={120} radius={120} mx=\"auto\" />\n      <Text align=\"center\" size=\"lg\" weight={500} mt=\"md\">\n        {name}\n      </Text>\n      <Text align=\"center\" color=\"dimmed\" size=\"sm\">\n        {email} • {job}\n      </Text>\n\n      <Button variant=\"default\" fullWidth mt=\"md\">\n        Send message\n      </Button>\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "User card with action",
        "category": "users",
        "author": "rtivital",
        "dependencies": [
          "/core/button/",
          "/core/text/",
          "/core/avatar/"
        ],
        "props": {
          "avatar": "https://images.unsplash.com/photo-1508214751196-bcfd4ca60f91?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=255&q=80",
          "name": "Jane Fingerlicker",
          "email": "jfingerlicker@me.io",
          "job": "Art director"
        },
        "canvas": {
          "center": true,
          "maxWidth": 320
        }
      }
    },
    {
      "component": "UserInfoIcons",
      "url": "/component/user-info-icons",
      "code": "import React from 'react';\nimport { createStyles, Avatar, Text, Group } from '@mantine/core';\nimport { PhoneCall, At } from 'tabler-icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  icon: {\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[3] : theme.colors.gray[5],\n  },\n\n  name: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n  },\n}));\n\ninterface UserInfoIconsProps {\n  avatar: string;\n  name: string;\n  title: string;\n  phone: string;\n  email: string;\n}\n\nexport function UserInfoIcons({ avatar, name, title, phone, email }: UserInfoIconsProps) {\n  const { classes } = useStyles();\n  return (\n    <div>\n      <Group noWrap>\n        <Avatar src={avatar} size={94} radius=\"md\" />\n        <div>\n          <Text size=\"xs\" sx={{ textTransform: 'uppercase' }} weight={700} color=\"dimmed\">\n            {title}\n          </Text>\n\n          <Text size=\"lg\" weight={500} className={classes.name}>\n            {name}\n          </Text>\n\n          <Group noWrap spacing={10} mt={3}>\n            <At size={16} className={classes.icon} />\n            <Text size=\"xs\" color=\"dimmed\">\n              {email}\n            </Text>\n          </Group>\n\n          <Group noWrap spacing={10} mt={5}>\n            <PhoneCall size={16} className={classes.icon} />\n            <Text size=\"xs\" color=\"dimmed\">\n              {phone}\n            </Text>\n          </Group>\n        </div>\n      </Group>\n    </div>\n  );\n}\n",
      "attributes": {
        "title": "User info with icons",
        "category": "users",
        "author": "rtivital",
        "dependencies": [
          "/core/avatar/",
          "/core/group/",
          "/core/text/",
          "tabler-icons-react"
        ],
        "props": {
          "avatar": "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&q=80",
          "title": "Software engineer",
          "name": "Robert Glassbreaker",
          "email": "robert@glassbreaker.io",
          "phone": "+11 (876) 890 56 23"
        },
        "canvas": {
          "center": true,
          "maxWidth": 320
        }
      }
    },
    {
      "component": "UserMenu",
      "url": "/component/user-menu",
      "code": "import React from 'react';\nimport { Menu, Group, Text, Avatar, Divider, useMantineTheme } from '@mantine/core';\nimport { ChevronRightIcon } from '@modulz/radix-icons';\nimport {\n  Logout,\n  Heart,\n  Star,\n  Message,\n  Settings,\n  PlayerPause,\n  Trash,\n  SwitchHorizontal,\n} from 'tabler-icons-react';\n\nexport function UserMenu() {\n  const theme = useMantineTheme();\n  return (\n    <Group position=\"center\">\n      <Menu withArrow size={300} placement=\"center\" transition=\"pop\">\n        <Menu.Item rightSection={<ChevronRightIcon />}>\n          <Group>\n            <Avatar\n              radius=\"xl\"\n              src=\"https://images.unsplash.com/photo-1508214751196-bcfd4ca60f91?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=255&q=80\"\n            />\n\n            <div>\n              <Text weight={500}>Nancy Eggshacker</Text>\n              <Text size=\"xs\" color=\"dimmed\">\n                neggshaker@mantine.dev\n              </Text>\n            </div>\n          </Group>\n        </Menu.Item>\n\n        <Divider />\n\n        <Menu.Item icon={<Heart size={14} color={theme.colors.red[6]} />}>Liked posts</Menu.Item>\n        <Menu.Item icon={<Star size={14} color={theme.colors.yellow[6]} />}>Saved posts</Menu.Item>\n        <Menu.Item icon={<Message size={14} color={theme.colors.blue[6]} />}>\n          Your comments\n        </Menu.Item>\n\n        <Menu.Label>Settings</Menu.Label>\n        <Menu.Item icon={<Settings size={14} />}>Account settings</Menu.Item>\n        <Menu.Item icon={<SwitchHorizontal size={14} />}>Change account</Menu.Item>\n        <Menu.Item icon={<Logout size={14} />}>Logout</Menu.Item>\n\n        <Divider />\n\n        <Menu.Label>Danger zone</Menu.Label>\n        <Menu.Item icon={<PlayerPause size={14} />}>Pause subscription</Menu.Item>\n        <Menu.Item color=\"red\" icon={<Trash size={14} />}>\n          Delete account\n        </Menu.Item>\n      </Menu>\n    </Group>\n  );\n}\n",
      "attributes": {
        "title": "User menu",
        "category": "users",
        "author": "rtivital",
        "dependencies": [
          "/core/text/",
          "/core/menu/",
          "/core/avatar/",
          "/core/group/",
          "/core/divider/"
        ],
        "canvas": {
          "center": false
        }
      }
    },
    {
      "component": "UsersRolesTable",
      "url": "/component/users-roles-table",
      "code": "import React from 'react';\nimport { Avatar, Badge, Table, Group, Text, Select, ScrollArea } from '@mantine/core';\n\ninterface UsersTableProps {\n  data: { avatar: string; name: string; job: string; email: string; role: string }[];\n}\n\nconst rolesData = ['Manager', 'Collaborator', 'Contractor'];\n\nexport function UsersRolesTable({ data }: UsersTableProps) {\n  const rows = data.map((item) => (\n    <tr key={item.name}>\n      <td>\n        <Group spacing=\"sm\">\n          <Avatar size={40} src={item.avatar} radius={40} />\n          <div>\n            <Text size=\"sm\" weight={500}>\n              {item.name}\n            </Text>\n            <Text size=\"xs\" color=\"dimmed\">\n              {item.email}\n            </Text>\n          </div>\n        </Group>\n      </td>\n\n      <td>\n        <Select data={rolesData} defaultValue={item.role} variant=\"unstyled\" />\n      </td>\n      <td>{Math.floor(Math.random() * 6 + 5)} days ago</td>\n      <td>\n        {Math.random() > 0.5 ? (\n          <Badge fullWidth>Active</Badge>\n        ) : (\n          <Badge color=\"gray\" fullWidth>\n            Disabled\n          </Badge>\n        )}\n      </td>\n    </tr>\n  ));\n\n  return (\n    <ScrollArea>\n      <Table sx={{ minWidth: 800 }} verticalSpacing=\"sm\">\n        <thead>\n          <tr>\n            <th>Employee</th>\n            <th>Role</th>\n            <th>Last active</th>\n            <th>Status</th>\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </Table>\n    </ScrollArea>\n  );\n}\n",
      "attributes": {
        "title": "Table with roles select",
        "category": "users",
        "author": "rtivital",
        "dependencies": [
          "/core/table/",
          "/core/text/",
          "/core/badge/",
          "/core/native-select/",
          "/core/avatar/",
          "/core/scroll-area/"
        ],
        "props": {
          "data": [
            {
              "avatar": "https://images.unsplash.com/photo-1624298357597-fd92dfbec01d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80",
              "name": "Robert Wolfkisser",
              "job": "Engineer",
              "email": "rob_wolf@gmail.com",
              "role": "Collaborator"
            },
            {
              "avatar": "https://images.unsplash.com/photo-1586297135537-94bc9ba060aa?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80",
              "name": "Jill Jailbreaker",
              "job": "Engineer",
              "email": "jj@breaker.com",
              "role": "Collaborator"
            },
            {
              "avatar": "https://images.unsplash.com/photo-1632922267756-9b71242b1592?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80",
              "name": "Henry Silkeater",
              "job": "Designer",
              "email": "henry@silkeater.io",
              "role": "Contractor"
            },
            {
              "avatar": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80",
              "name": "Bill Horsefighter",
              "job": "Designer",
              "email": "bhorsefighter@gmail.com",
              "role": "Contractor"
            },
            {
              "avatar": "https://images.unsplash.com/photo-1630841539293-bd20634c5d72?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80",
              "name": "Jeremy Footviewer",
              "job": "Manager",
              "email": "jeremy@foot.dev",
              "role": "Manager"
            }
          ]
        },
        "canvas": {
          "center": true,
          "maxWidth": 800
        }
      }
    },
    {
      "component": "UsersStack",
      "url": "/component/users-stack",
      "code": "import React from 'react';\nimport { Avatar, Table, Group, Text, ActionIcon, Menu, ScrollArea } from '@mantine/core';\nimport { Pencil, Messages, Note, ReportAnalytics, Trash } from 'tabler-icons-react';\n\ninterface UsersStackProps {\n  data: { avatar: string; name: string; job: string; email: string; rate: number }[];\n}\n\nexport function UsersStack({ data }: UsersStackProps) {\n  const rows = data.map((item) => (\n    <tr key={item.name}>\n      <td>\n        <Group spacing=\"sm\">\n          <Avatar size={40} src={item.avatar} radius={40} />\n          <div>\n            <Text size=\"sm\" weight={500}>\n              {item.name}\n            </Text>\n            <Text color=\"dimmed\" size=\"xs\">\n              {item.job}\n            </Text>\n          </div>\n        </Group>\n      </td>\n      <td>\n        <Text size=\"sm\">{item.email}</Text>\n        <Text size=\"xs\" color=\"dimmed\">\n          Email\n        </Text>\n      </td>\n      <td>\n        <Text size=\"sm\">${item.rate.toFixed(1)} / hr</Text>\n        <Text size=\"xs\" color=\"dimmed\">\n          Rate\n        </Text>\n      </td>\n      <td>\n        <Group spacing={0} position=\"right\">\n          <ActionIcon>\n            <Pencil size={16} />\n          </ActionIcon>\n          <Menu transition=\"pop\" withArrow placement=\"end\">\n            <Menu.Item icon={<Messages size={16} />}>Send message</Menu.Item>\n            <Menu.Item icon={<Note size={16} />}>Add note</Menu.Item>\n            <Menu.Item icon={<ReportAnalytics size={16} />}>Analytics</Menu.Item>\n            <Menu.Item icon={<Trash size={16} />} color=\"red\">\n              Terminate contract\n            </Menu.Item>\n          </Menu>\n        </Group>\n      </td>\n    </tr>\n  ));\n\n  return (\n    <ScrollArea>\n      <Table sx={{ minWidth: 800 }} verticalSpacing=\"md\">\n        <tbody>{rows}</tbody>\n      </Table>\n    </ScrollArea>\n  );\n}\n",
      "attributes": {
        "title": "Users stack",
        "category": "users",
        "author": "rtivital",
        "dependencies": [
          "/core/table/",
          "/core/text/",
          "/core/menu/",
          "/core/group/",
          "/core/action-icon/",
          "/core/avatar/",
          "/core/scroll-area/",
          "tabler-icons-react"
        ],
        "props": {
          "data": [
            {
              "avatar": "https://images.unsplash.com/photo-1624298357597-fd92dfbec01d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80",
              "name": "Robert Wolfkisser",
              "job": "Engineer",
              "email": "rob_wolf@gmail.com",
              "rate": 22
            },
            {
              "avatar": "https://images.unsplash.com/photo-1586297135537-94bc9ba060aa?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80",
              "name": "Jill Jailbreaker",
              "job": "Engineer",
              "email": "jj@breaker.com",
              "rate": 45
            },
            {
              "avatar": "https://images.unsplash.com/photo-1632922267756-9b71242b1592?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80",
              "name": "Henry Silkeater",
              "job": "Designer",
              "email": "henry@silkeater.io",
              "rate": 76
            },
            {
              "avatar": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80",
              "name": "Bill Horsefighter",
              "job": "Designer",
              "email": "bhorsefighter@gmail.com",
              "rate": 15
            },
            {
              "avatar": "https://images.unsplash.com/photo-1630841539293-bd20634c5d72?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80",
              "name": "Jeremy Footviewer",
              "job": "Manager",
              "email": "jeremy@foot.dev",
              "rate": 98
            }
          ]
        },
        "canvas": {
          "center": true,
          "maxWidth": 800
        }
      }
    },
    {
      "component": "UsersTable",
      "url": "/component/users-table",
      "code": "import React from 'react';\nimport {\n  Avatar,\n  Badge,\n  Table,\n  Group,\n  Text,\n  ActionIcon,\n  Anchor,\n  ScrollArea,\n  useMantineTheme,\n} from '@mantine/core';\nimport { Pencil, Trash } from 'tabler-icons-react';\n\ninterface UsersTableProps {\n  data: { avatar: string; name: string; job: string; email: string; phone: string }[];\n}\n\nconst jobColors = {\n  engineer: 'blue',\n  manager: 'cyan',\n  designer: 'pink',\n};\n\nexport function UsersTable({ data }: UsersTableProps) {\n  const theme = useMantineTheme();\n  const rows = data.map((item) => (\n    <tr key={item.name}>\n      <td>\n        <Group spacing=\"sm\">\n          <Avatar size={30} src={item.avatar} radius={30} />\n          <Text size=\"sm\" weight={500}>\n            {item.name}\n          </Text>\n        </Group>\n      </td>\n\n      <td>\n        <Badge\n          color={jobColors[item.job.toLowerCase()]}\n          variant={theme.colorScheme === 'dark' ? 'light' : 'outline'}\n        >\n          {item.job}\n        </Badge>\n      </td>\n      <td>\n        <Anchor<'a'> size=\"sm\" href=\"#\" onClick={(event) => event.preventDefault()}>\n          {item.email}\n        </Anchor>\n      </td>\n      <td>\n        <Text size=\"sm\" color=\"gray\">\n          {item.phone}\n        </Text>\n      </td>\n      <td>\n        <Group spacing={0} position=\"right\">\n          <ActionIcon>\n            <Pencil size={16} />\n          </ActionIcon>\n          <ActionIcon color=\"red\">\n            <Trash size={16} />\n          </ActionIcon>\n        </Group>\n      </td>\n    </tr>\n  ));\n\n  return (\n    <ScrollArea>\n      <Table sx={{ minWidth: 800 }} verticalSpacing=\"sm\">\n        <thead>\n          <tr>\n            <th>Employee</th>\n            <th>Job title</th>\n            <th>Email</th>\n            <th>Phone</th>\n            <th />\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </Table>\n    </ScrollArea>\n  );\n}\n",
      "attributes": {
        "title": "Table with users",
        "category": "users",
        "author": "rtivital",
        "dependencies": [
          "/core/table/",
          "/core/text/",
          "/core/badge/",
          "/core/group/",
          "/core/action-icon/",
          "/core/avatar/",
          "/core/scroll-area/",
          "tabler-icons-react"
        ],
        "props": {
          "data": [
            {
              "avatar": "https://images.unsplash.com/photo-1624298357597-fd92dfbec01d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80",
              "name": "Robert Wolfkisser",
              "job": "Engineer",
              "email": "rob_wolf@gmail.com",
              "phone": "+44 (452) 886 09 12"
            },
            {
              "avatar": "https://images.unsplash.com/photo-1586297135537-94bc9ba060aa?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80",
              "name": "Jill Jailbreaker",
              "job": "Engineer",
              "email": "jj@breaker.com",
              "phone": "+44 (934) 777 12 76"
            },
            {
              "avatar": "https://images.unsplash.com/photo-1632922267756-9b71242b1592?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80",
              "name": "Henry Silkeater",
              "job": "Designer",
              "email": "henry@silkeater.io",
              "phone": "+44 (901) 384 88 34"
            },
            {
              "avatar": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80",
              "name": "Bill Horsefighter",
              "job": "Designer",
              "email": "bhorsefighter@gmail.com",
              "phone": "+44 (667) 341 45 22"
            },
            {
              "avatar": "https://images.unsplash.com/photo-1630841539293-bd20634c5d72?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80",
              "name": "Jeremy Footviewer",
              "job": "Manager",
              "email": "jeremy@foot.dev",
              "phone": "+44 (881) 245 65 65"
            }
          ]
        },
        "canvas": {
          "center": true,
          "maxWidth": 800
        }
      }
    }
  ]
}
